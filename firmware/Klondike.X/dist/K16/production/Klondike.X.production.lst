

Microchip Technology PIC PRO Macro Assembler V1.12 build 49521 
                                                                                               Sun Aug 25 00:05:39 2013

HI-TECH Software Omniscient Code Generator (PRO mode) build 49521
     1                           	processor	16LF1459
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK6,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	lowcode,global,class=CODE,delta=2
    23                           	psect	usb,global,class=CODE,delta=2
    24                           	psect	text1918,local,class=CODE,merge=1,delta=2
    25                           	psect	text1919,local,class=CODE,merge=1,delta=2
    26                           	psect	text1920,local,class=CODE,merge=1,delta=2
    27                           	psect	text1921,local,class=CODE,merge=1,delta=2
    28                           	psect	text1922,local,class=CODE,merge=1,delta=2
    29                           	psect	text1923,local,class=CODE,merge=1,delta=2
    30                           	psect	swtext1,local,class=CONST,delta=2
    31                           	psect	text1944,local,class=CODE,merge=1,delta=2
    32                           	psect	text1945,local,class=CODE,merge=1,delta=2
    33                           	psect	text1946,local,class=CODE,merge=1,delta=2
    34                           	psect	text1947,local,class=CODE,merge=1,delta=2
    35                           	psect	text1948,local,class=CODE,merge=1,delta=2
    36                           	psect	text1950,local,class=CODE,merge=1,delta=2
    37                           	psect	text1951,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text1963,local,class=CODE,merge=1,delta=2
    40                           	psect	text1967,local,class=CODE,merge=1,delta=2
    41                           	psect	pa_nodes,global,class=CODE,delta=2
    42                           	dabs	1,0x620,48
    43                           	dabs	1,0x5A0,80
    44                           	dabs	1,0x53C,52
    45                           	dabs	1,0x20,32
    46                           	dabs	1,0x48,8
    47                           	dabs	1,0x40,8
    48                           	dabs	1,0x220,64
    49                           	dabs	1,0x2A0,64
    50                           	dabs	1,0x7E,2
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0015                     	;# 
    69  0016                     	;# 
    70  0016                     	;# 
    71  0017                     	;# 
    72  0018                     	;# 
    73  0019                     	;# 
    74  001A                     	;# 
    75  001B                     	;# 
    76  001C                     	;# 
    77  008C                     	;# 
    78  008D                     	;# 
    79  008E                     	;# 
    80  0091                     	;# 
    81  0092                     	;# 
    82  0095                     	;# 
    83  0096                     	;# 
    84  0097                     	;# 
    85  0098                     	;# 
    86  0099                     	;# 
    87  009A                     	;# 
    88  009B                     	;# 
    89  009B                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009E                     	;# 
    93  009F                     	;# 
    94  010C                     	;# 
    95  010D                     	;# 
    96  010E                     	;# 
    97  0111                     	;# 
    98  0112                     	;# 
    99  0113                     	;# 
   100  0114                     	;# 
   101  0115                     	;# 
   102  0116                     	;# 
   103  0117                     	;# 
   104  0118                     	;# 
   105  0119                     	;# 
   106  011D                     	;# 
   107  018C                     	;# 
   108  018D                     	;# 
   109  018E                     	;# 
   110  0191                     	;# 
   111  0191                     	;# 
   112  0192                     	;# 
   113  0193                     	;# 
   114  0193                     	;# 
   115  0194                     	;# 
   116  0195                     	;# 
   117  0196                     	;# 
   118  0199                     	;# 
   119  019A                     	;# 
   120  019B                     	;# 
   121  019C                     	;# 
   122  019D                     	;# 
   123  019E                     	;# 
   124  019F                     	;# 
   125  020C                     	;# 
   126  020D                     	;# 
   127  0211                     	;# 
   128  0211                     	;# 
   129  0212                     	;# 
   130  0212                     	;# 
   131  0213                     	;# 
   132  0213                     	;# 
   133  0214                     	;# 
   134  0214                     	;# 
   135  0215                     	;# 
   136  0215                     	;# 
   137  0215                     	;# 
   138  0216                     	;# 
   139  0216                     	;# 
   140  0217                     	;# 
   141  0217                     	;# 
   142  0391                     	;# 
   143  0392                     	;# 
   144  0393                     	;# 
   145  0394                     	;# 
   146  0395                     	;# 
   147  0396                     	;# 
   148  039A                     	;# 
   149  039B                     	;# 
   150  0611                     	;# 
   151  0612                     	;# 
   152  0613                     	;# 
   153  0613                     	;# 
   154  0614                     	;# 
   155  0615                     	;# 
   156  0616                     	;# 
   157  0616                     	;# 
   158  0691                     	;# 
   159  0692                     	;# 
   160  0693                     	;# 
   161  0694                     	;# 
   162  0695                     	;# 
   163  0E8E                     	;# 
   164  0E8F                     	;# 
   165  0E90                     	;# 
   166  0E91                     	;# 
   167  0E92                     	;# 
   168  0E93                     	;# 
   169  0E94                     	;# 
   170  0E94                     	;# 
   171  0E95                     	;# 
   172  0E96                     	;# 
   173  0E97                     	;# 
   174  0E98                     	;# 
   175  0E99                     	;# 
   176  0E9A                     	;# 
   177  0E9B                     	;# 
   178  0E9C                     	;# 
   179  0E9D                     	;# 
   180  0E9E                     	;# 
   181  0E9F                     	;# 
   182  0FE4                     	;# 
   183  0FE5                     	;# 
   184  0FE6                     	;# 
   185  0FE7                     	;# 
   186  0FE8                     	;# 
   187  0FE9                     	;# 
   188  0FEA                     	;# 
   189  0FEB                     	;# 
   190  0FED                     	;# 
   191  0FEE                     	;# 
   192  0FEF                     	;# 
   193  0000                     	;# 
   194  0001                     	;# 
   195  0002                     	;# 
   196  0003                     	;# 
   197  0004                     	;# 
   198  0005                     	;# 
   199  0006                     	;# 
   200  0007                     	;# 
   201  0008                     	;# 
   202  0009                     	;# 
   203  000A                     	;# 
   204  000B                     	;# 
   205  000C                     	;# 
   206  000D                     	;# 
   207  000E                     	;# 
   208  0011                     	;# 
   209  0012                     	;# 
   210  0015                     	;# 
   211  0016                     	;# 
   212  0016                     	;# 
   213  0017                     	;# 
   214  0018                     	;# 
   215  0019                     	;# 
   216  001A                     	;# 
   217  001B                     	;# 
   218  001C                     	;# 
   219  008C                     	;# 
   220  008D                     	;# 
   221  008E                     	;# 
   222  0091                     	;# 
   223  0092                     	;# 
   224  0095                     	;# 
   225  0096                     	;# 
   226  0097                     	;# 
   227  0098                     	;# 
   228  0099                     	;# 
   229  009A                     	;# 
   230  009B                     	;# 
   231  009B                     	;# 
   232  009C                     	;# 
   233  009D                     	;# 
   234  009E                     	;# 
   235  009F                     	;# 
   236  010C                     	;# 
   237  010D                     	;# 
   238  010E                     	;# 
   239  0111                     	;# 
   240  0112                     	;# 
   241  0113                     	;# 
   242  0114                     	;# 
   243  0115                     	;# 
   244  0116                     	;# 
   245  0117                     	;# 
   246  0118                     	;# 
   247  0119                     	;# 
   248  011D                     	;# 
   249  018C                     	;# 
   250  018D                     	;# 
   251  018E                     	;# 
   252  0191                     	;# 
   253  0191                     	;# 
   254  0192                     	;# 
   255  0193                     	;# 
   256  0193                     	;# 
   257  0194                     	;# 
   258  0195                     	;# 
   259  0196                     	;# 
   260  0199                     	;# 
   261  019A                     	;# 
   262  019B                     	;# 
   263  019C                     	;# 
   264  019D                     	;# 
   265  019E                     	;# 
   266  019F                     	;# 
   267  020C                     	;# 
   268  020D                     	;# 
   269  0211                     	;# 
   270  0211                     	;# 
   271  0212                     	;# 
   272  0212                     	;# 
   273  0213                     	;# 
   274  0213                     	;# 
   275  0214                     	;# 
   276  0214                     	;# 
   277  0215                     	;# 
   278  0215                     	;# 
   279  0215                     	;# 
   280  0216                     	;# 
   281  0216                     	;# 
   282  0217                     	;# 
   283  0217                     	;# 
   284  0391                     	;# 
   285  0392                     	;# 
   286  0393                     	;# 
   287  0394                     	;# 
   288  0395                     	;# 
   289  0396                     	;# 
   290  039A                     	;# 
   291  039B                     	;# 
   292  0611                     	;# 
   293  0612                     	;# 
   294  0613                     	;# 
   295  0613                     	;# 
   296  0614                     	;# 
   297  0615                     	;# 
   298  0616                     	;# 
   299  0616                     	;# 
   300  0691                     	;# 
   301  0692                     	;# 
   302  0693                     	;# 
   303  0694                     	;# 
   304  0695                     	;# 
   305  0E8E                     	;# 
   306  0E8F                     	;# 
   307  0E90                     	;# 
   308  0E91                     	;# 
   309  0E92                     	;# 
   310  0E93                     	;# 
   311  0E94                     	;# 
   312  0E94                     	;# 
   313  0E95                     	;# 
   314  0E96                     	;# 
   315  0E97                     	;# 
   316  0E98                     	;# 
   317  0E99                     	;# 
   318  0E9A                     	;# 
   319  0E9B                     	;# 
   320  0E9C                     	;# 
   321  0E9D                     	;# 
   322  0E9E                     	;# 
   323  0E9F                     	;# 
   324  0FE4                     	;# 
   325  0FE5                     	;# 
   326  0FE6                     	;# 
   327  0FE7                     	;# 
   328  0FE8                     	;# 
   329  0FE9                     	;# 
   330  0FEA                     	;# 
   331  0FEB                     	;# 
   332  0FED                     	;# 
   333  0FEE                     	;# 
   334  0FEF                     	;# 
   335  0000                     	;# 
   336  0001                     	;# 
   337  0002                     	;# 
   338  0003                     	;# 
   339  0004                     	;# 
   340  0005                     	;# 
   341  0006                     	;# 
   342  0007                     	;# 
   343  0008                     	;# 
   344  0009                     	;# 
   345  000A                     	;# 
   346  000B                     	;# 
   347  000C                     	;# 
   348  000D                     	;# 
   349  000E                     	;# 
   350  0011                     	;# 
   351  0012                     	;# 
   352  0015                     	;# 
   353  0016                     	;# 
   354  0016                     	;# 
   355  0017                     	;# 
   356  0018                     	;# 
   357  0019                     	;# 
   358  001A                     	;# 
   359  001B                     	;# 
   360  001C                     	;# 
   361  008C                     	;# 
   362  008D                     	;# 
   363  008E                     	;# 
   364  0091                     	;# 
   365  0092                     	;# 
   366  0095                     	;# 
   367  0096                     	;# 
   368  0097                     	;# 
   369  0098                     	;# 
   370  0099                     	;# 
   371  009A                     	;# 
   372  009B                     	;# 
   373  009B                     	;# 
   374  009C                     	;# 
   375  009D                     	;# 
   376  009E                     	;# 
   377  009F                     	;# 
   378  010C                     	;# 
   379  010D                     	;# 
   380  010E                     	;# 
   381  0111                     	;# 
   382  0112                     	;# 
   383  0113                     	;# 
   384  0114                     	;# 
   385  0115                     	;# 
   386  0116                     	;# 
   387  0117                     	;# 
   388  0118                     	;# 
   389  0119                     	;# 
   390  011D                     	;# 
   391  018C                     	;# 
   392  018D                     	;# 
   393  018E                     	;# 
   394  0191                     	;# 
   395  0191                     	;# 
   396  0192                     	;# 
   397  0193                     	;# 
   398  0193                     	;# 
   399  0194                     	;# 
   400  0195                     	;# 
   401  0196                     	;# 
   402  0199                     	;# 
   403  019A                     	;# 
   404  019B                     	;# 
   405  019C                     	;# 
   406  019D                     	;# 
   407  019E                     	;# 
   408  019F                     	;# 
   409  020C                     	;# 
   410  020D                     	;# 
   411  0211                     	;# 
   412  0211                     	;# 
   413  0212                     	;# 
   414  0212                     	;# 
   415  0213                     	;# 
   416  0213                     	;# 
   417  0214                     	;# 
   418  0214                     	;# 
   419  0215                     	;# 
   420  0215                     	;# 
   421  0215                     	;# 
   422  0216                     	;# 
   423  0216                     	;# 
   424  0217                     	;# 
   425  0217                     	;# 
   426  0391                     	;# 
   427  0392                     	;# 
   428  0393                     	;# 
   429  0394                     	;# 
   430  0395                     	;# 
   431  0396                     	;# 
   432  039A                     	;# 
   433  039B                     	;# 
   434  0611                     	;# 
   435  0612                     	;# 
   436  0613                     	;# 
   437  0613                     	;# 
   438  0614                     	;# 
   439  0615                     	;# 
   440  0616                     	;# 
   441  0616                     	;# 
   442  0691                     	;# 
   443  0692                     	;# 
   444  0693                     	;# 
   445  0694                     	;# 
   446  0695                     	;# 
   447  0E8E                     	;# 
   448  0E8F                     	;# 
   449  0E90                     	;# 
   450  0E91                     	;# 
   451  0E92                     	;# 
   452  0E93                     	;# 
   453  0E94                     	;# 
   454  0E94                     	;# 
   455  0E95                     	;# 
   456  0E96                     	;# 
   457  0E97                     	;# 
   458  0E98                     	;# 
   459  0E99                     	;# 
   460  0E9A                     	;# 
   461  0E9B                     	;# 
   462  0E9C                     	;# 
   463  0E9D                     	;# 
   464  0E9E                     	;# 
   465  0E9F                     	;# 
   466  0FE4                     	;# 
   467  0FE5                     	;# 
   468  0FE6                     	;# 
   469  0FE7                     	;# 
   470  0FE8                     	;# 
   471  0FE9                     	;# 
   472  0FEA                     	;# 
   473  0FEB                     	;# 
   474  0FED                     	;# 
   475  0FEE                     	;# 
   476  0FEF                     	;# 
   477  0000                     	;# 
   478  0001                     	;# 
   479  0002                     	;# 
   480  0003                     	;# 
   481  0004                     	;# 
   482  0005                     	;# 
   483  0006                     	;# 
   484  0007                     	;# 
   485  0008                     	;# 
   486  0009                     	;# 
   487  000A                     	;# 
   488  000B                     	;# 
   489  000C                     	;# 
   490  000D                     	;# 
   491  000E                     	;# 
   492  0011                     	;# 
   493  0012                     	;# 
   494  0015                     	;# 
   495  0016                     	;# 
   496  0016                     	;# 
   497  0017                     	;# 
   498  0018                     	;# 
   499  0019                     	;# 
   500  001A                     	;# 
   501  001B                     	;# 
   502  001C                     	;# 
   503  008C                     	;# 
   504  008D                     	;# 
   505  008E                     	;# 
   506  0091                     	;# 
   507  0092                     	;# 
   508  0095                     	;# 
   509  0096                     	;# 
   510  0097                     	;# 
   511  0098                     	;# 
   512  0099                     	;# 
   513  009A                     	;# 
   514  009B                     	;# 
   515  009B                     	;# 
   516  009C                     	;# 
   517  009D                     	;# 
   518  009E                     	;# 
   519  009F                     	;# 
   520  010C                     	;# 
   521  010D                     	;# 
   522  010E                     	;# 
   523  0111                     	;# 
   524  0112                     	;# 
   525  0113                     	;# 
   526  0114                     	;# 
   527  0115                     	;# 
   528  0116                     	;# 
   529  0117                     	;# 
   530  0118                     	;# 
   531  0119                     	;# 
   532  011D                     	;# 
   533  018C                     	;# 
   534  018D                     	;# 
   535  018E                     	;# 
   536  0191                     	;# 
   537  0191                     	;# 
   538  0192                     	;# 
   539  0193                     	;# 
   540  0193                     	;# 
   541  0194                     	;# 
   542  0195                     	;# 
   543  0196                     	;# 
   544  0199                     	;# 
   545  019A                     	;# 
   546  019B                     	;# 
   547  019C                     	;# 
   548  019D                     	;# 
   549  019E                     	;# 
   550  019F                     	;# 
   551  020C                     	;# 
   552  020D                     	;# 
   553  0211                     	;# 
   554  0211                     	;# 
   555  0212                     	;# 
   556  0212                     	;# 
   557  0213                     	;# 
   558  0213                     	;# 
   559  0214                     	;# 
   560  0214                     	;# 
   561  0215                     	;# 
   562  0215                     	;# 
   563  0215                     	;# 
   564  0216                     	;# 
   565  0216                     	;# 
   566  0217                     	;# 
   567  0217                     	;# 
   568  0391                     	;# 
   569  0392                     	;# 
   570  0393                     	;# 
   571  0394                     	;# 
   572  0395                     	;# 
   573  0396                     	;# 
   574  039A                     	;# 
   575  039B                     	;# 
   576  0611                     	;# 
   577  0612                     	;# 
   578  0613                     	;# 
   579  0613                     	;# 
   580  0614                     	;# 
   581  0615                     	;# 
   582  0616                     	;# 
   583  0616                     	;# 
   584  0691                     	;# 
   585  0692                     	;# 
   586  0693                     	;# 
   587  0694                     	;# 
   588  0695                     	;# 
   589  0E8E                     	;# 
   590  0E8F                     	;# 
   591  0E90                     	;# 
   592  0E91                     	;# 
   593  0E92                     	;# 
   594  0E93                     	;# 
   595  0E94                     	;# 
   596  0E94                     	;# 
   597  0E95                     	;# 
   598  0E96                     	;# 
   599  0E97                     	;# 
   600  0E98                     	;# 
   601  0E99                     	;# 
   602  0E9A                     	;# 
   603  0E9B                     	;# 
   604  0E9C                     	;# 
   605  0E9D                     	;# 
   606  0E9E                     	;# 
   607  0E9F                     	;# 
   608  0FE4                     	;# 
   609  0FE5                     	;# 
   610  0FE6                     	;# 
   611  0FE7                     	;# 
   612  0FE8                     	;# 
   613  0FE9                     	;# 
   614  0FEA                     	;# 
   615  0FEB                     	;# 
   616  0FED                     	;# 
   617  0FEE                     	;# 
   618  0FEF                     	;# 
   619  0000                     	;# 
   620  0001                     	;# 
   621  0002                     	;# 
   622  0003                     	;# 
   623  0004                     	;# 
   624  0005                     	;# 
   625  0006                     	;# 
   626  0007                     	;# 
   627  0008                     	;# 
   628  0009                     	;# 
   629  000A                     	;# 
   630  000B                     	;# 
   631  000C                     	;# 
   632  000D                     	;# 
   633  000E                     	;# 
   634  0011                     	;# 
   635  0012                     	;# 
   636  0015                     	;# 
   637  0016                     	;# 
   638  0016                     	;# 
   639  0017                     	;# 
   640  0018                     	;# 
   641  0019                     	;# 
   642  001A                     	;# 
   643  001B                     	;# 
   644  001C                     	;# 
   645  008C                     	;# 
   646  008D                     	;# 
   647  008E                     	;# 
   648  0091                     	;# 
   649  0092                     	;# 
   650  0095                     	;# 
   651  0096                     	;# 
   652  0097                     	;# 
   653  0098                     	;# 
   654  0099                     	;# 
   655  009A                     	;# 
   656  009B                     	;# 
   657  009B                     	;# 
   658  009C                     	;# 
   659  009D                     	;# 
   660  009E                     	;# 
   661  009F                     	;# 
   662  010C                     	;# 
   663  010D                     	;# 
   664  010E                     	;# 
   665  0111                     	;# 
   666  0112                     	;# 
   667  0113                     	;# 
   668  0114                     	;# 
   669  0115                     	;# 
   670  0116                     	;# 
   671  0117                     	;# 
   672  0118                     	;# 
   673  0119                     	;# 
   674  011D                     	;# 
   675  018C                     	;# 
   676  018D                     	;# 
   677  018E                     	;# 
   678  0191                     	;# 
   679  0191                     	;# 
   680  0192                     	;# 
   681  0193                     	;# 
   682  0193                     	;# 
   683  0194                     	;# 
   684  0195                     	;# 
   685  0196                     	;# 
   686  0199                     	;# 
   687  019A                     	;# 
   688  019B                     	;# 
   689  019C                     	;# 
   690  019D                     	;# 
   691  019E                     	;# 
   692  019F                     	;# 
   693  020C                     	;# 
   694  020D                     	;# 
   695  0211                     	;# 
   696  0211                     	;# 
   697  0212                     	;# 
   698  0212                     	;# 
   699  0213                     	;# 
   700  0213                     	;# 
   701  0214                     	;# 
   702  0214                     	;# 
   703  0215                     	;# 
   704  0215                     	;# 
   705  0215                     	;# 
   706  0216                     	;# 
   707  0216                     	;# 
   708  0217                     	;# 
   709  0217                     	;# 
   710  0391                     	;# 
   711  0392                     	;# 
   712  0393                     	;# 
   713  0394                     	;# 
   714  0395                     	;# 
   715  0396                     	;# 
   716  039A                     	;# 
   717  039B                     	;# 
   718  0611                     	;# 
   719  0612                     	;# 
   720  0613                     	;# 
   721  0613                     	;# 
   722  0614                     	;# 
   723  0615                     	;# 
   724  0616                     	;# 
   725  0616                     	;# 
   726  0691                     	;# 
   727  0692                     	;# 
   728  0693                     	;# 
   729  0694                     	;# 
   730  0695                     	;# 
   731  0E8E                     	;# 
   732  0E8F                     	;# 
   733  0E90                     	;# 
   734  0E91                     	;# 
   735  0E92                     	;# 
   736  0E93                     	;# 
   737  0E94                     	;# 
   738  0E94                     	;# 
   739  0E95                     	;# 
   740  0E96                     	;# 
   741  0E97                     	;# 
   742  0E98                     	;# 
   743  0E99                     	;# 
   744  0E9A                     	;# 
   745  0E9B                     	;# 
   746  0E9C                     	;# 
   747  0E9D                     	;# 
   748  0E9E                     	;# 
   749  0E9F                     	;# 
   750  0FE4                     	;# 
   751  0FE5                     	;# 
   752  0FE6                     	;# 
   753  0FE7                     	;# 
   754  0FE8                     	;# 
   755  0FE9                     	;# 
   756  0FEA                     	;# 
   757  0FEB                     	;# 
   758  0FED                     	;# 
   759  0FEE                     	;# 
   760  0FEF                     	;# 
   761  0000                     	;# 
   762  0001                     	;# 
   763  0002                     	;# 
   764  0003                     	;# 
   765  0004                     	;# 
   766  0005                     	;# 
   767  0006                     	;# 
   768  0007                     	;# 
   769  0008                     	;# 
   770  0009                     	;# 
   771  000A                     	;# 
   772  000B                     	;# 
   773  000C                     	;# 
   774  000D                     	;# 
   775  000E                     	;# 
   776  0011                     	;# 
   777  0012                     	;# 
   778  0015                     	;# 
   779  0016                     	;# 
   780  0016                     	;# 
   781  0017                     	;# 
   782  0018                     	;# 
   783  0019                     	;# 
   784  001A                     	;# 
   785  001B                     	;# 
   786  001C                     	;# 
   787  008C                     	;# 
   788  008D                     	;# 
   789  008E                     	;# 
   790  0091                     	;# 
   791  0092                     	;# 
   792  0095                     	;# 
   793  0096                     	;# 
   794  0097                     	;# 
   795  0098                     	;# 
   796  0099                     	;# 
   797  009A                     	;# 
   798  009B                     	;# 
   799  009B                     	;# 
   800  009C                     	;# 
   801  009D                     	;# 
   802  009E                     	;# 
   803  009F                     	;# 
   804  010C                     	;# 
   805  010D                     	;# 
   806  010E                     	;# 
   807  0111                     	;# 
   808  0112                     	;# 
   809  0113                     	;# 
   810  0114                     	;# 
   811  0115                     	;# 
   812  0116                     	;# 
   813  0117                     	;# 
   814  0118                     	;# 
   815  0119                     	;# 
   816  011D                     	;# 
   817  018C                     	;# 
   818  018D                     	;# 
   819  018E                     	;# 
   820  0191                     	;# 
   821  0191                     	;# 
   822  0192                     	;# 
   823  0193                     	;# 
   824  0193                     	;# 
   825  0194                     	;# 
   826  0195                     	;# 
   827  0196                     	;# 
   828  0199                     	;# 
   829  019A                     	;# 
   830  019B                     	;# 
   831  019C                     	;# 
   832  019D                     	;# 
   833  019E                     	;# 
   834  019F                     	;# 
   835  020C                     	;# 
   836  020D                     	;# 
   837  0211                     	;# 
   838  0211                     	;# 
   839  0212                     	;# 
   840  0212                     	;# 
   841  0213                     	;# 
   842  0213                     	;# 
   843  0214                     	;# 
   844  0214                     	;# 
   845  0215                     	;# 
   846  0215                     	;# 
   847  0215                     	;# 
   848  0216                     	;# 
   849  0216                     	;# 
   850  0217                     	;# 
   851  0217                     	;# 
   852  0391                     	;# 
   853  0392                     	;# 
   854  0393                     	;# 
   855  0394                     	;# 
   856  0395                     	;# 
   857  0396                     	;# 
   858  039A                     	;# 
   859  039B                     	;# 
   860  0611                     	;# 
   861  0612                     	;# 
   862  0613                     	;# 
   863  0613                     	;# 
   864  0614                     	;# 
   865  0615                     	;# 
   866  0616                     	;# 
   867  0616                     	;# 
   868  0691                     	;# 
   869  0692                     	;# 
   870  0693                     	;# 
   871  0694                     	;# 
   872  0695                     	;# 
   873  0E8E                     	;# 
   874  0E8F                     	;# 
   875  0E90                     	;# 
   876  0E91                     	;# 
   877  0E92                     	;# 
   878  0E93                     	;# 
   879  0E94                     	;# 
   880  0E94                     	;# 
   881  0E95                     	;# 
   882  0E96                     	;# 
   883  0E97                     	;# 
   884  0E98                     	;# 
   885  0E99                     	;# 
   886  0E9A                     	;# 
   887  0E9B                     	;# 
   888  0E9C                     	;# 
   889  0E9D                     	;# 
   890  0E9E                     	;# 
   891  0E9F                     	;# 
   892  0FE4                     	;# 
   893  0FE5                     	;# 
   894  0FE6                     	;# 
   895  0FE7                     	;# 
   896  0FE8                     	;# 
   897  0FE9                     	;# 
   898  0FEA                     	;# 
   899  0FEB                     	;# 
   900  0FED                     	;# 
   901  0FEE                     	;# 
   902  0FEF                     	;# 
   903  0000                     	;# 
   904  0001                     	;# 
   905  0002                     	;# 
   906  0003                     	;# 
   907  0004                     	;# 
   908  0005                     	;# 
   909  0006                     	;# 
   910  0007                     	;# 
   911  0008                     	;# 
   912  0009                     	;# 
   913  000A                     	;# 
   914  000B                     	;# 
   915  000C                     	;# 
   916  000D                     	;# 
   917  000E                     	;# 
   918  0011                     	;# 
   919  0012                     	;# 
   920  0015                     	;# 
   921  0016                     	;# 
   922  0016                     	;# 
   923  0017                     	;# 
   924  0018                     	;# 
   925  0019                     	;# 
   926  001A                     	;# 
   927  001B                     	;# 
   928  001C                     	;# 
   929  008C                     	;# 
   930  008D                     	;# 
   931  008E                     	;# 
   932  0091                     	;# 
   933  0092                     	;# 
   934  0095                     	;# 
   935  0096                     	;# 
   936  0097                     	;# 
   937  0098                     	;# 
   938  0099                     	;# 
   939  009A                     	;# 
   940  009B                     	;# 
   941  009B                     	;# 
   942  009C                     	;# 
   943  009D                     	;# 
   944  009E                     	;# 
   945  009F                     	;# 
   946  010C                     	;# 
   947  010D                     	;# 
   948  010E                     	;# 
   949  0111                     	;# 
   950  0112                     	;# 
   951  0113                     	;# 
   952  0114                     	;# 
   953  0115                     	;# 
   954  0116                     	;# 
   955  0117                     	;# 
   956  0118                     	;# 
   957  0119                     	;# 
   958  011D                     	;# 
   959  018C                     	;# 
   960  018D                     	;# 
   961  018E                     	;# 
   962  0191                     	;# 
   963  0191                     	;# 
   964  0192                     	;# 
   965  0193                     	;# 
   966  0193                     	;# 
   967  0194                     	;# 
   968  0195                     	;# 
   969  0196                     	;# 
   970  0199                     	;# 
   971  019A                     	;# 
   972  019B                     	;# 
   973  019C                     	;# 
   974  019D                     	;# 
   975  019E                     	;# 
   976  019F                     	;# 
   977  020C                     	;# 
   978  020D                     	;# 
   979  0211                     	;# 
   980  0211                     	;# 
   981  0212                     	;# 
   982  0212                     	;# 
   983  0213                     	;# 
   984  0213                     	;# 
   985  0214                     	;# 
   986  0214                     	;# 
   987  0215                     	;# 
   988  0215                     	;# 
   989  0215                     	;# 
   990  0216                     	;# 
   991  0216                     	;# 
   992  0217                     	;# 
   993  0217                     	;# 
   994  0391                     	;# 
   995  0392                     	;# 
   996  0393                     	;# 
   997  0394                     	;# 
   998  0395                     	;# 
   999  0396                     	;# 
  1000  039A                     	;# 
  1001  039B                     	;# 
  1002  0611                     	;# 
  1003  0612                     	;# 
  1004  0613                     	;# 
  1005  0613                     	;# 
  1006  0614                     	;# 
  1007  0615                     	;# 
  1008  0616                     	;# 
  1009  0616                     	;# 
  1010  0691                     	;# 
  1011  0692                     	;# 
  1012  0693                     	;# 
  1013  0694                     	;# 
  1014  0695                     	;# 
  1015  0E8E                     	;# 
  1016  0E8F                     	;# 
  1017  0E90                     	;# 
  1018  0E91                     	;# 
  1019  0E92                     	;# 
  1020  0E93                     	;# 
  1021  0E94                     	;# 
  1022  0E94                     	;# 
  1023  0E95                     	;# 
  1024  0E96                     	;# 
  1025  0E97                     	;# 
  1026  0E98                     	;# 
  1027  0E99                     	;# 
  1028  0E9A                     	;# 
  1029  0E9B                     	;# 
  1030  0E9C                     	;# 
  1031  0E9D                     	;# 
  1032  0E9E                     	;# 
  1033  0E9F                     	;# 
  1034  0FE4                     	;# 
  1035  0FE5                     	;# 
  1036  0FE6                     	;# 
  1037  0FE7                     	;# 
  1038  0FE8                     	;# 
  1039  0FE9                     	;# 
  1040  0FEA                     	;# 
  1041  0FEB                     	;# 
  1042  0FED                     	;# 
  1043  0FEE                     	;# 
  1044  0FEF                     	;# 
  1045  0000                     	;# 
  1046  0001                     	;# 
  1047  0002                     	;# 
  1048  0003                     	;# 
  1049  0004                     	;# 
  1050  0005                     	;# 
  1051  0006                     	;# 
  1052  0007                     	;# 
  1053  0008                     	;# 
  1054  0009                     	;# 
  1055  000A                     	;# 
  1056  000B                     	;# 
  1057  000C                     	;# 
  1058  000D                     	;# 
  1059  000E                     	;# 
  1060  0011                     	;# 
  1061  0012                     	;# 
  1062  0015                     	;# 
  1063  0016                     	;# 
  1064  0016                     	;# 
  1065  0017                     	;# 
  1066  0018                     	;# 
  1067  0019                     	;# 
  1068  001A                     	;# 
  1069  001B                     	;# 
  1070  001C                     	;# 
  1071  008C                     	;# 
  1072  008D                     	;# 
  1073  008E                     	;# 
  1074  0091                     	;# 
  1075  0092                     	;# 
  1076  0095                     	;# 
  1077  0096                     	;# 
  1078  0097                     	;# 
  1079  0098                     	;# 
  1080  0099                     	;# 
  1081  009A                     	;# 
  1082  009B                     	;# 
  1083  009B                     	;# 
  1084  009C                     	;# 
  1085  009D                     	;# 
  1086  009E                     	;# 
  1087  009F                     	;# 
  1088  010C                     	;# 
  1089  010D                     	;# 
  1090  010E                     	;# 
  1091  0111                     	;# 
  1092  0112                     	;# 
  1093  0113                     	;# 
  1094  0114                     	;# 
  1095  0115                     	;# 
  1096  0116                     	;# 
  1097  0117                     	;# 
  1098  0118                     	;# 
  1099  0119                     	;# 
  1100  011D                     	;# 
  1101  018C                     	;# 
  1102  018D                     	;# 
  1103  018E                     	;# 
  1104  0191                     	;# 
  1105  0191                     	;# 
  1106  0192                     	;# 
  1107  0193                     	;# 
  1108  0193                     	;# 
  1109  0194                     	;# 
  1110  0195                     	;# 
  1111  0196                     	;# 
  1112  0199                     	;# 
  1113  019A                     	;# 
  1114  019B                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019E                     	;# 
  1118  019F                     	;# 
  1119  020C                     	;# 
  1120  020D                     	;# 
  1121  0211                     	;# 
  1122  0211                     	;# 
  1123  0212                     	;# 
  1124  0212                     	;# 
  1125  0213                     	;# 
  1126  0213                     	;# 
  1127  0214                     	;# 
  1128  0214                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  0391                     	;# 
  1137  0392                     	;# 
  1138  0393                     	;# 
  1139  0394                     	;# 
  1140  0395                     	;# 
  1141  0396                     	;# 
  1142  039A                     	;# 
  1143  039B                     	;# 
  1144  0611                     	;# 
  1145  0612                     	;# 
  1146  0613                     	;# 
  1147  0613                     	;# 
  1148  0614                     	;# 
  1149  0615                     	;# 
  1150  0616                     	;# 
  1151  0616                     	;# 
  1152  0691                     	;# 
  1153  0692                     	;# 
  1154  0693                     	;# 
  1155  0694                     	;# 
  1156  0695                     	;# 
  1157  0E8E                     	;# 
  1158  0E8F                     	;# 
  1159  0E90                     	;# 
  1160  0E91                     	;# 
  1161  0E92                     	;# 
  1162  0E93                     	;# 
  1163  0E94                     	;# 
  1164  0E94                     	;# 
  1165  0E95                     	;# 
  1166  0E96                     	;# 
  1167  0E97                     	;# 
  1168  0E98                     	;# 
  1169  0E99                     	;# 
  1170  0E9A                     	;# 
  1171  0E9B                     	;# 
  1172  0E9C                     	;# 
  1173  0E9D                     	;# 
  1174  0E9E                     	;# 
  1175  0E9F                     	;# 
  1176  0FE4                     	;# 
  1177  0FE5                     	;# 
  1178  0FE6                     	;# 
  1179  0FE7                     	;# 
  1180  0FE8                     	;# 
  1181  0FE9                     	;# 
  1182  0FEA                     	;# 
  1183  0FEB                     	;# 
  1184  0FED                     	;# 
  1185  0FEE                     	;# 
  1186  0FEF                     	;# 
  1187  0000                     	;# 
  1188  0001                     	;# 
  1189  0002                     	;# 
  1190  0003                     	;# 
  1191  0004                     	;# 
  1192  0005                     	;# 
  1193  0006                     	;# 
  1194  0007                     	;# 
  1195  0008                     	;# 
  1196  0009                     	;# 
  1197  000A                     	;# 
  1198  000B                     	;# 
  1199  000C                     	;# 
  1200  000D                     	;# 
  1201  000E                     	;# 
  1202  0011                     	;# 
  1203  0012                     	;# 
  1204  0015                     	;# 
  1205  0016                     	;# 
  1206  0016                     	;# 
  1207  0017                     	;# 
  1208  0018                     	;# 
  1209  0019                     	;# 
  1210  001A                     	;# 
  1211  001B                     	;# 
  1212  001C                     	;# 
  1213  008C                     	;# 
  1214  008D                     	;# 
  1215  008E                     	;# 
  1216  0091                     	;# 
  1217  0092                     	;# 
  1218  0095                     	;# 
  1219  0096                     	;# 
  1220  0097                     	;# 
  1221  0098                     	;# 
  1222  0099                     	;# 
  1223  009A                     	;# 
  1224  009B                     	;# 
  1225  009B                     	;# 
  1226  009C                     	;# 
  1227  009D                     	;# 
  1228  009E                     	;# 
  1229  009F                     	;# 
  1230  010C                     	;# 
  1231  010D                     	;# 
  1232  010E                     	;# 
  1233  0111                     	;# 
  1234  0112                     	;# 
  1235  0113                     	;# 
  1236  0114                     	;# 
  1237  0115                     	;# 
  1238  0116                     	;# 
  1239  0117                     	;# 
  1240  0118                     	;# 
  1241  0119                     	;# 
  1242  011D                     	;# 
  1243  018C                     	;# 
  1244  018D                     	;# 
  1245  018E                     	;# 
  1246  0191                     	;# 
  1247  0191                     	;# 
  1248  0192                     	;# 
  1249  0193                     	;# 
  1250  0193                     	;# 
  1251  0194                     	;# 
  1252  0195                     	;# 
  1253  0196                     	;# 
  1254  0199                     	;# 
  1255  019A                     	;# 
  1256  019B                     	;# 
  1257  019C                     	;# 
  1258  019D                     	;# 
  1259  019E                     	;# 
  1260  019F                     	;# 
  1261  020C                     	;# 
  1262  020D                     	;# 
  1263  0211                     	;# 
  1264  0211                     	;# 
  1265  0212                     	;# 
  1266  0212                     	;# 
  1267  0213                     	;# 
  1268  0213                     	;# 
  1269  0214                     	;# 
  1270  0214                     	;# 
  1271  0215                     	;# 
  1272  0215                     	;# 
  1273  0215                     	;# 
  1274  0216                     	;# 
  1275  0216                     	;# 
  1276  0217                     	;# 
  1277  0217                     	;# 
  1278  0391                     	;# 
  1279  0392                     	;# 
  1280  0393                     	;# 
  1281  0394                     	;# 
  1282  0395                     	;# 
  1283  0396                     	;# 
  1284  039A                     	;# 
  1285  039B                     	;# 
  1286  0611                     	;# 
  1287  0612                     	;# 
  1288  0613                     	;# 
  1289  0613                     	;# 
  1290  0614                     	;# 
  1291  0615                     	;# 
  1292  0616                     	;# 
  1293  0616                     	;# 
  1294  0691                     	;# 
  1295  0692                     	;# 
  1296  0693                     	;# 
  1297  0694                     	;# 
  1298  0695                     	;# 
  1299  0E8E                     	;# 
  1300  0E8F                     	;# 
  1301  0E90                     	;# 
  1302  0E91                     	;# 
  1303  0E92                     	;# 
  1304  0E93                     	;# 
  1305  0E94                     	;# 
  1306  0E94                     	;# 
  1307  0E95                     	;# 
  1308  0E96                     	;# 
  1309  0E97                     	;# 
  1310  0E98                     	;# 
  1311  0E99                     	;# 
  1312  0E9A                     	;# 
  1313  0E9B                     	;# 
  1314  0E9C                     	;# 
  1315  0E9D                     	;# 
  1316  0E9E                     	;# 
  1317  0E9F                     	;# 
  1318  0FE4                     	;# 
  1319  0FE5                     	;# 
  1320  0FE6                     	;# 
  1321  0FE7                     	;# 
  1322  0FE8                     	;# 
  1323  0FE9                     	;# 
  1324  0FEA                     	;# 
  1325  0FEB                     	;# 
  1326  0FED                     	;# 
  1327  0FEE                     	;# 
  1328  0FEF                     	;_WorkQue
  1329                           
  1330                           	psect	idataBANK2
  1331  162C                     __pidataBANK2:	
  1332                           ;	pragma psect text%u=lowcode
  1333                           
  1334                           
  1335                           ;initializer for _HashTime
  1336  162C  34D0               	retlw	208
  1337                           
  1338                           ;initializer for _Status
  1339  162D  3449               	retlw	73
  1340  162E  3400               	retlw	0
  1341  162F  3400               	retlw	0
  1342  1630  3400               	retlw	0
  1343  1631  3400               	retlw	0
  1344  1632  3400               	retlw	0
  1345  1633  3400               	retlw	0
  1346  1634  3400               	retlw	0
  1347  1635  3400               	retlw	0
  1348  1636  3400               	retlw	0
  1349  1637  3400               	retlw	0
  1350  1638  3440               	retlw	64
  1351  1639  3400               	retlw	0
  1352                           
  1353                           ;initializer for _ClockCfg
  1354  163A  3407               	retlw	7
  1355  163B  3400               	retlw	0
  1356  163C  3403               	retlw	3
  1357  163D  3404               	retlw	4
  1358  163E  3472               	retlw	114
  1359  163F  3401               	retlw	1
  1360  1640  3400               	retlw	0
  1361  1641  3400               	retlw	0
  1362                           
  1363                           ;initializer for _Cfg
  1364  1642  3400               	retlw	0
  1365  1643  3401               	retlw	1
  1366  1644  343C               	retlw	60
  1367  1645  3450               	retlw	80
  1368  1646  34E6               	retlw	230
  1369  1647  3400               	retlw	0
  1370                           
  1371                           	psect	idataBANK3
  1372  15F9                     __pidataBANK3:	
  1373                           
  1374                           ;initializer for AsicPreCalc@F3349
  1375  15F9  3498               	retlw	152
  1376  15FA  342F               	retlw	47
  1377  15FB  348A               	retlw	138
  1378  15FC  3442               	retlw	66
  1379  15FD  3491               	retlw	145
  1380  15FE  3444               	retlw	68
  1381  15FF  3437               	retlw	55
  1382  1600  3471               	retlw	113
  1383  1601  34CF               	retlw	207
  1384  1602  34FB               	retlw	251
  1385  1603  34C0               	retlw	192
  1386  1604  34B5               	retlw	181
  1387                           
  1388                           	psect	idataBANK6
  1389  1648                     __pidataBANK6:	
  1390                           
  1391                           ;initializer for _BankRanges
  1392  1648  3400               	retlw	0
  1393  1649  3400               	retlw	0
  1394  164A  3400               	retlw	0
  1395  164B  3400               	retlw	0
  1396  164C  3400               	retlw	0
  1397  164D  3400               	retlw	0
  1398  164E  3400               	retlw	0
  1399  164F  3440               	retlw	64
  1400  1650  34AA               	retlw	170
  1401  1651  34AA               	retlw	170
  1402  1652  34AA               	retlw	170
  1403  1653  342A               	retlw	42
  1404  1654  3400               	retlw	0
  1405  1655  3400               	retlw	0
  1406  1656  3400               	retlw	0
  1407  1657  3420               	retlw	32
  1408  1658  3499               	retlw	153
  1409  1659  3499               	retlw	153
  1410  165A  3499               	retlw	153
  1411  165B  3419               	retlw	25
  1412  165C  3455               	retlw	85
  1413  165D  3455               	retlw	85
  1414  165E  3455               	retlw	85
  1415  165F  3415               	retlw	21
  1416  1660  3492               	retlw	146
  1417  1661  3424               	retlw	36
  1418  1662  3449               	retlw	73
  1419  1663  3412               	retlw	18
  1420  1664  3400               	retlw	0
  1421  1665  3400               	retlw	0
  1422  1666  3400               	retlw	0
  1423  1667  3410               	retlw	16
  1424                           
  1425                           	psect	strings
  1426  1000                     __pstrings:	
  1427  1000                     __stringtab:	
  1428  1000  3400               	retlw	0
  1429  1001                     __end_of__stringtab:	
  1430  1001                     _FwPwd:	
  1431  1001  344B               	retlw	75
  1432  1002  346C               	retlw	108
  1433  1003  346F               	retlw	111
  1434  1004  346E               	retlw	110
  1435  1005  3464               	retlw	100
  1436  1006  3469               	retlw	105
  1437  1007  346B               	retlw	107
  1438  1008  3465               	retlw	101
  1439  1009  3452               	retlw	82
  1440  100A  346F               	retlw	111
  1441  100B  3463               	retlw	99
  1442  100C  346B               	retlw	107
  1443  100D  3473               	retlw	115
  1444  100E  3400               	retlw	0
  1445  100F                     __end_of_FwPwd:	
  1446  100F                     _USB_SD_Ptr:	
  1447  100F  34B9               	retlw	(_sd000| (0+32768))& (0+255)
  1448  1010  3413               	retlw	(_sd001| (0+32768))& (0+255)
  1449  1011  3447               	retlw	(_sd002| (0+32768))& (0+255)
  1450  1012                     __end_of_USB_SD_Ptr:	
  1451  1012                     _USB_CD_Ptr:	
  1452  1012  347B               	retlw	(_configDescriptor1| (0+32768))& (0+255)
  1453  1013                     __end_of_USB_CD_Ptr:	
  1454  1013                     _sd001:	
  1455  1013  3434               	retlw	52
  1456  1014  3403               	retlw	3
  1457  1015  344B               	retlw	75
  1458  1016  3400               	retlw	0
  1459  1017  346C               	retlw	108
  1460  1018  3400               	retlw	0
  1461  1019  346F               	retlw	111
  1462  101A  3400               	retlw	0
  1463  101B  346E               	retlw	110
  1464  101C  3400               	retlw	0
  1465  101D  3464               	retlw	100
  1466  101E  3400               	retlw	0
  1467  101F  3469               	retlw	105
  1468  1020  3400               	retlw	0
  1469  1021  346B               	retlw	107
  1470  1022  3400               	retlw	0
  1471  1023  3465               	retlw	101
  1472  1024  3400               	retlw	0
  1473  1025  3420               	retlw	32
  1474  1026  3400               	retlw	0
  1475  1027  3450               	retlw	80
  1476  1028  3400               	retlw	0
  1477  1029  3472               	retlw	114
  1478  102A  3400               	retlw	0
  1479  102B  346F               	retlw	111
  1480  102C  3400               	retlw	0
  1481  102D  346A               	retlw	106
  1482  102E  3400               	retlw	0
  1483  102F  3465               	retlw	101
  1484  1030  3400               	retlw	0
  1485  1031  3463               	retlw	99
  1486  1032  3400               	retlw	0
  1487  1033  3474               	retlw	116
  1488  1034  3400               	retlw	0
  1489  1035  3400               	retlw	0
  1490  1036  3400               	retlw	0
  1491  1037  3400               	retlw	0
  1492  1038  3400               	retlw	0
  1493  1039  3400               	retlw	0
  1494  103A  3400               	retlw	0
  1495  103B  3400               	retlw	0
  1496  103C  3400               	retlw	0
  1497  103D  3400               	retlw	0
  1498  103E  3400               	retlw	0
  1499  103F  3400               	retlw	0
  1500  1040  3400               	retlw	0
  1501  1041  3400               	retlw	0
  1502  1042  3400               	retlw	0
  1503  1043  3400               	retlw	0
  1504  1044  3400               	retlw	0
  1505  1045  3400               	retlw	0
  1506  1046  3400               	retlw	0
  1507  1047                     __end_of_sd001:	
  1508  1047                     _sd002:	
  1509  1047  3434               	retlw	52
  1510  1048  3403               	retlw	3
  1511  1049  344B               	retlw	75
  1512  104A  3400               	retlw	0
  1513  104B  3431               	retlw	49
  1514  104C  3400               	retlw	0
  1515  104D  3436               	retlw	54
  1516  104E  3400               	retlw	0
  1517  104F  3400               	retlw	0
  1518  1050  3400               	retlw	0
  1519  1051  3400               	retlw	0
  1520  1052  3400               	retlw	0
  1521  1053  3400               	retlw	0
  1522  1054  3400               	retlw	0
  1523  1055  3400               	retlw	0
  1524  1056  3400               	retlw	0
  1525  1057  3400               	retlw	0
  1526  1058  3400               	retlw	0
  1527  1059  3400               	retlw	0
  1528  105A  3400               	retlw	0
  1529  105B  3400               	retlw	0
  1530  105C  3400               	retlw	0
  1531  105D  3400               	retlw	0
  1532  105E  3400               	retlw	0
  1533  105F  3400               	retlw	0
  1534  1060  3400               	retlw	0
  1535  1061  3400               	retlw	0
  1536  1062  3400               	retlw	0
  1537  1063  3400               	retlw	0
  1538  1064  3400               	retlw	0
  1539  1065  3400               	retlw	0
  1540  1066  3400               	retlw	0
  1541  1067  3400               	retlw	0
  1542  1068  3400               	retlw	0
  1543  1069  3400               	retlw	0
  1544  106A  3400               	retlw	0
  1545  106B  3400               	retlw	0
  1546  106C  3400               	retlw	0
  1547  106D  3400               	retlw	0
  1548  106E  3400               	retlw	0
  1549  106F  3400               	retlw	0
  1550  1070  3400               	retlw	0
  1551  1071  3400               	retlw	0
  1552  1072  3400               	retlw	0
  1553  1073  3400               	retlw	0
  1554  1074  3400               	retlw	0
  1555  1075  3400               	retlw	0
  1556  1076  3400               	retlw	0
  1557  1077  3400               	retlw	0
  1558  1078  3400               	retlw	0
  1559  1079  3400               	retlw	0
  1560  107A  3400               	retlw	0
  1561  107B                     __end_of_sd002:	
  1562  107B                     _configDescriptor1:	
  1563  107B  3409               	retlw	9
  1564  107C  3402               	retlw	2
  1565  107D  3420               	retlw	32
  1566  107E  3400               	retlw	0
  1567  107F  3401               	retlw	1
  1568  1080  3401               	retlw	1
  1569  1081  3400               	retlw	0
  1570  1082  34C0               	retlw	192
  1571  1083  3432               	retlw	50
  1572  1084  3409               	retlw	9
  1573  1085  3404               	retlw	4
  1574  1086  3400               	retlw	0
  1575  1087  3400               	retlw	0
  1576  1088  3402               	retlw	2
  1577  1089  34FF               	retlw	255
  1578  108A  34FF               	retlw	255
  1579  108B  34FF               	retlw	255
  1580  108C  3400               	retlw	0
  1581  108D  3407               	retlw	7
  1582  108E  3405               	retlw	5
  1583  108F  3401               	retlw	1
  1584  1090  3402               	retlw	2
  1585  1091  3440               	retlw	64
  1586  1092  3400               	retlw	0
  1587  1093  3401               	retlw	1
  1588  1094  3407               	retlw	7
  1589  1095  3405               	retlw	5
  1590  1096  3481               	retlw	129
  1591  1097  3402               	retlw	2
  1592  1098  3440               	retlw	64
  1593  1099  3400               	retlw	0
  1594  109A  3401               	retlw	1
  1595  109B                     __end_of_configDescriptor1:	
  1596  109B                     _device_dsc:	
  1597  109B  3412               	retlw	18
  1598  109C  3401               	retlw	1
  1599  109D  3400               	retlw	0
  1600  109E  3402               	retlw	2
  1601  109F  3400               	retlw	0
  1602  10A0  3400               	retlw	0
  1603  10A1  3400               	retlw	0
  1604  10A2  3408               	retlw	8
  1605  10A3  34D8               	retlw	216
  1606  10A4  3404               	retlw	4
  1607  10A5  340A               	retlw	10
  1608  10A6  34F6               	retlw	246
  1609  10A7  3400               	retlw	0
  1610  10A8  3400               	retlw	0
  1611  10A9  3401               	retlw	1
  1612  10AA  3402               	retlw	2
  1613  10AB  3400               	retlw	0
  1614  10AC  3401               	retlw	1
  1615  10AD                     __end_of_device_dsc:	
  1616  10AD                     _ID:	
  1617  10AD  3402               	retlw	2
  1618  10AE  344B               	retlw	75
  1619  10AF  3431               	retlw	49
  1620  10B0  3436               	retlw	54
  1621  10B1  3400               	retlw	0
  1622  10B2  3400               	retlw	0
  1623  10B3  3400               	retlw	0
  1624  10B4  3400               	retlw	0
  1625  10B5  34BE               	retlw	190
  1626  10B6  34BA               	retlw	186
  1627  10B7  34FE               	retlw	254
  1628  10B8  34CA               	retlw	202
  1629  10B9                     __end_of_ID:	
  1630  10B9                     _sd000:	
  1631  10B9  3404               	retlw	4
  1632  10BA  3403               	retlw	3
  1633  10BB  3409               	retlw	9
  1634  10BC  3404               	retlw	4
  1635  10BD                     __end_of_sd000:	
  1636  0020                     _BDT	set	32	;_BDT
  1637  0048                     _CtrlTrfData	set	72	;_CtrlTrfData
  1638  0040                     _SetupPkt	set	64	;_SetupPkt
  1639                           
  1640                           	psect	nvBANK2
  1641  016D                     __pnvBANK2:	
  1642  016D                     _BankSize:	
  1643  016D                     	ds	1
  1644  0220                     _INPacket	set	544	;_INPacket
  1645  02A0                     _OUTPacket	set	672	;_OUTPacket
  1646  000B                     _INTCONbits	set	11
  1647  0012                     _PIR2bits	set	18
  1648  001B                     _PR2	set	27
  1649  001C                     _T2CONbits	set	28
  1650  0015                     _TMR0	set	21
  1651  005F                     _GIE	set	95
  1652  008D                     _RCIF	set	141
  1653  005A                     _TMR0IF	set	90
  1654  0089                     _TMR2IF	set	137
  1655  00E2                     _TMR2ON	set	226
  1656  009D                     _ADCON0bits	set	157
  1657  009E                     _ADCON1bits	set	158
  1658  009F                     _ADCON2bits	set	159
  1659  009C                     _ADRESH	set	156
  1660  0095                     _OPTION_REGbits	set	149
  1661  0099                     _OSCCON	set	153
  1662  0098                     _OSCTUNE	set	152
  1663  0092                     _PIE2bits	set	146
  1664  008C                     _TRISAbits	set	140
  1665  008E                     _TRISCbits	set	142
  1666  04AD                     _TMR0CS	set	1197
  1667  010C                     _LATAbits	set	268
  1668  010E                     _LATC	set	270
  1669  018C                     _ANSELA	set	396
  1670  018D                     _ANSELB	set	397
  1671  018D                     _ANSELBbits	set	397
  1672  018E                     _ANSELC	set	398
  1673  019F                     _BAUDCONbits	set	415
  1674  0199                     _RCREG	set	409
  1675  019D                     _RCSTAbits	set	413
  1676  019E                     _TXSTAbits	set	414
  1677  039B                     _ACTCON	set	923
  1678  0396                     _IOCBF	set	918
  1679  0394                     _IOCBPbits	set	916
  1680  0613                     _PWM1CON	set	1555
  1681  0612                     _PWM1DCH	set	1554
  1682  0611                     _PWM1DCL	set	1553
  1683  309E                     _PWM1OE	set	12446
  1684  0E96                     _UADDR	set	3734
  1685  0E91                     _UCFG	set	3729
  1686  0E8E                     _UCON	set	3726
  1687  0E8E                     _UCONbits	set	3726
  1688  0E97                     _UEIE	set	3735
  1689  0E93                     _UEIR	set	3731
  1690  0E98                     _UEP0bits	set	3736
  1691  0E92                     _UIE	set	3730
  1692  0E92                     _UIEbits	set	3730
  1693  0E90                     _UIR	set	3728
  1694  0E90                     _UIRbits	set	3728
  1695  0E8F                     _USTAT	set	3727
  1696  0E98                     _UEP0	set	3736
  1697  0E99                     _UEP1	set	3737
  1698                           
  1699                           ; #config settings
  1700  0000                     
  1701                           	psect	cinit
  1702  0803                     start_initialization:	
  1703  0803                     __initialization:	
  1704  0803  303C               	movlw	60
  1705  233C                     	;BIGRAM
  1706                           
  1707                           ; Clear objects allocated to BIGRAM
  1708  0804  0084               	movwf	4
  1709  0805  3023               	movlw	35
  1710  0806  0085               	movwf	5
  1711  0807  30B4               	movlw	180
  1712  0808  00FE               	movwf	126
  1713  0809  3000               	movlw	0
  1714  080A  01FF               	clrf	127
  1715  080B  3195  25ED  3188   	fcall	clear_ram
  1716                           
  1717                           ; Clear objects allocated to BANK0
  1718  080E  01EA               	clrf	__pbssBANK0& (0+127)
  1719  080F  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  1720  0810  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  1721  0811  01ED               	clrf	(__pbssBANK0+3)& (0+127)
  1722  0812  01EE               	clrf	(__pbssBANK0+4)& (0+127)
  1723  0813  01EF               	clrf	(__pbssBANK0+5)& (0+127)
  1724                           
  1725                           ; Clear objects allocated to BANK1
  1726  0814  0021               	movlb	1	; select bank1
  1727  0815  3020               	movlw	low __pbssBANK2
  1728  0816  01EB               	clrf	__pbssBANK1& (0+127)
  1729  0817  01EC               	clrf	(__pbssBANK1+1)& (0+127)
  1730  0818  01ED               	clrf	(__pbssBANK1+2)& (0+127)
  1731  0819  01EE               	clrf	(__pbssBANK1+3)& (0+127)
  1732  081A  01EF               	clrf	(__pbssBANK1+4)& (0+127)
  1733                           
  1734                           ; Clear objects allocated to BANK2
  1735  081B  0084               	movwf	4
  1736  081C  3001               	movlw	high __pbssBANK2
  1737  081D  0085               	movwf	5
  1738  081E  3031               	movlw	49
  1739  081F  00FE               	movwf	126
  1740  0820  3000               	movlw	0
  1741  0821  00FF               	movwf	127
  1742  0822  3195  25ED  3188   	fcall	clear_ram
  1743                           
  1744                           ; Clear objects allocated to BANK3
  1745  0825  30A0               	movlw	low __pbssBANK3
  1746  0826  0084               	movwf	4
  1747  0827  3001               	movlw	high __pbssBANK3
  1748  0828  0085               	movwf	5
  1749  0829  3038               	movlw	56
  1750  082A  00FE               	movwf	126
  1751  082B  3000               	movlw	0
  1752  082C  00FF               	movwf	127
  1753  082D  3195  25ED  3188   	fcall	clear_ram
  1754                           
  1755                           ; Initialize objects allocated to BANK2
  1756  0830  302C               	movlw	low __pidataBANK2
  1757  0831  0084               	movwf	4
  1758  0832  3096               	movlw	(high __pidataBANK2)| (0+128)
  1759  0833  0085               	movwf	5
  1760  0834  3051               	movlw	low __pdataBANK2
  1761  0835  0086               	movwf	6
  1762  0836  3001               	movlw	high __pdataBANK2
  1763  0837  0087               	movwf	7
  1764  0838  3000               	movlw	0
  1765  0839  00FF               	movwf	127
  1766  083A  301C               	movlw	28
  1767  083B  3195  25E1  3188   	fcall	init_ram
  1768                           
  1769                           ; Initialize objects allocated to BANK3
  1770  083E  30F9               	movlw	low __pidataBANK3
  1771  083F  0084               	movwf	4
  1772  0840  3095               	movlw	(high __pidataBANK3)| (0+128)
  1773  0841  0085               	movwf	5
  1774  0842  30D8               	movlw	low __pdataBANK3
  1775  0843  0086               	movwf	6
  1776  0844  3001               	movlw	high __pdataBANK3
  1777  0845  0087               	movwf	7
  1778  0846  3000               	movlw	0
  1779  0847  00FF               	movwf	127
  1780  0848  300C               	movlw	12
  1781  0849  3195  25E1  3188   	fcall	init_ram
  1782                           
  1783                           ; Initialize objects allocated to BANK6
  1784  084C  3048               	movlw	low __pidataBANK6
  1785  084D  0084               	movwf	4
  1786  084E  3096               	movlw	(high __pidataBANK6)| (0+128)
  1787  084F  0085               	movwf	5
  1788  0850  3020               	movlw	low __pdataBANK6
  1789  0851  0086               	movwf	6
  1790  0852  3003               	movlw	high __pdataBANK6
  1791  0853  0087               	movwf	7
  1792  0854  3000               	movlw	0
  1793  0855  00FF               	movwf	127
  1794  0856  3020               	movlw	32
  1795  0857  3195  25E1  3188   	fcall	init_ram
  1796  085A                     end_of_initialization:	
  1797                           ;End of C runtime variable initialization code
  1798                           
  1799  085A                     __end_of__initialization:	
  1800  085A  0020               	movlb	0
  1801  085B  285C               	ljmp	_main	;jump to C main() function
  1802  085C                     __pmaintext:	
  1803                           ; 0 bytes @ 0x1A
  1804 ;;
  1805 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1806 ;;
  1807 ;; *************** function _main *****************
  1808 ;; Defined at:
  1809 ;;		line 98 in file "main.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;		None
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;		None
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  2  837[COMMON] int 
  1816 ;; Registers used:
  1817 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 17F/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: FFE00/0
  1822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1827 ;;Total ram usage:        0 bytes
  1828 ;; Hardware stack levels required when called:   16
  1829 ;; This function calls:
  1830 ;;		_InitializeSystem
  1831 ;;		_USBDeviceTasks
  1832 ;;		_WorkTick
  1833 ;;		_AsicPushWork
  1834 ;;		_ProcessIO
  1835 ;; This function is called by:
  1836 ;;		Startup code after reset
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           
  1841                           ;psect for function _main
  1842  085C                     _main:	
  1843                           
  1844                           ;main.c: 99: InitializeSystem();
  1845                           
  1846                           ; Regs used in _main: [allreg]
  1847  085C  25C5               	fcall	_InitializeSystem
  1848  085D                     l838:	
  1849                           ;main.c: 101: while(1)
  1850                           
  1851                           
  1852                           ;main.c: 102: {
  1853                           ;main.c: 119: USBDeviceTasks();
  1854  085D  3181  2191  3188   	fcall	_USBDeviceTasks
  1855                           
  1856                           ;main.c: 133: if(TMR0IF)
  1857  0860  1D0B               	btfss	11,2	;volatile
  1858  0861  2864               	goto	l6331
  1859                           
  1860                           ;main.c: 134: WorkTick();
  1861  0862  25DB  3188         	fcall	_WorkTick
  1862  0864                     l6331:	
  1863                           
  1864                           ;main.c: 136: if(Status.State == 'P'){
  1865  0864  0022               	movlb	2	; select bank2
  1866  0865  0852               	movf	_Status^(0+256),w	;volatile
  1867  0866  3A50               	xorlw	80
  1868  0867  1D03               	skipz
  1869  0868  286B               	goto	l840
  1870                           
  1871                           ;main.c: 137: AsicPushWork();
  1872  0869  2255  3188         	fcall	_AsicPushWork
  1873  086B                     l840:	
  1874                           
  1875                           ;main.c: 138: }
  1876                           ;main.c: 140: ProcessIO();
  1877  086B  2570  3188         	fcall	_ProcessIO
  1878  086D  285D               	goto	l838
  1879  086E                     __end_of_main:	
  1880  086E                     __ptext1909:	
  1881 ;; *************** function _ProcessCmd *****************
  1882 ;; Defined at:
  1883 ;;		line 44 in file "klondike.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  cmd             1    wreg     PTR unsigned char 
  1886 ;;		 -> OUTPacket(64), 
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  cmd             1   70[BANK1 ] PTR unsigned char 
  1889 ;;		 -> OUTPacket(64), 
  1890 ;;  n               1   69[BANK1 ] unsigned char 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;		None               void
  1893 ;; Registers used:
  1894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 1F/1
  1897 ;;		On exit  : 1C/0
  1898 ;;		Unchanged: FFE00/0
  1899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1901 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  1902 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1903 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  1904 ;;Total ram usage:        6 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:   14
  1907 ;; This function calls:
  1908 ;;		___wmul
  1909 ;;		_AsicPreCalc
  1910 ;;		_AsicPushWork
  1911 ;;		_SendCmdReply
  1912 ;;		___lwdiv
  1913 ;;		_UpdateFirmware
  1914 ;; This function is called by:
  1915 ;;		_ProcessIO
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           
  1920                           ;psect for function _ProcessCmd
  1921  086E                     _ProcessCmd:	
  1922                           
  1923 ;; using string table level
  1924                           ; Regs used in _ProcessCmd: [allreg]
  1925                           ;ProcessCmd@cmd stored from wreg
  1926  086E  00E6               	movwf	ProcessCmd@cmd^(0+128)
  1927                           
  1928                           ;klondike.c: 47: switch(cmd[0]) {
  1929  086F  2993               	goto	l6131
  1930  0870                     l6049:	
  1931                           
  1932                           ;klondike.c: 49: if( Status.WorkQC < 4-1 ) {
  1933  0870  3003               	movlw	3
  1934  0871  0022               	movlb	2	; select bank2
  1935  0872  0255               	subwf	(_Status^(0+256)+3),w	;volatile
  1936  0873  1803               	skipnc
  1937  0874  28BE               	goto	l679
  1938                           
  1939                           ;klondike.c: 50: WorkQue[ (WorkNow + Status.WorkQC++) & 4-1 ] = *(WORKTASK *)(cmd+2);
  1940  0875  0021               	movlb	1	; select bank1
  1941  0876  26F1  3188         	fcall	PL54	;call to abstracted procedure
  1942  0878  086E               	movf	_WorkNow^(0+128),w
  1943  0879  0020               	movlb	0	; select bank0
  1944  087A  00D6               	movwf	?___wmul
  1945  087B  01D7               	clrf	?___wmul+1
  1946  087C  0022               	movlb	2	; select bank2
  1947  087D  0855               	movf	(_Status^(0+256)+3),w	;volatile
  1948  087E  0020               	movlb	0	; select bank0
  1949  087F  07D6               	addwf	?___wmul,f
  1950  0880  1803               	skipnc
  1951  0881  0AD7               	incf	?___wmul+1,f
  1952  0882  3003               	movlw	3
  1953  0883  05D6               	andwf	?___wmul,f
  1954  0884  302D               	movlw	45
  1955  0885  01D7               	clrf	?___wmul+1
  1956  0886  00D8               	movwf	?___wmul+2
  1957  0887  01D9               	clrf	?___wmul+3
  1958  0888  221B  3188         	fcall	___wmul
  1959  088A  303C               	movlw	60
  1960  088B  0021               	movlb	1	; select bank1
  1961  088C  00E1               	movwf	??_ProcessCmd^(0+128)
  1962  088D  3023               	movlw	35
  1963  088E  00E2               	movwf	(??_ProcessCmd^(0+128)+1)
  1964  088F  0020               	movlb	0	; select bank0
  1965  0890  0856               	movf	?___wmul,w
  1966  0891  0021               	movlb	1	; select bank1
  1967  0892  0761               	addwf	??_ProcessCmd^(0+128),w
  1968  0893  0084               	movwf	4
  1969  0894  0020               	movlb	0	; select bank0
  1970  0895  0857               	movf	?___wmul+1,w
  1971  0896  0021               	movlb	1	; select bank1
  1972  0897  3D62               	addwfc	(??_ProcessCmd+1)^(0+128),w
  1973  0898  0085               	movwf	5
  1974  0899  302D               	movlw	45
  1975  089A  00FF               	movwf	127
  1976  089B                     u4850:	
  1977  089B  0016               	moviw fsr1++
  1978  089C  001A               	movwi fsr0++
  1979  089D  0BFF               	decfsz	127,f
  1980  089E  289B               	goto	u4850
  1981  089F  0022               	movlb	2	; select bank2
  1982  08A0  0AD5               	incf	(_Status^(0+256)+3),f	;volatile
  1983                           
  1984                           ;klondike.c: 51: if(Status.State == 'R') {
  1985  08A1  0852               	movf	_Status^(0+256),w	;volatile
  1986  08A2  3A52               	xorlw	82
  1987  08A3  1D03               	skipz
  1988  08A4  28BE               	goto	l679
  1989                           
  1990                           ;klondike.c: 52: AsicPreCalc(&WorkQue[WorkNow]);
  1991  08A5  303C               	movlw	60
  1992  08A6  26C3  3188         	fcall	PL34	;call to abstracted procedure
  1993  08A8  269B  3188         	fcall	PL22	;call to abstracted procedure
  1994  08AA  221B  3188         	fcall	___wmul
  1995  08AC  0856               	movf	?___wmul,w
  1996  08AD  0021               	movlb	1	; select bank1
  1997  08AE  00E1               	movwf	??_ProcessCmd^(0+128)
  1998  08AF  0020               	movlb	0	; select bank0
  1999  08B0  0857               	movf	?___wmul+1,w
  2000  08B1  0021               	movlb	1	; select bank1
  2001  08B2  00E2               	movwf	(??_ProcessCmd^(0+128)+1)
  2002  08B3  0861               	movf	??_ProcessCmd^(0+128),w
  2003  08B4  0020               	movlb	0	; select bank0
  2004  08B5  07E6               	addwf	?_AsicPreCalc,f
  2005  08B6  0021               	movlb	1	; select bank1
  2006  08B7  0862               	movf	(??_ProcessCmd^(0+128)+1),w
  2007  08B8  0020               	movlb	0	; select bank0
  2008  08B9  3DE7               	addwfc	?_AsicPreCalc+1,f
  2009  08BA  238B  3188         	fcall	_AsicPreCalc
  2010                           
  2011                           ;klondike.c: 53: AsicPushWork();
  2012  08BC  2255  3188         	fcall	_AsicPushWork
  2013  08BE                     l679:	
  2014                           
  2015                           ;klondike.c: 54: }
  2016                           ;klondike.c: 55: }
  2017                           ;klondike.c: 56: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  2018  08BE  0021               	movlb	1	; select bank1
  2019  08BF  26F7  3188         	fcall	PL56	;call to abstracted procedure
  2020  08C1  3052               	movlw	_Status& (0+255)
  2021  08C2  00DE               	movwf	?_SendCmdReply+2
  2022  08C3  3001               	movlw	1
  2023  08C4  00DF               	movwf	?_SendCmdReply+3
  2024  08C5  300D               	movlw	13
  2025  08C6  00E0               	movwf	?_SendCmdReply+4
  2026  08C7  21B1  3188         	fcall	_SendCmdReply
  2027                           
  2028                           ;klondike.c: 57: break;
  2029  08C9  29AE               	goto	l681
  2030  08CA                     l6059:	
  2031                           
  2032                           ;klondike.c: 59: Status.WorkQC = WorkNow = 0;
  2033  08CA  01EE               	clrf	_WorkNow^(0+128)
  2034  08CB  0022               	movlb	2	; select bank2
  2035  08CC  01D5               	clrf	(_Status^(0+256)+3)	;volatile
  2036                           
  2037                           ;klondike.c: 60: Status.State = 'R';
  2038  08CD  3052               	movlw	82
  2039  08CE  2978               	goto	L3
  2040  08CF                     l6065:	
  2041                           
  2042                           ;klondike.c: 64: SendCmdReply(cmd, (char *)&ID, sizeof(ID));
  2043  08CF  26F7  3188         	fcall	PL56	;call to abstracted procedure
  2044  08D1  30AD               	movlw	low (_ID| (0+32768))
  2045  08D2  00DE               	movwf	?_SendCmdReply+2
  2046  08D3  3090               	movlw	high (_ID| (0+32768))
  2047  08D4  00DF               	movwf	?_SendCmdReply+3
  2048  08D5  300C               	movlw	12
  2049  08D6  00E0               	movwf	?_SendCmdReply+4
  2050  08D7  21B1  3188         	fcall	_SendCmdReply
  2051                           
  2052                           ;klondike.c: 65: break;
  2053  08D9  29AE               	goto	l681
  2054  08DA                     l6069:	
  2055                           
  2056                           ;klondike.c: 70: if( *(WORD *)&cmd[2] != 0 ) {
  2057  08DA  26F1  3188         	fcall	PL54	;call to abstracted procedure
  2058  08DC  0016               	moviw fsr1++
  2059  08DD  0401               	iorwf	1,w
  2060  08DE  1903               	skipnz
  2061  08DF  294D               	goto	l6101
  2062                           
  2063                           ;klondike.c: 71: Cfg = *(WORKCFG *)(cmd+2);
  2064  08E0  0866               	movf	ProcessCmd@cmd^(0+128),w
  2065  08E1  3E02               	addlw	2
  2066  08E2  0086               	movwf	6
  2067  08E3  3002               	movlw	2	; select bank4/5
  2068  08E4  0087               	movwf	7
  2069  08E5  3067               	movlw	low _Cfg
  2070  08E6  0084               	movwf	4
  2071  08E7  3001               	movlw	high _Cfg
  2072  08E8  0085               	movwf	5
  2073  08E9  3006               	movlw	6
  2074  08EA  00FF               	movwf	127
  2075  08EB                     u4880:	
  2076  08EB  0016               	moviw fsr1++
  2077  08EC  001A               	movwi fsr0++
  2078  08ED  0BFF               	decfsz	127,f
  2079  08EE  28EB               	goto	u4880
  2080                           
  2081                           ;klondike.c: 72: if(Cfg.HashClock < 128)
  2082  08EF  3000               	movlw	0
  2083  08F0  0022               	movlb	2	; select bank2
  2084  08F1  0268               	subwf	(_Cfg+1)^(0+256),w
  2085  08F2  3080               	movlw	128
  2086  08F3  1903               	skipnz
  2087  08F4  0267               	subwf	_Cfg^(0+256),w
  2088  08F5  1803               	skipnc
  2089  08F6  28FA               	goto	l687
  2090                           
  2091                           ;klondike.c: 73: Cfg.HashClock = 128;
  2092  08F7  3080               	movlw	128
  2093  08F8  00E7               	movwf	_Cfg^(0+256)
  2094  08F9  01E8               	clrf	(_Cfg+1)^(0+256)
  2095  08FA                     l687:	
  2096                           
  2097                           ;klondike.c: 74: if(Cfg.HashClock <= 250 && Cfg.HashClock >= 450/2)
  2098  08FA  3000               	movlw	0
  2099  08FB  0268               	subwf	(_Cfg+1)^(0+256),w
  2100  08FC  30FB               	movlw	251
  2101  08FD  1903               	skipnz
  2102  08FE  0267               	subwf	_Cfg^(0+256),w
  2103  08FF  1803               	skipnc
  2104  0900  290B               	goto	l688
  2105  0901  3000               	movlw	0
  2106  0902  0268               	subwf	(_Cfg+1)^(0+256),w
  2107  0903  30E1               	movlw	225
  2108  0904  1903               	skipnz
  2109  0905  0267               	subwf	_Cfg^(0+256),w
  2110  0906  1C03               	skipc
  2111  0907  290B               	goto	l688
  2112                           
  2113                           ;klondike.c: 75: Cfg.HashClock = 450/2-1;
  2114  0908  30E0               	movlw	224
  2115  0909  00E7               	movwf	_Cfg^(0+256)
  2116  090A  01E8               	clrf	(_Cfg+1)^(0+256)
  2117  090B                     l688:	
  2118                           
  2119                           ;klondike.c: 76: if(Cfg.HashClock >= 450)
  2120  090B  3001               	movlw	1
  2121  090C  0268               	subwf	(_Cfg+1)^(0+256),w
  2122  090D  30C2               	movlw	194
  2123  090E  1903               	skipnz
  2124  090F  0267               	subwf	_Cfg^(0+256),w
  2125  0910  1C03               	skipc
  2126  0911  2916               	goto	l689
  2127                           
  2128                           ;klondike.c: 77: Cfg.HashClock = 450-1;
  2129  0912  30C1               	movlw	193
  2130  0913  00E7               	movwf	_Cfg^(0+256)
  2131  0914  3001               	movlw	1
  2132  0915  00E8               	movwf	(_Cfg^(0+256)+1)
  2133  0916                     l689:	
  2134                           
  2135                           ;klondike.c: 78: if(Cfg.HashClock <= 250)
  2136  0916  3000               	movlw	0
  2137  0917  0268               	subwf	(_Cfg+1)^(0+256),w
  2138  0918  30FB               	movlw	251
  2139  0919  1903               	skipnz
  2140  091A  0267               	subwf	_Cfg^(0+256),w
  2141                           
  2142                           ;klondike.c: 79: ClockCfg[0] = (((DWORD)Cfg.HashClock*2) << 18) | 0x00030017;
  2143  091B  0867               	movf	_Cfg^(0+256),w
  2144  091C  00DF               	movwf	_ClockCfg^(0+256)
  2145  091D  0868               	movf	(_Cfg+1)^(0+256),w
  2146  091E  00E0               	movwf	(_ClockCfg^(0+256)+1)
  2147  091F  01E1               	clrf	(_ClockCfg^(0+256)+2)
  2148  0920  01E2               	clrf	(_ClockCfg^(0+256)+3)
  2149  0921  1803               	skipnc
  2150  0922  292A               	goto	L6
  2151  0923  3013               	movlw	19
  2152  0924                     u4945:	
  2153  0924  2708  3188         	fcall	PL68	;call to abstracted procedure
  2154  0926  0B89               	decfsz	9,f
  2155  0927  2924               	goto	u4945
  2156  0928  3017               	movlw	23
  2157  0929  2930               	goto	L4
  2158  092A                     L6:	
  2159                           ;klondike.c: 80: else
  2160                           ;klondike.c: 81: ClockCfg[0] = ((DWORD)Cfg.HashClock << 18) | 0x00030007;
  2161                           
  2162  092A  3012               	movlw	18
  2163  092B                     u4955:	
  2164  092B  2708  3188         	fcall	PL68	;call to abstracted procedure
  2165  092D  0B89               	decfsz	9,f
  2166  092E  292B               	goto	u4955
  2167  092F  3007               	movlw	7
  2168  0930                     L4:	
  2169  0930  04DF               	iorwf	_ClockCfg^(0+256),f
  2170  0931  3000               	movlw	0
  2171  0932  04E0               	iorwf	(_ClockCfg+1)^(0+256),f
  2172  0933  3003               	movlw	3
  2173  0934  04E1               	iorwf	(_ClockCfg+2)^(0+256),f
  2174  0935  3000               	movlw	0
  2175  0936  04E2               	iorwf	(_ClockCfg+3)^(0+256),f
  2176                           
  2177                           ;klondike.c: 82: HashTime = 256 - ((WORD)12292/Cfg.HashClock);
  2178  0937  0868               	movf	(_Cfg+1)^(0+256),w
  2179  0938  0020               	movlb	0	; select bank0
  2180  0939  00D7               	movwf	?___lwdiv+1
  2181  093A  0022               	movlb	2	; select bank2
  2182  093B  0867               	movf	_Cfg^(0+256),w
  2183  093C  0020               	movlb	0	; select bank0
  2184  093D  00D6               	movwf	?___lwdiv
  2185  093E  3004               	movlw	4
  2186  093F  00D8               	movwf	?___lwdiv+2
  2187  0940  3030               	movlw	48
  2188  0941  00D9               	movwf	?___lwdiv+3
  2189  0942  2230  3188         	fcall	___lwdiv
  2190  0944  0856               	movf	?___lwdiv,w
  2191  0945  3C00               	sublw	0
  2192  0946  0022               	movlb	2	; select bank2
  2193  0947  00D1               	movwf	_HashTime^(0+256)
  2194                           
  2195                           ;klondike.c: 83: PWM1DCH = Cfg.FanTarget;
  2196  0948  086B               	movf	(_Cfg^(0+256)+4),w
  2197  0949  002C               	movlb	12	; select bank12
  2198  094A  0092               	movwf	18	;volatile
  2199                           
  2200                           ;klondike.c: 84: Status.ErrorCount = 0;
  2201  094B  0022               	movlb	2	; select bank2
  2202  094C  01D9               	clrf	(_Status^(0+256)+7)	;volatile
  2203  094D                     l6101:	
  2204                           
  2205                           ;klondike.c: 85: }
  2206                           ;klondike.c: 86: SendCmdReply(cmd, (char *)&Cfg, sizeof(Cfg));
  2207  094D  0021               	movlb	1	; select bank1
  2208  094E  26F7  3188         	fcall	PL56	;call to abstracted procedure
  2209  0950  3067               	movlw	_Cfg& (0+255)
  2210  0951  00DE               	movwf	?_SendCmdReply+2
  2211  0952  3001               	movlw	1
  2212  0953  00DF               	movwf	?_SendCmdReply+3
  2213  0954  3006               	movlw	6
  2214  0955  00E0               	movwf	?_SendCmdReply+4
  2215  0956  21B1  3188         	fcall	_SendCmdReply
  2216                           
  2217                           ;klondike.c: 87: break;
  2218  0958  29AE               	goto	l681
  2219  0959                     l6103:	
  2220                           
  2221                           ;klondike.c: 89: LATAbits.LATA4 = (cmd[2] == '1');
  2222  0959  26F1  3188         	fcall	PL54	;call to abstracted procedure
  2223  095B  0801               	movf	1,w
  2224  095C  3A31               	xorlw	49
  2225  095D  3000               	movlw	0
  2226  095E  1903               	skipnz
  2227  095F  3001               	movlw	1
  2228  0960  00E1               	movwf	??_ProcessCmd^(0+128)
  2229  0961  0EE1               	swapf	??_ProcessCmd^(0+128),f
  2230  0962  0022               	movlb	2	; select bank2
  2231  0963  080C               	movf	12,w	;volatile
  2232  0964  0021               	movlb	1	; select bank1
  2233  0965  0661               	xorwf	??_ProcessCmd^(0+128),w
  2234  0966  39EF               	andlw	-17
  2235  0967  0661               	xorwf	??_ProcessCmd^(0+128),w
  2236  0968  0022               	movlb	2	; select bank2
  2237  0969  008C               	movwf	12	;volatile
  2238                           
  2239                           ;klondike.c: 90: Status.State = (cmd[2] == '1') ? 'R' : 'D';
  2240  096A  0021               	movlb	1	; select bank1
  2241  096B  0866               	movf	ProcessCmd@cmd^(0+128),w
  2242  096C  3E02               	addlw	2
  2243  096D  0086               	movwf	6
  2244  096E  0801               	movf	1,w
  2245  096F  3A31               	xorlw	49
  2246  0970  1903               	skipnz
  2247  0971  2974               	goto	l6109
  2248  0972  3044               	movlw	68
  2249  0973  2975               	goto	L5
  2250  0974                     l6109:	
  2251  0974  3052               	movlw	82
  2252  0975                     L5:	
  2253  0975  00E3               	movwf	_ProcessCmd$2052^(0+128)
  2254  0976  01E4               	clrf	(_ProcessCmd$2052+1)^(0+128)
  2255  0977  0022               	movlb	2	; select bank2
  2256  0978                     L3:	
  2257  0978  00D2               	movwf	_Status^(0+256)	;volatile
  2258  0979  28BE               	goto	l679
  2259  097A                     l6113:	
  2260                           
  2261                           ;klondike.c: 94: for(BYTE n = 0; n < sizeof(FwPwd); n++)
  2262  097A  01E5               	clrf	ProcessCmd@n^(0+128)
  2263  097B                     l6119:	
  2264                           
  2265                           ;klondike.c: 95: if(FwPwd[n] != cmd[2+n])
  2266  097B  0865               	movf	ProcessCmd@n^(0+128),w
  2267  097C  0766               	addwf	ProcessCmd@cmd^(0+128),w
  2268  097D  00E1               	movwf	??_ProcessCmd^(0+128)
  2269  097E  3E02               	addlw	2
  2270  097F  0086               	movwf	6
  2271  0980  3002               	movlw	2	; select bank4/5
  2272  0981  0087               	movwf	7
  2273  0982  0865               	movf	ProcessCmd@n^(0+128),w
  2274  0983  3E01               	addlw	low (_FwPwd| (0+32768))
  2275  0984  3190               	movlp	high __stringtab
  2276  0985  000A               	callw
  2277  0986  3188               	pagesel	$	;select current page
  2278  0987  0601               	xorwf	1,w
  2279  0988  1D03               	btfss	3,2
  2280  0989  0008               	return
  2281  098A  300E               	movlw	14
  2282  098B  0AE5               	incf	ProcessCmd@n^(0+128),f
  2283  098C  0265               	subwf	ProcessCmd@n^(0+128),w
  2284  098D  1C03               	skipc
  2285  098E  297B               	goto	l6119
  2286                           
  2287                           ;klondike.c: 97: UpdateFirmware();
  2288  098F  3180  2014  3188   	fcall	_UpdateFirmware
  2289                           
  2290                           ;klondike.c: 98: break;
  2291  0992  29AE               	goto	l681
  2292  0993                     l6131:	
  2293  0993  0866               	movf	ProcessCmd@cmd^(0+128),w
  2294  0994  0086               	movwf	6
  2295  0995  3002               	movlw	2	; select bank4/5
  2296  0996  0087               	movwf	7
  2297  0997  0801               	movf	1,w
  2298                           
  2299                           ; Switch size 1, requested type "space"
  2300                           ; Number of cases is 7, Range of values is 65 to 87
  2301                           ; switch strategies available:
  2302                           ; Name         Instructions Cycles
  2303                           ; simple_byte           22    12 (average)
  2304                           ; direct_byte           55     9 (fixed)
  2305                           ; jumptable            263     9 (fixed)
  2306                           ;	Chosen strategy is simple_byte
  2307  0998  3A41               	xorlw	65	; case 65
  2308  0999  1903               	skipnz
  2309  099A  28CA               	goto	l6059
  2310  099B  3A02               	xorlw	2	; case 67
  2311  099C  1903               	skipnz
  2312  099D  28DA               	goto	l6069
  2313  099E  3A06               	xorlw	6	; case 69
  2314  099F  1903               	skipnz
  2315  09A0  2959               	goto	l6103
  2316  09A1  3A03               	xorlw	3	; case 70
  2317  09A2  1903               	skipnz
  2318  09A3  297A               	goto	l6113
  2319  09A4  3A0F               	xorlw	15	; case 73
  2320  09A5  1903               	skipnz
  2321  09A6  28CF               	goto	l6065
  2322  09A7  3A1A               	xorlw	26	; case 83
  2323  09A8  1903               	skipnz
  2324  09A9  28BE               	goto	l679
  2325  09AA  3A04               	xorlw	4	; case 87
  2326  09AB  1903               	skipnz
  2327  09AC  2870               	goto	l6049
  2328  09AD  29AE               	goto	l681
  2329  09AE                     l681:	
  2330                           
  2331                           ;klondike.c: 102: LATAbits.LATA5 = 1;;
  2332  09AE  0022               	movlb	2	; select bank2
  2333  09AF  168C               	bsf	12,5	;volatile
  2334  09B0  0008               	return
  2335  09B1                     __end_of_ProcessCmd:	
  2336  09B1                     __ptext1915:	
  2337 ;; *************** function _SendCmdReply *****************
  2338 ;; Defined at:
  2339 ;;		line 208 in file "main.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;  cmd             2   12[BANK0 ] PTR unsigned char 
  2342 ;;		 -> ResultQue(8), OUTPacket(64), 
  2343 ;;  data            2   14[BANK0 ] PTR unsigned char 
  2344 ;;		 -> ResultQue(8), Cfg(6), ID(12), Status(13), 
  2345 ;;  count           1   16[BANK0 ] unsigned char 
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;  n               1   23[BANK0 ] unsigned char 
  2348 ;; Return value:  Size  Location     Type
  2349 ;;		None               void
  2350 ;; Registers used:
  2351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2352 ;; Tracked objects:
  2353 ;;		On entry : 1F/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: FFE00/0
  2356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2357 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2359 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2360 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2361 ;;Total ram usage:       12 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; Hardware stack levels required when called:    5
  2364 ;; This function calls:
  2365 ;;		___wmul
  2366 ;;		___bmul
  2367 ;; This function is called by:
  2368 ;;		_ProcessCmd
  2369 ;; This function uses a non-reentrant model
  2370 ;;
  2371                           
  2372                           
  2373                           ;psect for function _SendCmdReply
  2374  09B1                     _SendCmdReply:	
  2375                           
  2376                           ;main.c: 209: if(WQI*15 + count + 2 < 64) {
  2377                           
  2378                           ; Regs used in _SendCmdReply: [allreg]
  2379  09B1  0860               	movf	SendCmdReply@count,w
  2380  09B2  00E1               	movwf	??_SendCmdReply
  2381  09B3  01E2               	clrf	??_SendCmdReply+1
  2382  09B4  0021               	movlb	1	; select bank1
  2383  09B5  086D               	movf	_WQI^(0+128),w
  2384  09B6  0020               	movlb	0	; select bank0
  2385  09B7  00D6               	movwf	?___wmul
  2386  09B8  300F               	movlw	15
  2387  09B9  01D7               	clrf	?___wmul+1
  2388  09BA  00D8               	movwf	?___wmul+2
  2389  09BB  01D9               	clrf	?___wmul+3
  2390  09BC  221B  3188         	fcall	___wmul
  2391  09BE  0861               	movf	??_SendCmdReply,w
  2392  09BF  0756               	addwf	?___wmul,w
  2393  09C0  00E3               	movwf	??_SendCmdReply+2
  2394  09C1  0862               	movf	??_SendCmdReply+1,w
  2395  09C2  3D57               	addwfc	?___wmul+1,w
  2396  09C3  00E4               	movwf	??_SendCmdReply+3
  2397  09C4  0863               	movf	??_SendCmdReply+2,w
  2398  09C5  3E02               	addlw	2
  2399  09C6  00E5               	movwf	??_SendCmdReply+4
  2400  09C7  3000               	movlw	0
  2401  09C8  3D64               	addwfc	??_SendCmdReply+3,w
  2402  09C9  00E6               	movwf	??_SendCmdReply+5
  2403  09CA  3A80               	xorlw	128
  2404  09CB  00FF               	movwf	127
  2405  09CC  3080               	movlw	128
  2406  09CD  027F               	subwf	127,w
  2407  09CE  1D03               	skipz
  2408  09CF  29D2               	goto	u5005
  2409  09D0  3040               	movlw	64
  2410  09D1  0265               	subwf	??_SendCmdReply+4,w
  2411  09D2                     u5005:	
  2412  09D2  1803               	skipnc
  2413  09D3  0008               	return
  2414                           
  2415                           ;main.c: 210: INPacket[WQI*15] = cmd[0];
  2416  09D4  300F               	movlw	15
  2417  09D5  0020               	movlb	0	; select bank0
  2418  09D6  00D6               	movwf	?___bmul
  2419  09D7  0021               	movlb	1	; select bank1
  2420  09D8  086D               	movf	_WQI^(0+128),w
  2421  09D9  252E  3188         	fcall	___bmul
  2422  09DB  3E20               	addlw	32
  2423  09DC  0086               	movwf	6
  2424  09DD  3002               	movlw	2	; select bank4/5
  2425  09DE  0087               	movwf	7
  2426  09DF  085C               	movf	SendCmdReply@cmd,w
  2427  09E0  0084               	movwf	4
  2428  09E1  085D               	movf	SendCmdReply@cmd+1,w
  2429  09E2  0085               	movwf	5
  2430  09E3  0800               	movf	0,w
  2431  09E4  0081               	movwf	1
  2432                           
  2433                           ;main.c: 211: INPacket[WQI*15 + 1] = SlaveAddress;
  2434  09E5  300F               	movlw	15
  2435  09E6  00D6               	movwf	?___bmul
  2436  09E7  0021               	movlb	1	; select bank1
  2437  09E8  086D               	movf	_WQI^(0+128),w
  2438  09E9  252E  3188         	fcall	___bmul
  2439  09EB  3E21               	addlw	33
  2440  09EC  0086               	movwf	6
  2441  09ED  3002               	movlw	2	; select bank4/5
  2442  09EE  0087               	movwf	7
  2443  09EF  0022               	movlb	2	; select bank2
  2444  09F0  0833               	movf	_SlaveAddress^(0+256),w
  2445  09F1  0081               	movwf	1
  2446                           
  2447                           ;main.c: 212: for(BYTE n=0; n < count; n++)
  2448  09F2  0020               	movlb	0	; select bank0
  2449  09F3  01E7               	clrf	SendCmdReply@n
  2450  09F4                     l6163:	
  2451  09F4  0860               	movf	SendCmdReply@count,w
  2452  09F5  0267               	subwf	SendCmdReply@n,w
  2453  09F6  1803               	btfsc	3,0
  2454  09F7  2A16               	goto	l6165
  2455                           
  2456                           ;main.c: 213: INPacket[WQI*15 + n + 2] = data[n];
  2457  09F8  300F               	movlw	15
  2458  09F9  00D6               	movwf	?___bmul
  2459  09FA  0021               	movlb	1	; select bank1
  2460  09FB  086D               	movf	_WQI^(0+128),w
  2461  09FC  252E  3188         	fcall	___bmul
  2462  09FE  00E1               	movwf	??_SendCmdReply
  2463  09FF  3E22               	addlw	34
  2464  0A00  00E2               	movwf	??_SendCmdReply+1
  2465  0A01  0867               	movf	SendCmdReply@n,w
  2466  0A02  0762               	addwf	??_SendCmdReply+1,w
  2467  0A03  00E3               	movwf	??_SendCmdReply+2
  2468  0A04  0086               	movwf	6
  2469  0A05  3002               	movlw	2	; select bank4/5
  2470  0A06  0087               	movwf	7
  2471  0A07  085F               	movf	SendCmdReply@data+1,w
  2472  0A08  00E5               	movwf	??_SendCmdReply+4
  2473  0A09  085E               	movf	SendCmdReply@data,w
  2474  0A0A  00E4               	movwf	??_SendCmdReply+3
  2475  0A0B  0867               	movf	SendCmdReply@n,w
  2476  0A0C  0764               	addwf	??_SendCmdReply+3,w
  2477  0A0D  0084               	movwf	4
  2478  0A0E  0865               	movf	??_SendCmdReply+4,w
  2479  0A0F  1803               	skipnc
  2480  0A10  0A65               	incf	??_SendCmdReply+4,w
  2481  0A11  0085               	movwf	5
  2482  0A12  0800               	movf	0,w	;code access
  2483  0A13  0081               	movwf	1
  2484  0A14  0AE7               	incf	SendCmdReply@n,f
  2485  0A15  29F4               	goto	l6163
  2486  0A16                     l6165:	
  2487                           
  2488                           ;main.c: 214: WQI = (WQI+1) & 3;
  2489  0A16  0021               	movlb	1	; select bank1
  2490  0A17  3003               	movlw	3
  2491  0A18  0AED               	incf	_WQI^(0+128),f
  2492  0A19  05ED               	andwf	_WQI^(0+128),f
  2493  0A1A  0008               	return
  2494  0A1B                     __end_of_SendCmdReply:	
  2495  0A1B                     __ptext1961:	
  2496 ;; *************** function ___wmul *****************
  2497 ;; Defined at:
  2498 ;;		line 3 in file "/opt/microchip/xc8/v1.12/sources/wmul.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;  multiplier      2    6[BANK0 ] unsigned int 
  2501 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;  product         2   10[BANK0 ] unsigned int 
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  2    6[BANK0 ] unsigned int 
  2506 ;; Registers used:
  2507 ;;		wreg, status,2, status,0
  2508 ;; Tracked objects:
  2509 ;;		On entry : 1F/0
  2510 ;;		On exit  : 1F/0
  2511 ;;		Unchanged: FFFE0/0
  2512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2513 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2514 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2516 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2517 ;;Total ram usage:        6 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    4
  2520 ;; This function calls:
  2521 ;;		Nothing
  2522 ;; This function is called by:
  2523 ;;		_ProcessCmd
  2524 ;;		_AsicPushWork
  2525 ;;		_SendCmdReply
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           
  2530                           ;psect for function ___wmul
  2531  0A1B                     ___wmul:	
  2532                           
  2533                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2534  0A1B  01DA               	clrf	___wmul@product
  2535  0A1C  01DB               	clrf	___wmul@product+1
  2536  0A1D                     l6417:	
  2537  0A1D  1C56               	btfss	___wmul@multiplier,0
  2538  0A1E  2A23               	goto	l6421
  2539  0A1F  0858               	movf	___wmul@multiplicand,w
  2540  0A20  07DA               	addwf	___wmul@product,f
  2541  0A21  0859               	movf	___wmul@multiplicand+1,w
  2542  0A22  3DDB               	addwfc	___wmul@product+1,f
  2543  0A23                     l6421:	
  2544  0A23  35D8               	lslf	___wmul@multiplicand,f
  2545  0A24  0DD9               	rlf	___wmul@multiplicand+1,f
  2546  0A25  36D7               	lsrf	___wmul@multiplier+1,f
  2547  0A26  0CD6               	rrf	___wmul@multiplier,f
  2548  0A27  0857               	movf	___wmul@multiplier+1,w
  2549  0A28  0456               	iorwf	___wmul@multiplier,w
  2550  0A29  1D03               	skipz
  2551  0A2A  2A1D               	goto	l6417
  2552  0A2B  085B               	movf	___wmul@product+1,w
  2553  0A2C  00D7               	movwf	?___wmul+1
  2554  0A2D  085A               	movf	___wmul@product,w
  2555  0A2E  00D6               	movwf	?___wmul
  2556  0A2F  0008               	return
  2557  0A30                     __end_of___wmul:	
  2558  0A30                     __ptext1958:	
  2559 ;; *************** function ___lwdiv *****************
  2560 ;; Defined at:
  2561 ;;		line 5 in file "/opt/microchip/xc8/v1.12/sources/lwdiv.c"
  2562 ;; Parameters:    Size  Location     Type
  2563 ;;  divisor         2    6[BANK0 ] unsigned int 
  2564 ;;  dividend        2    8[BANK0 ] unsigned int 
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;  quotient        2   11[BANK0 ] unsigned int 
  2567 ;;  counter         1   10[BANK0 ] unsigned char 
  2568 ;; Return value:  Size  Location     Type
  2569 ;;                  2    6[BANK0 ] unsigned int 
  2570 ;; Registers used:
  2571 ;;		wreg, status,2, status,0
  2572 ;; Tracked objects:
  2573 ;;		On entry : 1F/0
  2574 ;;		On exit  : 1F/0
  2575 ;;		Unchanged: FFFE0/0
  2576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2577 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2578 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2580 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2581 ;;Total ram usage:        7 bytes
  2582 ;; Hardware stack levels used:    1
  2583 ;; Hardware stack levels required when called:    4
  2584 ;; This function calls:
  2585 ;;		Nothing
  2586 ;; This function is called by:
  2587 ;;		_ProcessCmd
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591                           
  2592                           ;psect for function ___lwdiv
  2593  0A30                     ___lwdiv:	
  2594                           
  2595                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2596  0A30  01DB               	clrf	___lwdiv@quotient
  2597  0A31  01DC               	clrf	___lwdiv@quotient+1
  2598  0A32  0857               	movf	___lwdiv@divisor+1,w
  2599  0A33  0456               	iorwf	___lwdiv@divisor,w
  2600  0A34  1903               	skipnz
  2601  0A35  2A50               	goto	l6453
  2602  0A36  01DA               	clrf	___lwdiv@counter
  2603  0A37                     L17:	
  2604  0A37  0ADA               	incf	___lwdiv@counter,f
  2605  0A38  1BD7               	btfsc	___lwdiv@divisor+1,7
  2606  0A39  2A3D               	goto	l6441
  2607  0A3A  35D6               	lslf	___lwdiv@divisor,f
  2608  0A3B  0DD7               	rlf	___lwdiv@divisor+1,f
  2609  0A3C  2A37               	goto	L17
  2610  0A3D                     l6441:	
  2611  0A3D  35DB               	lslf	___lwdiv@quotient,f
  2612  0A3E  0DDC               	rlf	___lwdiv@quotient+1,f
  2613  0A3F  0857               	movf	___lwdiv@divisor+1,w
  2614  0A40  0259               	subwf	___lwdiv@dividend+1,w
  2615  0A41  1D03               	skipz
  2616  0A42  2A45               	goto	u5295
  2617  0A43  0856               	movf	___lwdiv@divisor,w
  2618  0A44  0258               	subwf	___lwdiv@dividend,w
  2619  0A45                     u5295:	
  2620  0A45  1C03               	skipc
  2621  0A46  2A4C               	goto	l6449
  2622  0A47  0856               	movf	___lwdiv@divisor,w
  2623  0A48  02D8               	subwf	___lwdiv@dividend,f
  2624  0A49  0857               	movf	___lwdiv@divisor+1,w
  2625  0A4A  3BD9               	subwfb	___lwdiv@dividend+1,f
  2626  0A4B  145B               	bsf	___lwdiv@quotient,0
  2627  0A4C                     l6449:	
  2628  0A4C  36D7               	lsrf	___lwdiv@divisor+1,f
  2629  0A4D  0CD6               	rrf	___lwdiv@divisor,f
  2630  0A4E  0BDA               	decfsz	___lwdiv@counter,f
  2631  0A4F  2A3D               	goto	l6441
  2632  0A50                     l6453:	
  2633  0A50  085C               	movf	___lwdiv@quotient+1,w
  2634  0A51  00D7               	movwf	?___lwdiv+1
  2635  0A52  085B               	movf	___lwdiv@quotient,w
  2636  0A53  00D6               	movwf	?___lwdiv
  2637  0A54  0008               	return
  2638  0A55                     __end_of___lwdiv:	
  2639  0A55                     __ptext1910:	
  2640 ;; *************** function _AsicPushWork *****************
  2641 ;; Defined at:
  2642 ;;		line 106 in file "klondike.c"
  2643 ;; Parameters:    Size  Location     Type
  2644 ;;		None
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;		None
  2647 ;; Return value:  Size  Location     Type
  2648 ;;		None               void
  2649 ;; Registers used:
  2650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2651 ;; Tracked objects:
  2652 ;;		On entry : 1C/2
  2653 ;;		On exit  : 1C/0
  2654 ;;		Unchanged: FFE00/0
  2655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2658 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2659 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2660 ;;Total ram usage:        2 bytes
  2661 ;; Hardware stack levels used:    1
  2662 ;; Hardware stack levels required when called:    6
  2663 ;; This function calls:
  2664 ;;		___wmul
  2665 ;;		_SendAsicData
  2666 ;;		_AsicPreCalc
  2667 ;; This function is called by:
  2668 ;;		_ProcessCmd
  2669 ;;		_main
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673                           
  2674                           ;psect for function _AsicPushWork
  2675  0A55                     _AsicPushWork:	
  2676                           
  2677                           ;klondike.c: 107: Status.WorkID = WorkQue[WorkNow].WorkID;
  2678                           
  2679                           ; Regs used in _AsicPushWork: [allreg]
  2680  0A55  269B  3188         	fcall	PL22	;call to abstracted procedure
  2681  0A57  221B  3188         	fcall	___wmul
  2682  0A59  303C               	movlw	60
  2683  0A5A  00E8               	movwf	??_AsicPushWork
  2684  0A5B  3023               	movlw	35
  2685  0A5C  00E9               	movwf	??_AsicPushWork+1
  2686  0A5D  0856               	movf	?___wmul,w
  2687  0A5E  0768               	addwf	??_AsicPushWork,w
  2688  0A5F  0086               	movwf	6
  2689  0A60  0857               	movf	?___wmul+1,w
  2690  0A61  3D69               	addwfc	??_AsicPushWork+1,w
  2691  0A62  0087               	movwf	7
  2692  0A63  0801               	movf	1,w
  2693  0A64  0022               	movlb	2	; select bank2
  2694  0A65  00D6               	movwf	(_Status^(0+256)+4)	;volatile
  2695                           
  2696                           ;klondike.c: 108: SendAsicData(&WorkQue[WorkNow], 0x50);
  2697  0A66  303C               	movlw	60
  2698  0A67  0020               	movlb	0	; select bank0
  2699  0A68  00DC               	movwf	?_SendAsicData
  2700  0A69  3023               	movlw	35
  2701  0A6A  00DD               	movwf	?_SendAsicData+1
  2702  0A6B  269B  3188         	fcall	PL22	;call to abstracted procedure
  2703  0A6D  221B  3188         	fcall	___wmul
  2704  0A6F  2702  3188         	fcall	PL64	;call to abstracted procedure
  2705  0A71  07DC               	addwf	?_SendAsicData,f
  2706  0A72  0869               	movf	??_AsicPushWork+1,w
  2707  0A73  3DDD               	addwfc	?_SendAsicData+1,f
  2708  0A74  3050               	movlw	80
  2709  0A75  00DE               	movwf	?_SendAsicData+2
  2710  0A76  2295  3188         	fcall	_SendAsicData
  2711                           
  2712                           ;klondike.c: 109: WorkNow = (WorkNow+1) & 4-1;
  2713  0A78  0021               	movlb	1	; select bank1
  2714  0A79  3003               	movlw	3
  2715  0A7A  0AEE               	incf	_WorkNow^(0+128),f
  2716  0A7B  05EE               	andwf	_WorkNow^(0+128),f
  2717                           
  2718                           ;klondike.c: 110: Status.HashCount = 0;
  2719  0A7C  0022               	movlb	2	; select bank2
  2720  0A7D  01DA               	clrf	(_Status^(0+256)+8)	;volatile
  2721  0A7E  01DB               	clrf	((_Status+1)^(0+256)+8)	;volatile
  2722                           
  2723                           ;klondike.c: 111: TMR0 = HashTime;
  2724  0A7F  0851               	movf	_HashTime^(0+256),w
  2725  0A80  0020               	movlb	0	; select bank0
  2726  0A81  0095               	movwf	21	;volatile
  2727                           
  2728                           ;klondike.c: 112: Status.State ='W';
  2729  0A82  3057               	movlw	87
  2730  0A83  0022               	movlb	2	; select bank2
  2731  0A84  00D2               	movwf	_Status^(0+256)	;volatile
  2732                           
  2733                           ;klondike.c: 113: if(--Status.WorkQC > 0)
  2734  0A85  03D5               	decf	(_Status^(0+256)+3),f	;volatile
  2735  0A86  1903               	btfsc	3,2
  2736  0A87  0008               	return
  2737                           
  2738                           ;klondike.c: 114: AsicPreCalc(&WorkQue[WorkNow]);
  2739  0A88  303C               	movlw	60
  2740  0A89  26C3  3188         	fcall	PL34	;call to abstracted procedure
  2741  0A8B  269B  3188         	fcall	PL22	;call to abstracted procedure
  2742  0A8D  221B  3188         	fcall	___wmul
  2743  0A8F  2702  3188         	fcall	PL64	;call to abstracted procedure
  2744  0A91  07E6               	addwf	?_AsicPreCalc,f
  2745  0A92  0869               	movf	??_AsicPushWork+1,w
  2746  0A93  3DE7               	addwfc	?_AsicPreCalc+1,f
  2747  0A94  2B8B               	ljmp	l5987
  2748  0A95                     __end_of_AsicPushWork:	
  2749  0A95                     __ptext1911:	
  2750 ;; *************** function _SendAsicData *****************
  2751 ;; Defined at:
  2752 ;;		line 36 in file "asic.c"
  2753 ;; Parameters:    Size  Location     Type
  2754 ;;  work            2   12[BANK0 ] PTR struct _worktask
  2755 ;;		 -> WorkQue(180), 
  2756 ;;  split           1   14[BANK0 ] unsigned char 
  2757 ;; Auto vars:     Size  Location     Type
  2758 ;;		None
  2759 ;; Return value:  Size  Location     Type
  2760 ;;		None               void
  2761 ;; Registers used:
  2762 ;;		wreg, status,2, status,0, pclath, cstack
  2763 ;; Tracked objects:
  2764 ;;		On entry : 1F/0
  2765 ;;		On exit  : 1F/2
  2766 ;;		Unchanged: FFE00/0
  2767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2768 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2771 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2772 ;;Total ram usage:        3 bytes
  2773 ;; Hardware stack levels used:    1
  2774 ;; Hardware stack levels required when called:    5
  2775 ;; This function calls:
  2776 ;;		_Send32
  2777 ;; This function is called by:
  2778 ;;		_AsicPushWork
  2779 ;; This function uses a non-reentrant model
  2780 ;;
  2781                           
  2782                           
  2783                           ;psect for function _SendAsicData
  2784  0A95                     _SendAsicData:	
  2785                           
  2786                           ;asic.c: 37: GIE = 0;
  2787                           
  2788                           ; Regs used in _SendAsicData: [wreg+status,2+status,0+pclath+cstack]
  2789  0A95  138B               	bcf	11,7	;volatile
  2790                           
  2791                           ;asic.c: 38: last_bit0 = 0x48; last_bit1 = 0x90;
  2792  0A96  3048               	movlw	72
  2793  0A97  0022               	movlb	2	; select bank2
  2794  0A98  00BD               	movwf	_last_bit0^(0+256)
  2795  0A99  3090               	movlw	144
  2796  0A9A  00BE               	movwf	_last_bit1^(0+256)
  2797                           
  2798                           ;asic.c: 39: send32_data = (WORD)&ClockCfg; send32_count = 2;
  2799  0A9B  305F               	movlw	_ClockCfg& (0+255)
  2800  0A9C  00AE               	movwf	_send32_data^(0+256)
  2801  0A9D  3001               	movlw	1
  2802  0A9E  00AF               	movwf	(_send32_data+1)^(0+256)
  2803  0A9F  3002               	movlw	2
  2804  0AA0  00C0               	movwf	_send32_count^(0+256)
  2805                           
  2806                           ;asic.c: 40: Send32();
  2807  0AA1  22DF  3188         	fcall	_Send32
  2808                           
  2809                           ;asic.c: 41: send32_data = (WORD)&work->Merkle; send32_count = 3;
  2810  0AA3  26D8  3188         	fcall	PL46	;call to abstracted procedure
  2811  0AA5  3021               	movlw	33
  2812  0AA6  07AE               	addwf	_send32_data^(0+256),f
  2813  0AA7  1803               	skipnc
  2814  0AA8  0AAF               	incf	(_send32_data+1)^(0+256),f
  2815  0AA9  3003               	movlw	3
  2816  0AAA  00C0               	movwf	_send32_count^(0+256)
  2817                           
  2818                           ;asic.c: 42: Send32();
  2819  0AAB  22DF  3188         	fcall	_Send32
  2820                           
  2821                           ;asic.c: 43: send32_data = (WORD)&PrecalcHashes[1]; send32_count = 5;
  2822  0AAD  30C4               	movlw	(_PrecalcHashes+4)& (0+255)
  2823  0AAE  0022               	movlb	2	; select bank2
  2824  0AAF  00AE               	movwf	_send32_data^(0+256)
  2825  0AB0  3001               	movlw	1
  2826  0AB1  00AF               	movwf	(_send32_data+1)^(0+256)
  2827  0AB2  3005               	movlw	5
  2828  0AB3  00C0               	movwf	_send32_count^(0+256)
  2829                           
  2830                           ;asic.c: 44: Send32();
  2831  0AB4  22DF  3188         	fcall	_Send32
  2832                           
  2833                           ;asic.c: 45: send32_data = (WORD)&work->MidState; send32_count = 8;
  2834  0AB6  26D8  3188         	fcall	PL46	;call to abstracted procedure
  2835  0AB8  0AAE               	incf	_send32_data^(0+256),f
  2836  0AB9  1903               	skipnz
  2837  0ABA  0AAF               	incf	(_send32_data+1)^(0+256),f
  2838  0ABB  3008               	movlw	8
  2839  0ABC  00C0               	movwf	_send32_count^(0+256)
  2840                           
  2841                           ;asic.c: 46: Send32();
  2842  0ABD  22DF  3188         	fcall	_Send32
  2843                           
  2844                           ;asic.c: 47: send32_data = (WORD)&PrecalcHashes; send32_count = 1;
  2845  0ABF  30C0               	movlw	_PrecalcHashes& (0+255)
  2846  0AC0  0022               	movlb	2	; select bank2
  2847  0AC1  00AE               	movwf	_send32_data^(0+256)
  2848  0AC2  3001               	movlw	1
  2849  0AC3  00AF               	movwf	(_send32_data+1)^(0+256)
  2850  0AC4  01C0               	clrf	_send32_count^(0+256)
  2851  0AC5  0AC0               	incf	_send32_count^(0+256),f
  2852                           
  2853                           ;asic.c: 48: Send32();
  2854  0AC6  22DF  3188         	fcall	_Send32
  2855                           
  2856                           ;asic.c: 50: last_bit0 = last_bit1 = split;
  2857  0AC8  0020               	movlb	0	; select bank0
  2858  0AC9  085E               	movf	SendAsicData@split,w
  2859  0ACA  0022               	movlb	2	; select bank2
  2860  0ACB  00BE               	movwf	_last_bit1^(0+256)
  2861  0ACC  00BD               	movwf	_last_bit0^(0+256)
  2862                           
  2863                           ;asic.c: 52: send32_data = (WORD)&NonceRanges; send32_count = BankSize;
  2864  0ACD  30A0               	movlw	_NonceRanges& (0+255)
  2865  0ACE  00AE               	movwf	_send32_data^(0+256)
  2866  0ACF  3001               	movlw	1
  2867  0AD0  00AF               	movwf	(_send32_data+1)^(0+256)
  2868  0AD1  086D               	movf	_BankSize^(0+256),w
  2869  0AD2  00C0               	movwf	_send32_count^(0+256)
  2870                           
  2871                           ;asic.c: 53: Send32();
  2872  0AD3  22DF               	fcall	_Send32
  2873                           
  2874                           ;asic.c: 54: LATC = 0xD8;;
  2875  0AD4  30D8               	movlw	216
  2876  0AD5  0022               	movlb	2	; select bank2
  2877  0AD6  008E               	movwf	14	;volatile
  2878                           
  2879                           ;asic.c: 55: GIE = 1;
  2880  0AD7  178B               	bsf	11,7	;volatile
  2881                           
  2882                           ;asic.c: 56: ClockCfg[0] = ClockCfg[0] & ~0x00000002;
  2883  0AD8  30FD               	movlw	253
  2884  0AD9  05DF               	andwf	_ClockCfg^(0+256),f
  2885  0ADA  30FF               	movlw	255
  2886  0ADB  05E0               	andwf	(_ClockCfg+1)^(0+256),f
  2887  0ADC  05E1               	andwf	(_ClockCfg+2)^(0+256),f
  2888  0ADD  05E2               	andwf	(_ClockCfg+3)^(0+256),f
  2889  0ADE  0008               	return
  2890  0ADF                     __end_of_SendAsicData:	
  2891  0ADF                     __ptext1912:	
  2892 ;; *************** function _Send32 *****************
  2893 ;; Defined at:
  2894 ;;		line 60 in file "asic.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;		None
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;		None
  2899 ;; Return value:  Size  Location     Type
  2900 ;;		None               void
  2901 ;; Registers used:
  2902 ;;		None
  2903 ;; Tracked objects:
  2904 ;;		On entry : 1F/2
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: FFE00/0
  2907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2912 ;;Total ram usage:        0 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    4
  2915 ;; This function calls:
  2916 ;;		Nothing
  2917 ;; This function is called by:
  2918 ;;		_SendAsicData
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function _Send32
  2924  0ADF                     _Send32:	
  2925                           
  2926                           ; Regs used in _Send32: []
  2927  0ADF  0022               	banksel	270	;# 
  2928  0AE0  082E               	movf	_send32_data& (0+127),w	;# 
  2929  0AE1  0086               	movwf	6	;# 
  2930  0AE2  082F               	movf	(_send32_data+1)& (0+127),w	;# 
  2931  0AE3  0087               	movwf	7	;# 
  2932  0AE4                     next_word:	
  2933                           
  2934                           ;# 
  2935  0AE4  3048               	movlw	72	;# 
  2936  0AE5  018E               	clrf	14	;# 
  2937  0AE6  1801               	btfsc	1,0	;# 
  2938  0AE7  3090               	movlw	144	;# 
  2939  0AE8  008E               	movwf	14	;# 
  2940  0AE9  3048               	movlw	72	;# 
  2941  0AEA  018E               	clrf	14	;# 
  2942  0AEB  1881               	btfsc	1,1	;# 
  2943  0AEC  3090               	movlw	144	;# 
  2944  0AED  008E               	movwf	14	;# 
  2945  0AEE  3048               	movlw	72	;# 
  2946  0AEF  018E               	clrf	14	;# 
  2947  0AF0  1901               	btfsc	1,2	;# 
  2948  0AF1  3090               	movlw	144	;# 
  2949  0AF2  008E               	movwf	14	;# 
  2950  0AF3  3048               	movlw	72	;# 
  2951  0AF4  018E               	clrf	14	;# 
  2952  0AF5  1981               	btfsc	1,3	;# 
  2953  0AF6  3090               	movlw	144	;# 
  2954  0AF7  008E               	movwf	14	;# 
  2955  0AF8  3048               	movlw	72	;# 
  2956  0AF9  018E               	clrf	14	;# 
  2957  0AFA  1A01               	btfsc	1,4	;# 
  2958  0AFB  3090               	movlw	144	;# 
  2959  0AFC  008E               	movwf	14	;# 
  2960  0AFD  3048               	movlw	72	;# 
  2961  0AFE  018E               	clrf	14	;# 
  2962  0AFF  1A81               	btfsc	1,5	;# 
  2963  0B00  3090               	movlw	144	;# 
  2964  0B01  008E               	movwf	14	;# 
  2965  0B02  3048               	movlw	72	;# 
  2966  0B03  018E               	clrf	14	;# 
  2967  0B04  1B01               	btfsc	1,6	;# 
  2968  0B05  3090               	movlw	144	;# 
  2969  0B06  008E               	movwf	14	;# 
  2970  0B07  3048               	movlw	72	;# 
  2971  0B08  018E               	clrf	14	;# 
  2972  0B09  1B81               	btfsc	1,7	;# 
  2973  0B0A  3090               	movlw	144	;# 
  2974  0B0B  008E               	movwf	14	;# 
  2975  0B0C  3141               	addfsr 1,1	;# 
  2976  0B0D  3048               	movlw	72	;# 
  2977  0B0E  018E               	clrf	14	;# 
  2978  0B0F  1801               	btfsc	1,0	;# 
  2979  0B10  3090               	movlw	144	;# 
  2980  0B11  008E               	movwf	14	;# 
  2981  0B12  3048               	movlw	72	;# 
  2982  0B13  018E               	clrf	14	;# 
  2983  0B14  1881               	btfsc	1,1	;# 
  2984  0B15  3090               	movlw	144	;# 
  2985  0B16  008E               	movwf	14	;# 
  2986  0B17  3048               	movlw	72	;# 
  2987  0B18  018E               	clrf	14	;# 
  2988  0B19  1901               	btfsc	1,2	;# 
  2989  0B1A  3090               	movlw	144	;# 
  2990  0B1B  008E               	movwf	14	;# 
  2991  0B1C  3048               	movlw	72	;# 
  2992  0B1D  018E               	clrf	14	;# 
  2993  0B1E  1981               	btfsc	1,3	;# 
  2994  0B1F  3090               	movlw	144	;# 
  2995  0B20  008E               	movwf	14	;# 
  2996  0B21  3048               	movlw	72	;# 
  2997  0B22  018E               	clrf	14	;# 
  2998  0B23  1A01               	btfsc	1,4	;# 
  2999  0B24  3090               	movlw	144	;# 
  3000  0B25  008E               	movwf	14	;# 
  3001  0B26  3048               	movlw	72	;# 
  3002  0B27  018E               	clrf	14	;# 
  3003  0B28  1A81               	btfsc	1,5	;# 
  3004  0B29  3090               	movlw	144	;# 
  3005  0B2A  008E               	movwf	14	;# 
  3006  0B2B  3048               	movlw	72	;# 
  3007  0B2C  018E               	clrf	14	;# 
  3008  0B2D  1B01               	btfsc	1,6	;# 
  3009  0B2E  3090               	movlw	144	;# 
  3010  0B2F  008E               	movwf	14	;# 
  3011  0B30  3048               	movlw	72	;# 
  3012  0B31  018E               	clrf	14	;# 
  3013  0B32  1B81               	btfsc	1,7	;# 
  3014  0B33  3090               	movlw	144	;# 
  3015  0B34  008E               	movwf	14	;# 
  3016  0B35  3141               	addfsr 1,1	;# 
  3017  0B36  3048               	movlw	72	;# 
  3018  0B37  018E               	clrf	14	;# 
  3019  0B38  1801               	btfsc	1,0	;# 
  3020  0B39  3090               	movlw	144	;# 
  3021  0B3A  008E               	movwf	14	;# 
  3022  0B3B  3048               	movlw	72	;# 
  3023  0B3C  018E               	clrf	14	;# 
  3024  0B3D  1881               	btfsc	1,1	;# 
  3025  0B3E  3090               	movlw	144	;# 
  3026  0B3F  008E               	movwf	14	;# 
  3027  0B40  3048               	movlw	72	;# 
  3028  0B41  018E               	clrf	14	;# 
  3029  0B42  1901               	btfsc	1,2	;# 
  3030  0B43  3090               	movlw	144	;# 
  3031  0B44  008E               	movwf	14	;# 
  3032  0B45  3048               	movlw	72	;# 
  3033  0B46  018E               	clrf	14	;# 
  3034  0B47  1981               	btfsc	1,3	;# 
  3035  0B48  3090               	movlw	144	;# 
  3036  0B49  008E               	movwf	14	;# 
  3037  0B4A  3048               	movlw	72	;# 
  3038  0B4B  018E               	clrf	14	;# 
  3039  0B4C  1A01               	btfsc	1,4	;# 
  3040  0B4D  3090               	movlw	144	;# 
  3041  0B4E  008E               	movwf	14	;# 
  3042  0B4F  3048               	movlw	72	;# 
  3043  0B50  018E               	clrf	14	;# 
  3044  0B51  1A81               	btfsc	1,5	;# 
  3045  0B52  3090               	movlw	144	;# 
  3046  0B53  008E               	movwf	14	;# 
  3047  0B54  3048               	movlw	72	;# 
  3048  0B55  018E               	clrf	14	;# 
  3049  0B56  1B01               	btfsc	1,6	;# 
  3050  0B57  3090               	movlw	144	;# 
  3051  0B58  008E               	movwf	14	;# 
  3052  0B59  3048               	movlw	72	;# 
  3053  0B5A  018E               	clrf	14	;# 
  3054  0B5B  1B81               	btfsc	1,7	;# 
  3055  0B5C  3090               	movlw	144	;# 
  3056  0B5D  008E               	movwf	14	;# 
  3057  0B5E  3141               	addfsr 1,1	;# 
  3058  0B5F  3048               	movlw	72	;# 
  3059  0B60  018E               	clrf	14	;# 
  3060  0B61  1801               	btfsc	1,0	;# 
  3061  0B62  3090               	movlw	144	;# 
  3062  0B63  008E               	movwf	14	;# 
  3063  0B64  3048               	movlw	72	;# 
  3064  0B65  018E               	clrf	14	;# 
  3065  0B66  1881               	btfsc	1,1	;# 
  3066  0B67  3090               	movlw	144	;# 
  3067  0B68  008E               	movwf	14	;# 
  3068  0B69  3048               	movlw	72	;# 
  3069  0B6A  018E               	clrf	14	;# 
  3070  0B6B  1901               	btfsc	1,2	;# 
  3071  0B6C  3090               	movlw	144	;# 
  3072  0B6D  008E               	movwf	14	;# 
  3073  0B6E  3048               	movlw	72	;# 
  3074  0B6F  018E               	clrf	14	;# 
  3075  0B70  1981               	btfsc	1,3	;# 
  3076  0B71  3090               	movlw	144	;# 
  3077  0B72  008E               	movwf	14	;# 
  3078  0B73  3048               	movlw	72	;# 
  3079  0B74  018E               	clrf	14	;# 
  3080  0B75  1A01               	btfsc	1,4	;# 
  3081  0B76  3090               	movlw	144	;# 
  3082  0B77  008E               	movwf	14	;# 
  3083  0B78  3048               	movlw	72	;# 
  3084  0B79  018E               	clrf	14	;# 
  3085  0B7A  1A81               	btfsc	1,5	;# 
  3086  0B7B  3090               	movlw	144	;# 
  3087  0B7C  008E               	movwf	14	;# 
  3088  0B7D  3048               	movlw	72	;# 
  3089  0B7E  018E               	clrf	14	;# 
  3090  0B7F  1B01               	btfsc	1,6	;# 
  3091  0B80  3090               	movlw	144	;# 
  3092  0B81  008E               	movwf	14	;# 
  3093  0B82  083D               	movf	_last_bit0& (0+127),w	;# 
  3094  0B83  018E               	clrf	14	;# 
  3095  0B84  1B81               	btfsc	1,7	;# 
  3096  0B85  083E               	movf	_last_bit1& (0+127),w	;# 
  3097  0B86  008E               	movwf	14	;# 
  3098  0B87  3141               	addfsr 1,1	;# 
  3099  0B88  0BC0               	decfsz	_send32_count& (0+127),f	;# 
  3100  0B89  2AE4               	goto	next_word	;# 
  3101  0B8A  0008               	return
  3102  0B8B                     __end_of_Send32:	
  3103  0B8B                     __ptext1913:	
  3104 ;; *************** function _AsicPreCalc *****************
  3105 ;; Defined at:
  3106 ;;		line 320 in file "asic.c"
  3107 ;; Parameters:    Size  Location     Type
  3108 ;;  work            2   22[BANK0 ] PTR struct _worktask
  3109 ;;		 -> WorkQue(180), 
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;  m              32   24[BANK1 ] unsigned long [8]
  3112 ;;  K              12    8[BANK1 ] unsigned long [3]
  3113 ;;  x               4   60[BANK1 ] unsigned long 
  3114 ;;  y               4   56[BANK1 ] unsigned long 
  3115 ;;  z               4   20[BANK1 ] unsigned long 
  3116 ;;  n               1   64[BANK1 ] unsigned char 
  3117 ;; Return value:  Size  Location     Type
  3118 ;;		None               void
  3119 ;; Registers used:
  3120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3121 ;; Tracked objects:
  3122 ;;		On entry : 1F/0
  3123 ;;		On exit  : 1F/1
  3124 ;;		Unchanged: FFFE0/0
  3125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3126 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3127 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0
  3128 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  3129 ;;      Totals:         0       2      65       0       0       0       0       0       0       0       0       0       
      +0       0
  3130 ;;Total ram usage:       67 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    5
  3133 ;; This function calls:
  3134 ;;		___bmul
  3135 ;;		_rotate
  3136 ;; This function is called by:
  3137 ;;		_ProcessCmd
  3138 ;;		_AsicPushWork
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142                           
  3143                           ;psect for function _AsicPreCalc
  3144  0B8B                     _AsicPreCalc:	
  3145  0B8B                     l5987:	
  3146                           ; Regs used in _AsicPreCalc: [allreg]
  3147                           
  3148                           
  3149                           ;asic.c: 321: DWORD K[3] = { 0x428a2f98, 0x71374491, 0xb5c0fbcf };
  3150  0B8B  30D8               	movlw	low AsicPreCalc@F3349
  3151  0B8C  0086               	movwf	6
  3152  0B8D  3001               	movlw	high AsicPreCalc@F3349
  3153  0B8E  0087               	movwf	7
  3154  0B8F  30A8               	movlw	low AsicPreCalc@K
  3155  0B90  0084               	movwf	4
  3156  0B91  3000               	movlw	high AsicPreCalc@K
  3157  0B92  0085               	movwf	5
  3158  0B93  300C               	movlw	12
  3159  0B94  00FF               	movwf	127
  3160  0B95                     u4810:	
  3161  0B95  0016               	moviw fsr1++
  3162  0B96  001A               	movwi fsr0++
  3163  0B97  0BFF               	decfsz	127,f
  3164  0B98  2B95               	goto	u4810
  3165                           
  3166                           ;asic.c: 322: DWORD x, y, z;
  3167                           ;asic.c: 323: DWORD m[8];
  3168                           ;asic.c: 324: BYTE n;
  3169                           ;asic.c: 326: for(n = 0; n < 8; n++)
  3170  0B99  0021               	movlb	1	; select bank1
  3171  0B9A  01E0               	clrf	AsicPreCalc@n^(0+128)
  3172  0B9B                     l5995:	
  3173                           
  3174                           ;asic.c: 327: m[n] = work->MidState[n];
  3175  0B9B  2680  3188         	fcall	PL18	;call to abstracted procedure
  3176  0B9D  0086               	movwf	6
  3177  0B9E  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3178  0B9F  0087               	movwf	7
  3179  0BA0  3141               	addfsr 1,1
  3180  0BA1  26BA  3188         	fcall	PL32	;call to abstracted procedure
  3181  0BA3  0860               	movf	AsicPreCalc@n^(0+128),w
  3182  0BA4  0709               	addwf	9,w
  3183  0BA5  0709               	addwf	9,w
  3184  0BA6  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3185  0BA7  0086               	movwf	6
  3186  0BA8  0187               	clrf	7
  3187  0BA9  0824               	movf	(??_AsicPreCalc+4)^(0+128),w
  3188  0BAA  3FC0               	movwi [0]fsr1
  3189  0BAB  0825               	movf	(??_AsicPreCalc+5)^(0+128),w
  3190  0BAC  3FC1               	movwi [1]fsr1
  3191  0BAD  0826               	movf	(??_AsicPreCalc+6)^(0+128),w
  3192  0BAE  3FC2               	movwi [2]fsr1
  3193  0BAF  0827               	movf	(??_AsicPreCalc+7)^(0+128),w
  3194  0BB0  3FC3               	movwi [3]fsr1
  3195  0BB1  3008               	movlw	8
  3196  0BB2  0AE0               	incf	AsicPreCalc@n^(0+128),f
  3197  0BB3  0260               	subwf	AsicPreCalc@n^(0+128),w
  3198  0BB4  1C03               	skipc
  3199  0BB5  2B9B               	goto	l5995
  3200                           
  3201                           ;asic.c: 329: for(n = 0; n < 3; n++) {
  3202  0BB6  01E0               	clrf	AsicPreCalc@n^(0+128)
  3203  0BB7                     l6007:	
  3204                           
  3205                           ;asic.c: 331: x = m[5-n] ^ m[6-n];
  3206  0BB7  2652  3188         	fcall	PL8	;call to abstracted procedure
  3207  0BB9  252E  3188         	fcall	___bmul
  3208  0BBB  3E18               	addlw	24
  3209  0BBC  262B  3188         	fcall	PL2	;call to abstracted procedure
  3210  0BBE  252E  3188         	fcall	___bmul
  3211  0BC0  3E14               	addlw	20
  3212  0BC1  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3213  0BC2  0086               	movwf	6
  3214  0BC3  0187               	clrf	7
  3215  0BC4  3F40               	moviw [0]fsr1
  3216  0BC5  0021               	movlb	1	; select bank1
  3217  0BC6  00A4               	movwf	(??_AsicPreCalc+4)^(0+128)
  3218  0BC7  3F41               	moviw [1]fsr1
  3219  0BC8  00A5               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  3220  0BC9  3F42               	moviw [2]fsr1
  3221  0BCA  00A6               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  3222  0BCB  3F43               	moviw [3]fsr1
  3223  0BCC  00A7               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  3224  0BCD  0820               	movf	??_AsicPreCalc^(0+128),w
  3225  0BCE  0624               	xorwf	(??_AsicPreCalc+4)^(0+128),w
  3226  0BCF  00DC               	movwf	AsicPreCalc@x^(0+128)
  3227  0BD0  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  3228  0BD1  0625               	xorwf	(??_AsicPreCalc+5)^(0+128),w
  3229  0BD2  00DD               	movwf	(AsicPreCalc@x+1)^(0+128)
  3230  0BD3  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  3231  0BD4  0626               	xorwf	(??_AsicPreCalc+6)^(0+128),w
  3232  0BD5  00DE               	movwf	(AsicPreCalc@x+2)^(0+128)
  3233  0BD6  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3234  0BD7  0627               	xorwf	(??_AsicPreCalc+7)^(0+128),w
  3235  0BD8  00DF               	movwf	(AsicPreCalc@x+3)^(0+128)
  3236                           
  3237                           ;asic.c: 332: x = x & m[4-n];
  3238  0BD9  2652  3188         	fcall	PL8	;call to abstracted procedure
  3239  0BDB  252E  3188         	fcall	___bmul
  3240  0BDD  3E10               	addlw	16
  3241  0BDE  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3242  0BDF  263D  3188         	fcall	PL4	;call to abstracted procedure
  3243  0BE1  26E9  3188         	fcall	PL52	;call to abstracted procedure
  3244                           
  3245                           ;asic.c: 333: x = m[6-n] ^ x;
  3246  0BE3  2652  3188         	fcall	PL8	;call to abstracted procedure
  3247  0BE5  252E  3188         	fcall	___bmul
  3248  0BE7  3E18               	addlw	24
  3249  0BE8  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3250  0BE9  263D  3188         	fcall	PL4	;call to abstracted procedure
  3251  0BEB  06DC               	xorwf	AsicPreCalc@x^(0+128),f
  3252  0BEC  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  3253  0BED  06DD               	xorwf	(AsicPreCalc@x+1)^(0+128),f
  3254  0BEE  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  3255  0BEF  06DE               	xorwf	(AsicPreCalc@x+2)^(0+128),f
  3256  0BF0  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3257  0BF1  06DF               	xorwf	(AsicPreCalc@x+3)^(0+128),f
  3258                           
  3259                           ;asic.c: 334: x += K[n];
  3260  0BF2  0860               	movf	AsicPreCalc@n^(0+128),w
  3261  0BF3  0709               	addwf	9,w
  3262  0BF4  0709               	addwf	9,w
  3263  0BF5  3EA8               	addlw	AsicPreCalc@K& (0+255)
  3264  0BF6  0086               	movwf	6
  3265  0BF7  3F40               	moviw [0]fsr1
  3266  0BF8  26C8  3188         	fcall	PL38	;call to abstracted procedure
  3267                           
  3268                           ;asic.c: 335: x += work->Merkle[n];
  3269  0BFA  2680  3188         	fcall	PL18	;call to abstracted procedure
  3270  0BFC  3E21               	addlw	33
  3271  0BFD  0086               	movwf	6
  3272  0BFE  3000               	movlw	0
  3273  0BFF  3D23               	addwfc	(??_AsicPreCalc+3)^(0+128),w
  3274  0C00  0087               	movwf	7
  3275  0C01  3F40               	moviw [0]fsr1
  3276  0C02  26C8  3188         	fcall	PL38	;call to abstracted procedure
  3277                           
  3278                           ;asic.c: 336: x += m[7-n];
  3279  0C04  2652  3188         	fcall	PL8	;call to abstracted procedure
  3280  0C06  252E  3188         	fcall	___bmul
  3281  0C08  3E1C               	addlw	28
  3282  0C09  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3283  0C0A  0086               	movwf	6
  3284  0C0B  0187               	clrf	7
  3285  0C0C  3F40               	moviw [0]fsr1
  3286  0C0D  0021               	movlb	1	; select bank1
  3287  0C0E  26C8  3188         	fcall	PL38	;call to abstracted procedure
  3288                           
  3289                           ;asic.c: 337: y = rotate(m[4-n], 26);
  3290  0C10  2652  3188         	fcall	PL8	;call to abstracted procedure
  3291  0C12  252E  3188         	fcall	___bmul
  3292  0C14  2670  3188         	fcall	PL14	;call to abstracted procedure
  3293  0C16  2668  3188         	fcall	PL12	;call to abstracted procedure
  3294  0C18  301A               	movlw	26
  3295  0C19  00DD               	movwf	?_rotate+4
  3296  0C1A  253B  3188         	fcall	_rotate
  3297  0C1C  2658  3188         	fcall	PL10	;call to abstracted procedure
  3298                           
  3299                           ;asic.c: 338: z = rotate(m[4-n], 21);
  3300  0C1E  2652  3188         	fcall	PL8	;call to abstracted procedure
  3301  0C20  252E  3188         	fcall	___bmul
  3302  0C22  2670  3188         	fcall	PL14	;call to abstracted procedure
  3303  0C24  2668  3188         	fcall	PL12	;call to abstracted procedure
  3304  0C26  3015               	movlw	21
  3305  0C27  00DD               	movwf	?_rotate+4
  3306  0C28  253B  3188         	fcall	_rotate
  3307  0C2A  085C               	movf	?_rotate+3,w
  3308  0C2B  0021               	movlb	1	; select bank1
  3309  0C2C  00B7               	movwf	(AsicPreCalc@z+3)^(0+128)
  3310  0C2D  0020               	movlb	0	; select bank0
  3311  0C2E  085B               	movf	?_rotate+2,w
  3312  0C2F  0021               	movlb	1	; select bank1
  3313  0C30  00B6               	movwf	(AsicPreCalc@z+2)^(0+128)
  3314  0C31  0020               	movlb	0	; select bank0
  3315  0C32  085A               	movf	?_rotate+1,w
  3316  0C33  0021               	movlb	1	; select bank1
  3317  0C34  00B5               	movwf	(AsicPreCalc@z+1)^(0+128)
  3318  0C35  0020               	movlb	0	; select bank0
  3319  0C36  0859               	movf	?_rotate,w
  3320  0C37  0021               	movlb	1	; select bank1
  3321  0C38  00B4               	movwf	AsicPreCalc@z^(0+128)
  3322                           
  3323                           ;asic.c: 339: z = y^z;
  3324  0C39  0858               	movf	AsicPreCalc@y^(0+128),w
  3325  0C3A  26E1  3188         	fcall	PL48	;call to abstracted procedure
  3326                           
  3327                           ;asic.c: 340: y = rotate(m[4-n], 7);
  3328  0C3C  2652  3188         	fcall	PL8	;call to abstracted procedure
  3329  0C3E  252E  3188         	fcall	___bmul
  3330  0C40  2670  3188         	fcall	PL14	;call to abstracted procedure
  3331  0C42  2668  3188         	fcall	PL12	;call to abstracted procedure
  3332  0C44  3007               	movlw	7
  3333  0C45  00DD               	movwf	?_rotate+4
  3334  0C46  253B  3188         	fcall	_rotate
  3335  0C48  2658  3188         	fcall	PL10	;call to abstracted procedure
  3336                           
  3337                           ;asic.c: 341: z = y^z;
  3338  0C4A  26E1  3188         	fcall	PL48	;call to abstracted procedure
  3339                           
  3340                           ;asic.c: 342: m[7-n] = z+x;
  3341  0C4C  0834               	movf	AsicPreCalc@z^(0+128),w
  3342  0C4D  075C               	addwf	AsicPreCalc@x^(0+128),w
  3343  0C4E  00A0               	movwf	??_AsicPreCalc^(0+128)
  3344  0C4F  0835               	movf	(AsicPreCalc@z+1)^(0+128),w
  3345  0C50  3D5D               	addwfc	(AsicPreCalc@x+1)^(0+128),w
  3346  0C51  00A1               	movwf	(??_AsicPreCalc^(0+128)+1)
  3347  0C52  0836               	movf	(AsicPreCalc@z+2)^(0+128),w
  3348  0C53  3D5E               	addwfc	(AsicPreCalc@x+2)^(0+128),w
  3349  0C54  00A2               	movwf	(??_AsicPreCalc^(0+128)+2)
  3350  0C55  0837               	movf	(AsicPreCalc@z+3)^(0+128),w
  3351  0C56  3D5F               	addwfc	(AsicPreCalc@x+3)^(0+128),w
  3352  0C57  00A3               	movwf	(??_AsicPreCalc^(0+128)+3)
  3353  0C58  2652  3188         	fcall	PL8	;call to abstracted procedure
  3354  0C5A  252E  3188         	fcall	___bmul
  3355  0C5C  26FD  3188         	fcall	PL62	;call to abstracted procedure
  3356  0C5E  2676  3188         	fcall	PL16	;call to abstracted procedure
  3357                           
  3358                           ;asic.c: 343: m[3-n] = m[3-n] + m[7-n];
  3359  0C60  2652  3188         	fcall	PL8	;call to abstracted procedure
  3360  0C62  252E  3188         	fcall	___bmul
  3361  0C64  3E1C               	addlw	28
  3362  0C65  262B  3188         	fcall	PL2	;call to abstracted procedure
  3363  0C67  252E  3188         	fcall	___bmul
  3364  0C69  3E0C               	addlw	12
  3365  0C6A  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3366  0C6B  0086               	movwf	6
  3367  0C6C  0187               	clrf	7
  3368  0C6D  3F40               	moviw [0]fsr1
  3369  0C6E  0021               	movlb	1	; select bank1
  3370  0C6F  07A0               	addwf	??_AsicPreCalc^(0+128),f
  3371  0C70  3F41               	moviw [1]fsr1
  3372  0C71  3DA1               	addwfc	(??_AsicPreCalc^(0+128)+1),f
  3373  0C72  3F42               	moviw [2]fsr1
  3374  0C73  3DA2               	addwfc	(??_AsicPreCalc^(0+128)+2),f
  3375  0C74  3F43               	moviw [3]fsr1
  3376  0C75  3DA3               	addwfc	(??_AsicPreCalc^(0+128)+3),f
  3377  0C76  2652  3188         	fcall	PL8	;call to abstracted procedure
  3378  0C78  252E  3188         	fcall	___bmul
  3379  0C7A  3E0C               	addlw	12
  3380  0C7B  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3381  0C7C  0086               	movwf	6
  3382  0C7D  0187               	clrf	7
  3383  0C7E  2676  3188         	fcall	PL16	;call to abstracted procedure
  3384                           
  3385                           ;asic.c: 344: x = rotate(m[((0-n)&7)], 30);
  3386  0C80  2693  3188         	fcall	PL20	;call to abstracted procedure
  3387  0C82  3F40               	moviw [0]fsr1
  3388  0C83  0020               	movlb	0	; select bank0
  3389  0C84  2668  3188         	fcall	PL12	;call to abstracted procedure
  3390  0C86  301E               	movlw	30
  3391  0C87  00DD               	movwf	?_rotate+4
  3392  0C88  253B  3188         	fcall	_rotate
  3393  0C8A  26A4  3188         	fcall	PL28	;call to abstracted procedure
  3394                           
  3395                           ;asic.c: 345: y = rotate(m[((0-n)&7)], 19);
  3396  0C8C  2693  3188         	fcall	PL20	;call to abstracted procedure
  3397  0C8E  0187               	clrf	7
  3398  0C8F  3F40               	moviw [0]fsr1
  3399  0C90  0020               	movlb	0	; select bank0
  3400  0C91  2668  3188         	fcall	PL12	;call to abstracted procedure
  3401  0C93  3013               	movlw	19
  3402  0C94  00DD               	movwf	?_rotate+4
  3403  0C95  253B  3188         	fcall	_rotate
  3404  0C97  2658  3188         	fcall	PL10	;call to abstracted procedure
  3405                           
  3406                           ;asic.c: 346: y = y^x;
  3407  0C99  085C               	movf	AsicPreCalc@x^(0+128),w
  3408  0C9A  26D0  3188         	fcall	PL44	;call to abstracted procedure
  3409                           
  3410                           ;asic.c: 347: x = rotate(m[((0-n)&7)], 10);
  3411  0C9C  2693  3188         	fcall	PL20	;call to abstracted procedure
  3412  0C9E  0187               	clrf	7
  3413  0C9F  3F40               	moviw [0]fsr1
  3414  0CA0  0020               	movlb	0	; select bank0
  3415  0CA1  2668  3188         	fcall	PL12	;call to abstracted procedure
  3416  0CA3  300A               	movlw	10
  3417  0CA4  00DD               	movwf	?_rotate+4
  3418  0CA5  253B  3188         	fcall	_rotate
  3419  0CA7  26A4  3188         	fcall	PL28	;call to abstracted procedure
  3420                           
  3421                           ;asic.c: 348: y = x^y;
  3422  0CA9  26D0  3188         	fcall	PL44	;call to abstracted procedure
  3423                           
  3424                           ;asic.c: 349: x = m[((0-n)&7)] | m[((1-n)&7)];
  3425  0CAB  0860               	movf	AsicPreCalc@n^(0+128),w
  3426  0CAC  3C01               	sublw	1
  3427  0CAD  26B4  3188         	fcall	PL30	;call to abstracted procedure
  3428  0CAF  0187               	clrf	7
  3429  0CB0  3F40               	moviw [0]fsr1
  3430  0CB1  264A  3188         	fcall	PL6	;call to abstracted procedure
  3431  0CB3  2693  3188         	fcall	PL20	;call to abstracted procedure
  3432  0CB5  26BA  3188         	fcall	PL32	;call to abstracted procedure
  3433  0CB7  0820               	movf	??_AsicPreCalc^(0+128),w
  3434  0CB8  0424               	iorwf	(??_AsicPreCalc+4)^(0+128),w
  3435  0CB9  00DC               	movwf	AsicPreCalc@x^(0+128)
  3436  0CBA  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  3437  0CBB  0425               	iorwf	(??_AsicPreCalc+5)^(0+128),w
  3438  0CBC  00DD               	movwf	(AsicPreCalc@x+1)^(0+128)
  3439  0CBD  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  3440  0CBE  0426               	iorwf	(??_AsicPreCalc+6)^(0+128),w
  3441  0CBF  00DE               	movwf	(AsicPreCalc@x+2)^(0+128)
  3442  0CC0  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3443  0CC1  0427               	iorwf	(??_AsicPreCalc+7)^(0+128),w
  3444  0CC2  00DF               	movwf	(AsicPreCalc@x+3)^(0+128)
  3445                           
  3446                           ;asic.c: 350: x = m[((2-n)&7)] & x;
  3447  0CC3  0860               	movf	AsicPreCalc@n^(0+128),w
  3448  0CC4  3C02               	sublw	2
  3449  0CC5  26B4  3188         	fcall	PL30	;call to abstracted procedure
  3450  0CC7  3F40               	moviw [0]fsr1
  3451  0CC8  264A  3188         	fcall	PL6	;call to abstracted procedure
  3452  0CCA  0820               	movf	??_AsicPreCalc^(0+128),w
  3453  0CCB  26E9  3188         	fcall	PL52	;call to abstracted procedure
  3454                           
  3455                           ;asic.c: 351: z = m[((0-n)&7)] & m[((1-n)&7)];
  3456  0CCD  0860               	movf	AsicPreCalc@n^(0+128),w
  3457  0CCE  3C01               	sublw	1
  3458  0CCF  26B4  3188         	fcall	PL30	;call to abstracted procedure
  3459  0CD1  3F40               	moviw [0]fsr1
  3460  0CD2  264A  3188         	fcall	PL6	;call to abstracted procedure
  3461  0CD4  2693  3188         	fcall	PL20	;call to abstracted procedure
  3462  0CD6  26BA  3188         	fcall	PL32	;call to abstracted procedure
  3463  0CD8  0820               	movf	??_AsicPreCalc^(0+128),w
  3464  0CD9  0524               	andwf	(??_AsicPreCalc+4)^(0+128),w
  3465  0CDA  00B4               	movwf	AsicPreCalc@z^(0+128)
  3466  0CDB  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  3467  0CDC  0525               	andwf	(??_AsicPreCalc+5)^(0+128),w
  3468  0CDD  00B5               	movwf	(AsicPreCalc@z+1)^(0+128)
  3469  0CDE  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  3470  0CDF  0526               	andwf	(??_AsicPreCalc+6)^(0+128),w
  3471  0CE0  00B6               	movwf	(AsicPreCalc@z+2)^(0+128)
  3472  0CE1  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3473  0CE2  0527               	andwf	(??_AsicPreCalc+7)^(0+128),w
  3474  0CE3  00B7               	movwf	(AsicPreCalc@z+3)^(0+128)
  3475                           
  3476                           ;asic.c: 352: x = x | z;
  3477  0CE4  0834               	movf	AsicPreCalc@z^(0+128),w
  3478  0CE5  04DC               	iorwf	AsicPreCalc@x^(0+128),f
  3479  0CE6  0835               	movf	(AsicPreCalc@z+1)^(0+128),w
  3480  0CE7  04DD               	iorwf	(AsicPreCalc@x+1)^(0+128),f
  3481  0CE8  0836               	movf	(AsicPreCalc@z+2)^(0+128),w
  3482  0CE9  04DE               	iorwf	(AsicPreCalc@x+2)^(0+128),f
  3483  0CEA  0837               	movf	(AsicPreCalc@z+3)^(0+128),w
  3484  0CEB  04DF               	iorwf	(AsicPreCalc@x+3)^(0+128),f
  3485                           
  3486                           ;asic.c: 353: m[7-n] += y + x;
  3487  0CEC  0858               	movf	AsicPreCalc@y^(0+128),w
  3488  0CED  075C               	addwf	AsicPreCalc@x^(0+128),w
  3489  0CEE  00A0               	movwf	??_AsicPreCalc^(0+128)
  3490  0CEF  0859               	movf	(AsicPreCalc@y+1)^(0+128),w
  3491  0CF0  3D5D               	addwfc	(AsicPreCalc@x+1)^(0+128),w
  3492  0CF1  00A1               	movwf	(??_AsicPreCalc^(0+128)+1)
  3493  0CF2  085A               	movf	(AsicPreCalc@y+2)^(0+128),w
  3494  0CF3  3D5E               	addwfc	(AsicPreCalc@x+2)^(0+128),w
  3495  0CF4  00A2               	movwf	(??_AsicPreCalc^(0+128)+2)
  3496  0CF5  085B               	movf	(AsicPreCalc@y+3)^(0+128),w
  3497  0CF6  3D5F               	addwfc	(AsicPreCalc@x+3)^(0+128),w
  3498  0CF7  00A3               	movwf	(??_AsicPreCalc^(0+128)+3)
  3499  0CF8  2652  3188         	fcall	PL8	;call to abstracted procedure
  3500  0CFA  252E  3188         	fcall	___bmul
  3501  0CFC  26FD  3188         	fcall	PL62	;call to abstracted procedure
  3502  0CFE  0021               	movlb	1	; select bank1
  3503  0CFF  0820               	movf	??_AsicPreCalc^(0+128),w
  3504  0D00  0781               	addwf	1,f
  3505  0D01  3141               	addfsr 1,1
  3506  0D02  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  3507  0D03  3D81               	addwfc	1,f
  3508  0D04  3141               	addfsr 1,1
  3509  0D05  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  3510  0D06  3D81               	addwfc	1,f
  3511  0D07  3141               	addfsr 1,1
  3512  0D08  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3513  0D09  3D81               	addwfc	1,f
  3514                           
  3515                           ;asic.c: 355: PrecalcHashes[2-n] = m[7-n];
  3516  0D0A  2652  3188         	fcall	PL8	;call to abstracted procedure
  3517  0D0C  252E  3188         	fcall	___bmul
  3518  0D0E  3E1C               	addlw	28
  3519  0D0F  262B  3188         	fcall	PL2	;call to abstracted procedure
  3520  0D11  252E  3188         	fcall	___bmul
  3521  0D13  3EC8               	addlw	(_PrecalcHashes+8)& (0+255)
  3522  0D14  0086               	movwf	6
  3523  0D15  3001               	movlw	1	; select bank3/4
  3524  0D16  0087               	movwf	7
  3525  0D17  2676  3188         	fcall	PL16	;call to abstracted procedure
  3526                           
  3527                           ;asic.c: 356: PrecalcHashes[5-n] = m[3-n];
  3528  0D19  2652  3188         	fcall	PL8	;call to abstracted procedure
  3529  0D1B  252E  3188         	fcall	___bmul
  3530  0D1D  3E0C               	addlw	12
  3531  0D1E  262B  3188         	fcall	PL2	;call to abstracted procedure
  3532  0D20  252E  3188         	fcall	___bmul
  3533  0D22  3ED4               	addlw	(_PrecalcHashes+20)& (0+255)
  3534  0D23  0086               	movwf	6
  3535  0D24  3001               	movlw	1	; select bank3/4
  3536  0D25  0087               	movwf	7
  3537  0D26  2676  3188         	fcall	PL16	;call to abstracted procedure
  3538  0D28  3003               	movlw	3
  3539  0D29  0AE0               	incf	AsicPreCalc@n^(0+128),f
  3540  0D2A  0260               	subwf	AsicPreCalc@n^(0+128),w
  3541  0D2B  1803               	btfsc	3,0
  3542  0D2C  0008               	return
  3543  0D2D  2BB7               	goto	l6007
  3544  0D2E                     __end_of_AsicPreCalc:	
  3545  0D2E                     __ptext1960:	
  3546 ;; *************** function ___bmul *****************
  3547 ;; Defined at:
  3548 ;;		line 3 in file "/opt/microchip/xc8/v1.12/sources/bmul.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;  multiplier      1    wreg     unsigned char 
  3551 ;;  multiplicand    1    6[BANK0 ] unsigned char 
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;  multiplier      1    8[BANK0 ] unsigned char 
  3554 ;;  product         1    7[BANK0 ] unsigned char 
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  1    wreg      unsigned char 
  3557 ;; Registers used:
  3558 ;;		wreg, status,2, status,0
  3559 ;; Tracked objects:
  3560 ;;		On entry : 1C/2
  3561 ;;		On exit  : 1F/0
  3562 ;;		Unchanged: FFFE0/0
  3563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3564 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3565 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3567 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3568 ;;Total ram usage:        3 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    4
  3571 ;; This function calls:
  3572 ;;		Nothing
  3573 ;; This function is called by:
  3574 ;;		_AsicPreCalc
  3575 ;;		_ProcessIO
  3576 ;;		_SendCmdReply
  3577 ;;		i1_SendCmdReply
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           
  3582                           ;psect for function ___bmul
  3583  0D2E                     ___bmul:	
  3584                           
  3585                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3586                           ;___bmul@multiplier stored from wreg
  3587  0D2E  0020               	movlb	0	; select bank0
  3588  0D2F  00D8               	movwf	___bmul@multiplier
  3589  0D30  01D7               	clrf	___bmul@product
  3590  0D31                     l6401:	
  3591  0D31  0856               	movf	___bmul@multiplicand,w
  3592  0D32  1858               	btfsc	___bmul@multiplier,0
  3593  0D33  07D7               	addwf	___bmul@product,f
  3594  0D34  35D6               	lslf	___bmul@multiplicand,f
  3595  0D35  36D8               	lsrf	___bmul@multiplier,f
  3596  0D36  08D8               	movf	___bmul@multiplier,f
  3597  0D37  1D03               	skipz
  3598  0D38  2D31               	goto	l6401
  3599  0D39  0857               	movf	___bmul@product,w
  3600  0D3A  0008               	return
  3601  0D3B                     __end_of___bmul:	
  3602  0D3B                     __ptext1914:	
  3603 ;; *************** function _rotate *****************
  3604 ;; Defined at:
  3605 ;;		line 315 in file "asic.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  x               4    9[BANK0 ] unsigned long 
  3608 ;;  y               1   13[BANK0 ] unsigned char 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;		None
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  4    9[BANK0 ] unsigned long 
  3613 ;; Registers used:
  3614 ;;		wreg, status,2, status,0
  3615 ;; Tracked objects:
  3616 ;;		On entry : 1F/0
  3617 ;;		On exit  : 1F/0
  3618 ;;		Unchanged: FFFE0/0
  3619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3620 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3622 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3623 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3624 ;;Total ram usage:       13 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    4
  3627 ;; This function calls:
  3628 ;;		Nothing
  3629 ;; This function is called by:
  3630 ;;		_AsicPreCalc
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           
  3635                           ;psect for function _rotate
  3636  0D3B                     _rotate:	
  3637                           
  3638                           ;asic.c: 316: return ((x<<y) | (x>>(32-y)));
  3639                           
  3640                           ; Regs used in _rotate: [wreg+status,2+status,0]
  3641  0D3B  0859               	movf	rotate@x,w
  3642  0D3C  00DE               	movwf	??_rotate
  3643  0D3D  085A               	movf	rotate@x+1,w
  3644  0D3E  00DF               	movwf	??_rotate+1
  3645  0D3F  085B               	movf	rotate@x+2,w
  3646  0D40  00E0               	movwf	??_rotate+2
  3647  0D41  085C               	movf	rotate@x+3,w
  3648  0D42  00E1               	movwf	??_rotate+3
  3649  0D43  085D               	movf	rotate@y,w
  3650  0D44  3C20               	sublw	32
  3651  0D45  0A89               	incf	9,f
  3652  0D46  2D4C               	goto	u4790
  3653  0D47                     u4795:	
  3654  0D47  1003               	clrc
  3655  0D48  0CE1               	rrf	??_rotate+3,f
  3656  0D49  0CE0               	rrf	??_rotate+2,f
  3657  0D4A  0CDF               	rrf	??_rotate+1,f
  3658  0D4B  0CDE               	rrf	??_rotate,f
  3659  0D4C                     u4790:	
  3660  0D4C  3EFF               	addlw	-1
  3661  0D4D  1D03               	skipz
  3662  0D4E  2D47               	goto	u4795
  3663  0D4F  0859               	movf	rotate@x,w
  3664  0D50  00E2               	movwf	??_rotate+4
  3665  0D51  085A               	movf	rotate@x+1,w
  3666  0D52  00E3               	movwf	??_rotate+5
  3667  0D53  085B               	movf	rotate@x+2,w
  3668  0D54  00E4               	movwf	??_rotate+6
  3669  0D55  085C               	movf	rotate@x+3,w
  3670  0D56  00E5               	movwf	??_rotate+7
  3671  0D57  0A5D               	incf	rotate@y,w
  3672  0D58  2D5D               	goto	u4800
  3673  0D59                     u4805:	
  3674  0D59  35E2               	lslf	??_rotate+4,f
  3675  0D5A  0DE3               	rlf	??_rotate+5,f
  3676  0D5B  0DE4               	rlf	??_rotate+6,f
  3677  0D5C  0DE5               	rlf	??_rotate+7,f
  3678  0D5D                     u4800:	
  3679  0D5D  0B89               	decfsz	9,f
  3680  0D5E  2D59               	goto	u4805
  3681  0D5F  0862               	movf	??_rotate+4,w
  3682  0D60  04DE               	iorwf	??_rotate,f
  3683  0D61  0863               	movf	??_rotate+5,w
  3684  0D62  04DF               	iorwf	??_rotate+1,f
  3685  0D63  0864               	movf	??_rotate+6,w
  3686  0D64  04E0               	iorwf	??_rotate+2,f
  3687  0D65  0865               	movf	??_rotate+7,w
  3688  0D66  04E1               	iorwf	??_rotate+3,f
  3689  0D67  0861               	movf	??_rotate+3,w
  3690  0D68  00DC               	movwf	?_rotate+3
  3691  0D69  0860               	movf	??_rotate+2,w
  3692  0D6A  00DB               	movwf	?_rotate+2
  3693  0D6B  085F               	movf	??_rotate+1,w
  3694  0D6C  00DA               	movwf	?_rotate+1
  3695  0D6D  085E               	movf	??_rotate,w
  3696  0D6E  00D9               	movwf	?_rotate
  3697  0D6F  0008               	return
  3698  0D70                     __end_of_rotate:	
  3699  0D70                     __ptext1908:	
  3700 ;; *************** function _ProcessIO *****************
  3701 ;; Defined at:
  3702 ;;		line 182 in file "main.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;		None
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;		None
  3707 ;; Return value:  Size  Location     Type
  3708 ;;		None               void
  3709 ;; Registers used:
  3710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3711 ;; Tracked objects:
  3712 ;;		On entry : 1C/2
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: FFE00/0
  3715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3717 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3719 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3720 ;;Total ram usage:        4 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:   15
  3723 ;; This function calls:
  3724 ;;		_ProcessCmd
  3725 ;;		_USBTransferOnePacket
  3726 ;;		___bmul
  3727 ;; This function is called by:
  3728 ;;		_main
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           
  3733                           ;psect for function _ProcessIO
  3734  0D70                     _ProcessIO:	
  3735                           
  3736                           ;main.c: 184: if((USBDeviceState < CONFIGURED_STATE)||(UCONbits.SUSPND==1)) return;
  3737                           
  3738                           ; Regs used in _ProcessIO: [allreg]
  3739  0D70  3020               	movlw	32
  3740  0D71  0021               	movlb	1	; select bank1
  3741  0D72  026B               	subwf	_USBDeviceState^(0+128),w
  3742  0D73  1C03               	skipc
  3743  0D74  0008               	return
  3744  0D75  003D               	movlb	29	; select bank29
  3745  0D76  188E               	btfsc	14,1	;volatile
  3746  0D77  0008               	return
  3747                           
  3748                           ;main.c: 193: if(!(USBGenericOutHandle==0?0:((volatile BDT_ENTRY*)USBGenericOutHandle)->
      +                          STAT.UOWN)) {
  3749  0D78  0021               	movlb	1	; select bank1
  3750  0D79  086C               	movf	_USBGenericOutHandle^(0+128),w
  3751  0D7A  1903               	btfsc	3,2
  3752  0D7B  2D84               	goto	l6359
  3753  0D7C  086C               	movf	_USBGenericOutHandle^(0+128),w
  3754  0D7D  0086               	movwf	6
  3755  0D7E  0187               	clrf	7
  3756  0D7F  0D01               	rlf	1,w
  3757  0D80  0D01               	rlf	1,w
  3758  0D81  3901               	andlw	1
  3759  0D82  00E7               	movwf	_ProcessIO$2371^(0+128)
  3760  0D83  2D85               	goto	L1
  3761  0D84                     l6359:	
  3762  0D84  01E7               	clrf	_ProcessIO$2371^(0+128)
  3763  0D85                     L1:	
  3764  0D85  01E8               	clrf	(_ProcessIO$2371+1)^(0+128)
  3765  0D86  0868               	movf	(_ProcessIO$2371+1)^(0+128),w
  3766  0D87  0467               	iorwf	_ProcessIO$2371^(0+128),w
  3767  0D88  1D03               	skipz
  3768  0D89  2D98               	goto	l6367
  3769                           
  3770                           ;main.c: 197: ProcessCmd(OUTPacket);
  3771  0D8A  30A0               	movlw	160
  3772  0D8B  206E               	fcall	_ProcessCmd
  3773                           
  3774                           ;main.c: 198: USBGenericOutHandle = USBTransferOnePacket(1,0,(BYTE*)&OUTPacket,64);
  3775  0D8C  0020               	movlb	0	; select bank0
  3776  0D8D  30A0               	movlw	160
  3777  0D8E  01D9               	clrf	?_USBTransferOnePacket
  3778  0D8F  00DA               	movwf	?_USBTransferOnePacket+1
  3779  0D90  3040               	movlw	64
  3780  0D91  00DB               	movwf	?_USBTransferOnePacket+2
  3781  0D92  3001               	movlw	1
  3782  0D93  3182  22CD  3188   	fcall	_USBTransferOnePacket
  3783  0D96  0021               	movlb	1	; select bank1
  3784  0D97  00EC               	movwf	_USBGenericOutHandle^(0+128)
  3785  0D98                     l6367:	
  3786                           
  3787                           ;main.c: 199: }
  3788                           ;main.c: 201: if(WQI != WQX && !(USBGenericInHandle==0?0:((volatile BDT_ENTRY*)USBGeneri
      +                          cInHandle)->STAT.UOWN)) {
  3789  0D98  086D               	movf	_WQI^(0+128),w
  3790  0D99  0022               	movlb	2	; select bank2
  3791  0D9A  063B               	xorwf	_WQX^(0+256),w
  3792  0D9B  1903               	skipnz
  3793  0D9C  0008               	return
  3794  0D9D  0837               	movf	_USBGenericInHandle^(0+256),w
  3795  0D9E  1903               	btfsc	3,2
  3796  0D9F  2DA9               	goto	l6373
  3797  0DA0  0837               	movf	_USBGenericInHandle^(0+256),w
  3798  0DA1  0086               	movwf	6
  3799  0DA2  0187               	clrf	7
  3800  0DA3  0D01               	rlf	1,w
  3801  0DA4  0D01               	rlf	1,w
  3802  0DA5  3901               	andlw	1
  3803  0DA6  0021               	movlb	1	; select bank1
  3804  0DA7  00E9               	movwf	_ProcessIO$2405^(0+128)
  3805  0DA8  2DAB               	goto	L2
  3806  0DA9                     l6373:	
  3807  0DA9  0021               	movlb	1	; select bank1
  3808  0DAA  01E9               	clrf	_ProcessIO$2405^(0+128)
  3809  0DAB                     L2:	
  3810  0DAB  01EA               	clrf	(_ProcessIO$2405+1)^(0+128)
  3811  0DAC  086A               	movf	(_ProcessIO$2405+1)^(0+128),w
  3812  0DAD  0469               	iorwf	_ProcessIO$2405^(0+128),w
  3813  0DAE  1D03               	skipz
  3814  0DAF  0008               	return
  3815                           
  3816                           ;main.c: 202: USBGenericInHandle = USBTransferOnePacket(1,1,(BYTE*)&INPacket[WQX*15],15);
  3817  0DB0  0020               	movlb	0	; select bank0
  3818  0DB1  300F               	movlw	15
  3819  0DB2  01D9               	clrf	?_USBTransferOnePacket
  3820  0DB3  0AD9               	incf	?_USBTransferOnePacket,f
  3821  0DB4  00D6               	movwf	?___bmul
  3822  0DB5  0022               	movlb	2	; select bank2
  3823  0DB6  083B               	movf	_WQX^(0+256),w
  3824  0DB7  252E               	fcall	___bmul
  3825  0DB8  3E20               	addlw	32
  3826  0DB9  00DA               	movwf	?_USBTransferOnePacket+1
  3827  0DBA  300F               	movlw	15
  3828  0DBB  00DB               	movwf	?_USBTransferOnePacket+2
  3829  0DBC  3001               	movlw	1
  3830  0DBD  3182  22CD         	fcall	_USBTransferOnePacket
  3831  0DBF  0022               	movlb	2	; select bank2
  3832  0DC0  00B7               	movwf	_USBGenericInHandle^(0+256)
  3833  0DC1  3003               	movlw	3
  3834                           
  3835                           ;main.c: 203: WQX = (WQX+1) & 3;
  3836  0DC2  0ABB               	incf	_WQX^(0+256),f
  3837  0DC3  05BB               	andwf	_WQX^(0+256),f
  3838  0DC4  0008               	return
  3839  0DC5                     __end_of_ProcessIO:	
  3840  0DC5                     __ptext1907:	
  3841 ;; *************** function _InitializeSystem *****************
  3842 ;; Defined at:
  3843 ;;		line 146 in file "main.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;		None
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;		None
  3848 ;; Return value:  Size  Location     Type
  3849 ;;		None               void
  3850 ;; Registers used:
  3851 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3852 ;; Tracked objects:
  3853 ;;		On entry : 17F/0
  3854 ;;		On exit  : 17F/1
  3855 ;;		Unchanged: FFE80/0
  3856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3861 ;;Total ram usage:        0 bytes
  3862 ;; Hardware stack levels used:    1
  3863 ;; Hardware stack levels required when called:    7
  3864 ;; This function calls:
  3865 ;;		_UserInit
  3866 ;;		_USBDeviceInit
  3867 ;; This function is called by:
  3868 ;;		_main
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           
  3873                           ;psect for function _InitializeSystem
  3874  0DC5                     _InitializeSystem:	
  3875                           
  3876                           ;main.c: 148: ANSELA = 0x00;
  3877                           
  3878                           ; Regs used in _InitializeSystem: [wreg+fsr1l-status,0+pclath+cstack]
  3879  0DC5  0023               	movlb	3	; select bank3
  3880  0DC6  018C               	clrf	12	;volatile
  3881                           
  3882                           ;main.c: 149: ANSELB = 0x00;
  3883  0DC7  018D               	clrf	13	;volatile
  3884                           
  3885                           ;main.c: 150: ANSELC = 0x04;
  3886  0DC8  3004               	movlw	4
  3887  0DC9  008E               	movwf	14	;volatile
  3888                           
  3889                           ;main.c: 153: OSCTUNE = 0;
  3890  0DCA  0021               	movlb	1	; select bank1
  3891  0DCB  0198               	clrf	24	;volatile
  3892                           
  3893                           ;main.c: 154: OSCCON = 0xFC;
  3894  0DCC  30FC               	movlw	252
  3895  0DCD  0099               	movwf	25	;volatile
  3896                           
  3897                           ;main.c: 155: ACTCON = 0x90;
  3898  0DCE  3090               	movlw	144
  3899  0DCF  0027               	movlb	7	; select bank7
  3900  0DD0  009B               	movwf	27	;volatile
  3901                           
  3902                           ;main.c: 158: USBGenericOutHandle = 0;
  3903  0DD1  0021               	movlb	1	; select bank1
  3904  0DD2  01EC               	clrf	_USBGenericOutHandle^(0+128)
  3905                           
  3906                           ;main.c: 159: USBGenericInHandle = 0;
  3907  0DD3  0022               	movlb	2	; select bank2
  3908  0DD4  01B7               	clrf	_USBGenericInHandle^(0+256)
  3909                           
  3910                           ;main.c: 160: WQI = WQX = 0;
  3911  0DD5  01BB               	clrf	_WQX^(0+256)
  3912  0DD6  0021               	movlb	1	; select bank1
  3913  0DD7  01ED               	clrf	_WQI^(0+128)
  3914                           
  3915                           ;main.c: 162: UserInit();
  3916  0DD8  260E               	fcall	_UserInit
  3917                           
  3918                           ;main.c: 164: USBDeviceInit();
  3919  0DD9  3196  2EBF         	ljmp	l5137
  3920  0DDB                     __end_of_InitializeSystem:	
  3921  0DDB                     __ptext1906:	
  3922 ;; *************** function _WorkTick *****************
  3923 ;; Defined at:
  3924 ;;		line 174 in file "klondike.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;		None
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;		None
  3929 ;; Return value:  Size  Location     Type
  3930 ;;		None               void
  3931 ;; Registers used:
  3932 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3933 ;; Tracked objects:
  3934 ;;		On entry : 1F/0
  3935 ;;		On exit  : 1C/0
  3936 ;;		Unchanged: FFFE0/0
  3937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3942 ;;Total ram usage:        0 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    4
  3945 ;; This function calls:
  3946 ;;		Nothing
  3947 ;; This function is called by:
  3948 ;;		_main
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           
  3953                           ;psect for function _WorkTick
  3954  0DDB                     _WorkTick:	
  3955                           
  3956                           ;klondike.c: 175: TMR0 += HashTime;
  3957                           
  3958                           ; Regs used in _WorkTick: [wreg+fsr1l-status,0]
  3959  0DDB  0022               	movlb	2	; select bank2
  3960  0DDC  0851               	movf	_HashTime^(0+256),w
  3961  0DDD  0020               	movlb	0	; select bank0
  3962  0DDE  0795               	addwf	21,f	;volatile
  3963                           
  3964                           ;klondike.c: 176: TMR0IF = 0;
  3965  0DDF  110B               	bcf	11,2	;volatile
  3966                           
  3967                           ;klondike.c: 177: if(RCSTAbits.SPEN == 0) {
  3968  0DE0  0023               	movlb	3	; select bank3
  3969  0DE1  1B9D               	btfsc	29,7	;volatile
  3970  0DE2  2DE6               	goto	l4663
  3971                           
  3972                           ;klondike.c: 178: RCSTAbits.SPEN = 1;
  3973  0DE3  179D               	bsf	29,7	;volatile
  3974                           
  3975                           ;klondike.c: 179: ResultQC = 0;
  3976  0DE4  0022               	movlb	2	; select bank2
  3977  0DE5  01B2               	clrf	_ResultQC^(0+256)
  3978  0DE6                     l4663:	
  3979                           
  3980                           ;klondike.c: 180: }
  3981                           ;klondike.c: 181: if((Status.State == 'W') && (++Status.HashCount == Status.MaxCount)) {
  3982  0DE6  0022               	movlb	2	; select bank2
  3983  0DE7  0852               	movf	_Status^(0+256),w	;volatile
  3984  0DE8  3A57               	xorlw	87
  3985  0DE9  1D03               	skipz
  3986  0DEA  2E04               	goto	l4677
  3987  0DEB  305A               	movlw	(_Status& (0+255)+8)
  3988  0DEC  0086               	movwf	6
  3989  0DED  3001               	movlw	1	; select bank2/3
  3990  0DEE  0087               	movwf	7
  3991  0DEF  0781               	addwf	1,f
  3992  0DF0  3141               	addfsr 1,1
  3993  0DF1  1803               	skipnc
  3994  0DF2  0A81               	incf	1,f
  3995  0DF3  317F               	addfsr 1,-1
  3996  0DF4  3F40               	moviw [0]fsr1
  3997  0DF5  065C               	xorwf	(_Status^(0+256)+10),w	;volatile
  3998  0DF6  1D03               	skipz
  3999  0DF7  2DFA               	goto	u3295
  4000  0DF8  3F41               	moviw [1]fsr1
  4001  0DF9  065D               	xorwf	((_Status+1)^(0+256)+10),w	;volatile
  4002  0DFA                     u3295:	
  4003  0DFA  1D03               	skipz
  4004  0DFB  2E04               	goto	l4677
  4005                           
  4006                           ;klondike.c: 182: if(Status.WorkQC > 0) {
  4007  0DFC  0855               	movf	(_Status^(0+256)+3),w	;volatile
  4008  0DFD  1903               	btfsc	3,2
  4009  0DFE  2E02               	goto	l4675
  4010                           
  4011                           ;klondike.c: 183: Status.State = 'P';
  4012  0DFF  3050               	movlw	80
  4013  0E00  00D2               	movwf	_Status^(0+256)	;volatile
  4014  0E01  0008               	return
  4015  0E02                     l4675:	
  4016                           
  4017                           ;klondike.c: 186: else
  4018                           ;klondike.c: 187: Status.State = 'R';
  4019  0E02  3052               	movlw	82
  4020  0E03  00D2               	movwf	_Status^(0+256)	;volatile
  4021  0E04                     l4677:	
  4022                           
  4023                           ;klondike.c: 188: }
  4024                           ;klondike.c: 190: if(++SlowTick == 0) {
  4025  0E04  0FB4               	incfsz	_SlowTick^(0+256),f
  4026  0E05  0008               	return
  4027                           
  4028                           ;klondike.c: 191: LATAbits.LATA5 = 0;;
  4029  0E06  128C               	bcf	12,5	;volatile
  4030                           
  4031                           ;klondike.c: 192: Status.Temp = ADRESH;
  4032  0E07  0021               	movlb	1	; select bank1
  4033  0E08  081C               	movf	28,w	;volatile
  4034  0E09  0022               	movlb	2	; select bank2
  4035  0E0A  00D7               	movwf	(_Status^(0+256)+5)	;volatile
  4036                           
  4037                           ;klondike.c: 194: ADCON0bits.GO_nDONE = 1;
  4038  0E0B  0021               	movlb	1	; select bank1
  4039  0E0C  149D               	bsf	29,1	;volatile
  4040  0E0D  0008               	return
  4041  0E0E                     __end_of_WorkTick:	
  4042  0E0E                     __ptext1938:	
  4043 ;; *************** function _UserInit *****************
  4044 ;; Defined at:
  4045 ;;		line 170 in file "main.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;		None
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;		None
  4050 ;; Return value:  Size  Location     Type
  4051 ;;		None               void
  4052 ;; Registers used:
  4053 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4054 ;; Tracked objects:
  4055 ;;		On entry : 17F/1
  4056 ;;		On exit  : 17F/2
  4057 ;;		Unchanged: FFE80/0
  4058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4063 ;;Total ram usage:        0 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; Hardware stack levels required when called:    6
  4066 ;; This function calls:
  4067 ;;		_InitTempSensor
  4068 ;;		_InitFAN
  4069 ;;		_InitWorkTick
  4070 ;;		_InitResultRx
  4071 ;;		_DetectAsics
  4072 ;; This function is called by:
  4073 ;;		_InitializeSystem
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           
  4078                           ;psect for function _UserInit
  4079  0E0E                     _UserInit:	
  4080                           
  4081                           ;main.c: 171: TRISAbits.TRISA5 = 0; LATAbits.LATA5 = 1;;
  4082                           
  4083                           ; Regs used in _UserInit: [wreg+fsr1l-status,0+pclath+cstack]
  4084  0E0E  128C               	bcf	12,5	;volatile
  4085  0E0F  0022               	movlb	2	; select bank2
  4086  0E10  168C               	bsf	12,5	;volatile
  4087                           
  4088                           ;main.c: 172: InitTempSensor();
  4089  0E11  261A  3188         	fcall	_InitTempSensor
  4090                           
  4091                           ;main.c: 173: InitFAN();
  4092  0E13  2723  3188         	fcall	_InitFAN
  4093                           
  4094                           ;main.c: 174: InitWorkTick();
  4095  0E15  270D  3188         	fcall	_InitWorkTick
  4096                           
  4097                           ;main.c: 176: InitResultRx();
  4098  0E17  273B  3188         	fcall	_InitResultRx
  4099                           
  4100                           ;main.c: 177: DetectAsics();
  4101  0E19  2F4C               	ljmp	l6233
  4102  0E1A                     __end_of_UserInit:	
  4103  0E1A                     __ptext1941:	
  4104 ;; *************** function _InitTempSensor *****************
  4105 ;; Defined at:
  4106 ;;		line 267 in file "klondike.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;		None
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;		None
  4111 ;; Return value:  Size  Location     Type
  4112 ;;		None               void
  4113 ;; Registers used:
  4114 ;;		wreg, status,2, status,0
  4115 ;; Tracked objects:
  4116 ;;		On entry : 17F/2
  4117 ;;		On exit  : 17F/1
  4118 ;;		Unchanged: FFE80/0
  4119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4124 ;;Total ram usage:        0 bytes
  4125 ;; Hardware stack levels used:    1
  4126 ;; Hardware stack levels required when called:    4
  4127 ;; This function calls:
  4128 ;;		Nothing
  4129 ;; This function is called by:
  4130 ;;		_UserInit
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           
  4135                           ;psect for function _InitTempSensor
  4136  0E1A                     _InitTempSensor:	
  4137                           
  4138                           ;klondike.c: 268: TRISCbits.TRISC2=1;
  4139                           
  4140                           ; Regs used in _InitTempSensor: [wreg+status,2+status,0]
  4141  0E1A  0021               	movlb	1	; select bank1
  4142  0E1B  150E               	bsf	14,2	;volatile
  4143                           
  4144                           ;klondike.c: 271: ADCON0bits.CHS = 6;
  4145  0E1C  081D               	movf	29,w	;volatile
  4146  0E1D  3983               	andlw	-125
  4147  0E1E  3818               	iorlw	24
  4148  0E1F  009D               	movwf	29	;volatile
  4149                           
  4150                           ;klondike.c: 272: ADCON0bits.ADON = 1;
  4151  0E20  141D               	bsf	29,0	;volatile
  4152                           
  4153                           ;klondike.c: 273: ADCON1bits.ADFM = 0;
  4154  0E21  139E               	bcf	30,7	;volatile
  4155                           
  4156                           ;klondike.c: 274: ADCON1bits.ADCS = 6;
  4157  0E22  081E               	movf	30,w	;volatile
  4158  0E23  398F               	andlw	-113
  4159  0E24  3860               	iorlw	96
  4160  0E25  009E               	movwf	30	;volatile
  4161                           
  4162                           ;klondike.c: 275: ADCON1bits.ADPREF = 0;
  4163  0E26  30FC               	movlw	-4
  4164  0E27  059E               	andwf	30,f	;volatile
  4165                           
  4166                           ;klondike.c: 276: ADCON2bits.TRIGSEL = 0;
  4167  0E28  308F               	movlw	-113
  4168  0E29  059F               	andwf	31,f	;volatile
  4169  0E2A  0008               	return
  4170  0E2B                     __end_of_InitTempSensor:	
  4171  0E2B                     PL2:	
  4172  0E2B  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4173  0E2C  0086               	movwf	6
  4174  0E2D  0187               	clrf	7
  4175  0E2E  3F40               	moviw [0]fsr1
  4176  0E2F  0021               	movlb	1	; select bank1
  4177  0E30  00A0               	movwf	??_AsicPreCalc^(0+128)
  4178  0E31  3F41               	moviw [1]fsr1
  4179  0E32  00A1               	movwf	(??_AsicPreCalc^(0+128)+1)
  4180  0E33  3F42               	moviw [2]fsr1
  4181  0E34  00A2               	movwf	(??_AsicPreCalc^(0+128)+2)
  4182  0E35  3F43               	moviw [3]fsr1
  4183  0E36  00A3               	movwf	(??_AsicPreCalc^(0+128)+3)
  4184  0E37  30FC               	movlw	-4
  4185  0E38  0020               	movlb	0	; select bank0
  4186  0E39  00D6               	movwf	?___bmul
  4187  0E3A  0021               	movlb	1	; select bank1
  4188  0E3B  0860               	movf	AsicPreCalc@n^(0+128),w
  4189  0E3C  0008               	return
  4190  0E3D                     __end_ofPL2:	
  4191  0E3D                     PL4:	
  4192  0E3D  0086               	movwf	6
  4193  0E3E  0187               	clrf	7
  4194  0E3F  3F40               	moviw [0]fsr1
  4195  0E40  0021               	movlb	1	; select bank1
  4196  0E41  00A0               	movwf	??_AsicPreCalc^(0+128)
  4197  0E42  3F41               	moviw [1]fsr1
  4198  0E43  00A1               	movwf	(??_AsicPreCalc^(0+128)+1)
  4199  0E44  3F42               	moviw [2]fsr1
  4200  0E45  00A2               	movwf	(??_AsicPreCalc^(0+128)+2)
  4201  0E46  3F43               	moviw [3]fsr1
  4202  0E47  00A3               	movwf	(??_AsicPreCalc^(0+128)+3)
  4203  0E48  0820               	movf	??_AsicPreCalc^(0+128),w
  4204  0E49  0008               	return
  4205  0E4A                     __end_ofPL4:	
  4206  0E4A                     PL6:	
  4207  0E4A  00A0               	movwf	??_AsicPreCalc^(0+128)
  4208  0E4B  3F41               	moviw [1]fsr1
  4209  0E4C  00A1               	movwf	(??_AsicPreCalc^(0+128)+1)
  4210  0E4D  3F42               	moviw [2]fsr1
  4211  0E4E  00A2               	movwf	(??_AsicPreCalc^(0+128)+2)
  4212  0E4F  3F43               	moviw [3]fsr1
  4213  0E50  00A3               	movwf	(??_AsicPreCalc^(0+128)+3)
  4214  0E51  0008               	return
  4215  0E52                     __end_ofPL6:	
  4216  0E52                     PL8:	
  4217  0E52  30FC               	movlw	-4
  4218  0E53  0020               	movlb	0	; select bank0
  4219  0E54  00D6               	movwf	?___bmul
  4220  0E55  0021               	movlb	1	; select bank1
  4221  0E56  0860               	movf	AsicPreCalc@n^(0+128),w
  4222  0E57  0008               	return
  4223  0E58                     __end_ofPL8:	
  4224  0E58                     PL10:	
  4225  0E58  085C               	movf	?_rotate+3,w
  4226  0E59  0021               	movlb	1	; select bank1
  4227  0E5A  00DB               	movwf	(AsicPreCalc@y+3)^(0+128)
  4228  0E5B  0020               	movlb	0	; select bank0
  4229  0E5C  085B               	movf	?_rotate+2,w
  4230  0E5D  0021               	movlb	1	; select bank1
  4231  0E5E  00DA               	movwf	(AsicPreCalc@y+2)^(0+128)
  4232  0E5F  0020               	movlb	0	; select bank0
  4233  0E60  085A               	movf	?_rotate+1,w
  4234  0E61  0021               	movlb	1	; select bank1
  4235  0E62  00D9               	movwf	(AsicPreCalc@y+1)^(0+128)
  4236  0E63  0020               	movlb	0	; select bank0
  4237  0E64  0859               	movf	?_rotate,w
  4238  0E65  0021               	movlb	1	; select bank1
  4239  0E66  00D8               	movwf	AsicPreCalc@y^(0+128)
  4240  0E67  0008               	return
  4241  0E68                     __end_ofPL10:	
  4242  0E68                     PL12:	
  4243  0E68  00D9               	movwf	?_rotate
  4244  0E69  3F41               	moviw [1]fsr1
  4245  0E6A  00DA               	movwf	?_rotate+1
  4246  0E6B  3F42               	moviw [2]fsr1
  4247  0E6C  00DB               	movwf	?_rotate+2
  4248  0E6D  3F43               	moviw [3]fsr1
  4249  0E6E  00DC               	movwf	?_rotate+3
  4250  0E6F  0008               	return
  4251  0E70                     __end_ofPL12:	
  4252  0E70                     PL14:	
  4253  0E70  3E10               	addlw	16
  4254  0E71  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4255  0E72  0086               	movwf	6
  4256  0E73  0187               	clrf	7
  4257  0E74  3F40               	moviw [0]fsr1
  4258  0E75  0008               	return
  4259  0E76                     __end_ofPL14:	
  4260  0E76                     PL16:	
  4261  0E76  0021               	movlb	1	; select bank1
  4262  0E77  0820               	movf	??_AsicPreCalc^(0+128),w
  4263  0E78  3FC0               	movwi [0]fsr1
  4264  0E79  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  4265  0E7A  3FC1               	movwi [1]fsr1
  4266  0E7B  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  4267  0E7C  3FC2               	movwi [2]fsr1
  4268  0E7D  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  4269  0E7E  3FC3               	movwi [3]fsr1
  4270  0E7F  0008               	return
  4271  0E80                     __end_ofPL16:	
  4272  0E80                     PL18:	
  4273  0E80  0860               	movf	AsicPreCalc@n^(0+128),w
  4274  0E81  00A0               	movwf	??_AsicPreCalc^(0+128)
  4275  0E82  01A1               	clrf	(??_AsicPreCalc^(0+128)+1)
  4276  0E83  35A0               	lslf	??_AsicPreCalc^(0+128),f
  4277  0E84  0DA1               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4278  0E85  35A0               	lslf	??_AsicPreCalc^(0+128),f
  4279  0E86  0DA1               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4280  0E87  0820               	movf	??_AsicPreCalc^(0+128),w
  4281  0E88  0020               	movlb	0	; select bank0
  4282  0E89  0766               	addwf	AsicPreCalc@work,w
  4283  0E8A  0021               	movlb	1	; select bank1
  4284  0E8B  00A2               	movwf	(??_AsicPreCalc+2)^(0+128)
  4285  0E8C  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  4286  0E8D  0020               	movlb	0	; select bank0
  4287  0E8E  3D67               	addwfc	AsicPreCalc@work+1,w
  4288  0E8F  0021               	movlb	1	; select bank1
  4289  0E90  00A3               	movwf	(??_AsicPreCalc+3)^(0+128)
  4290  0E91  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  4291  0E92  0008               	return
  4292  0E93                     __end_ofPL18:	
  4293  0E93                     PL20:	
  4294  0E93  0860               	movf	AsicPreCalc@n^(0+128),w
  4295  0E94  3C00               	sublw	0
  4296  0E95  3907               	andlw	7
  4297  0E96  0709               	addwf	9,w
  4298  0E97  0709               	addwf	9,w
  4299  0E98  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4300  0E99  0086               	movwf	6
  4301  0E9A  0008               	return
  4302  0E9B                     __end_ofPL20:	
  4303  0E9B                     PL22:	
  4304  0E9B  0021               	movlb	1	; select bank1
  4305  0E9C  086E               	movf	_WorkNow^(0+128),w
  4306  0E9D  0020               	movlb	0	; select bank0
  4307  0E9E  00D6               	movwf	?___wmul
  4308  0E9F  302D               	movlw	45
  4309  0EA0  01D7               	clrf	?___wmul+1
  4310  0EA1  00D8               	movwf	?___wmul+2
  4311  0EA2  01D9               	clrf	?___wmul+3
  4312  0EA3  0008               	return
  4313  0EA4                     __end_ofPL22:	
  4314  0EA4                     PL28:	
  4315  0EA4  085C               	movf	?_rotate+3,w
  4316  0EA5  0021               	movlb	1	; select bank1
  4317  0EA6  00DF               	movwf	(AsicPreCalc@x+3)^(0+128)
  4318  0EA7  0020               	movlb	0	; select bank0
  4319  0EA8  085B               	movf	?_rotate+2,w
  4320  0EA9  0021               	movlb	1	; select bank1
  4321  0EAA  00DE               	movwf	(AsicPreCalc@x+2)^(0+128)
  4322  0EAB  0020               	movlb	0	; select bank0
  4323  0EAC  085A               	movf	?_rotate+1,w
  4324  0EAD  0021               	movlb	1	; select bank1
  4325  0EAE  00DD               	movwf	(AsicPreCalc@x+1)^(0+128)
  4326  0EAF  0020               	movlb	0	; select bank0
  4327  0EB0  0859               	movf	?_rotate,w
  4328  0EB1  0021               	movlb	1	; select bank1
  4329  0EB2  00DC               	movwf	AsicPreCalc@x^(0+128)
  4330  0EB3  0008               	return
  4331  0EB4                     __end_ofPL28:	
  4332  0EB4                     PL30:	
  4333  0EB4  3907               	andlw	7
  4334  0EB5  0709               	addwf	9,w
  4335  0EB6  0709               	addwf	9,w
  4336  0EB7  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4337  0EB8  0086               	movwf	6
  4338  0EB9  0008               	return
  4339  0EBA                     __end_ofPL30:	
  4340  0EBA                     PL32:	
  4341  0EBA  3F40               	moviw [0]fsr1
  4342  0EBB  00A4               	movwf	(??_AsicPreCalc+4)^(0+128)
  4343  0EBC  3F41               	moviw [1]fsr1
  4344  0EBD  00A5               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  4345  0EBE  3F42               	moviw [2]fsr1
  4346  0EBF  00A6               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  4347  0EC0  3F43               	moviw [3]fsr1
  4348  0EC1  00A7               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  4349  0EC2  0008               	return
  4350  0EC3                     __end_ofPL32:	
  4351  0EC3                     PL34:	
  4352  0EC3  0020               	movlb	0	; select bank0
  4353  0EC4  00E6               	movwf	?_AsicPreCalc
  4354  0EC5  3023               	movlw	35
  4355  0EC6  00E7               	movwf	?_AsicPreCalc+1
  4356  0EC7  0008               	return
  4357  0EC8                     __end_ofPL34:	
  4358  0EC8                     PL38:	
  4359  0EC8  07DC               	addwf	AsicPreCalc@x^(0+128),f
  4360  0EC9  3F41               	moviw [1]fsr1
  4361  0ECA  3DDD               	addwfc	(AsicPreCalc@x+1)^(0+128),f
  4362  0ECB  3F42               	moviw [2]fsr1
  4363  0ECC  3DDE               	addwfc	(AsicPreCalc@x+2)^(0+128),f
  4364  0ECD  3F43               	moviw [3]fsr1
  4365  0ECE  3DDF               	addwfc	(AsicPreCalc@x+3)^(0+128),f
  4366  0ECF  0008               	return
  4367  0ED0                     __end_ofPL38:	
  4368  0ED0                     PL44:	
  4369  0ED0  06D8               	xorwf	AsicPreCalc@y^(0+128),f
  4370  0ED1  085D               	movf	(AsicPreCalc@x+1)^(0+128),w
  4371  0ED2  06D9               	xorwf	(AsicPreCalc@y+1)^(0+128),f
  4372  0ED3  085E               	movf	(AsicPreCalc@x+2)^(0+128),w
  4373  0ED4  06DA               	xorwf	(AsicPreCalc@y+2)^(0+128),f
  4374  0ED5  085F               	movf	(AsicPreCalc@x+3)^(0+128),w
  4375  0ED6  06DB               	xorwf	(AsicPreCalc@y+3)^(0+128),f
  4376  0ED7  0008               	return
  4377  0ED8                     __end_ofPL44:	
  4378  0ED8                     PL46:	
  4379  0ED8  0020               	movlb	0	; select bank0
  4380  0ED9  085D               	movf	SendAsicData@work+1,w
  4381  0EDA  0022               	movlb	2	; select bank2
  4382  0EDB  00AF               	movwf	(_send32_data+1)^(0+256)
  4383  0EDC  0020               	movlb	0	; select bank0
  4384  0EDD  085C               	movf	SendAsicData@work,w
  4385  0EDE  0022               	movlb	2	; select bank2
  4386  0EDF  00AE               	movwf	_send32_data^(0+256)
  4387  0EE0  0008               	return
  4388  0EE1                     __end_ofPL46:	
  4389  0EE1                     PL48:	
  4390  0EE1  06B4               	xorwf	AsicPreCalc@z^(0+128),f
  4391  0EE2  0859               	movf	(AsicPreCalc@y+1)^(0+128),w
  4392  0EE3  06B5               	xorwf	(AsicPreCalc@z+1)^(0+128),f
  4393  0EE4  085A               	movf	(AsicPreCalc@y+2)^(0+128),w
  4394  0EE5  06B6               	xorwf	(AsicPreCalc@z+2)^(0+128),f
  4395  0EE6  085B               	movf	(AsicPreCalc@y+3)^(0+128),w
  4396  0EE7  06B7               	xorwf	(AsicPreCalc@z+3)^(0+128),f
  4397  0EE8  0008               	return
  4398  0EE9                     __end_ofPL48:	
  4399  0EE9                     PL52:	
  4400  0EE9  05DC               	andwf	AsicPreCalc@x^(0+128),f
  4401  0EEA  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  4402  0EEB  05DD               	andwf	(AsicPreCalc@x+1)^(0+128),f
  4403  0EEC  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  4404  0EED  05DE               	andwf	(AsicPreCalc@x+2)^(0+128),f
  4405  0EEE  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  4406  0EEF  05DF               	andwf	(AsicPreCalc@x+3)^(0+128),f
  4407  0EF0  0008               	return
  4408  0EF1                     __end_ofPL52:	
  4409  0EF1                     PL54:	
  4410  0EF1  0866               	movf	ProcessCmd@cmd^(0+128),w
  4411  0EF2  3E02               	addlw	2
  4412  0EF3  0086               	movwf	6
  4413  0EF4  3002               	movlw	2	; select bank4/5
  4414  0EF5  0087               	movwf	7
  4415  0EF6  0008               	return
  4416  0EF7                     __end_ofPL54:	
  4417  0EF7                     PL56:	
  4418  0EF7  0866               	movf	ProcessCmd@cmd^(0+128),w
  4419  0EF8  0020               	movlb	0	; select bank0
  4420  0EF9  00DC               	movwf	?_SendCmdReply
  4421  0EFA  3002               	movlw	2
  4422  0EFB  00DD               	movwf	?_SendCmdReply+1
  4423  0EFC  0008               	return
  4424  0EFD                     __end_ofPL56:	
  4425  0EFD                     PL62:	
  4426  0EFD  3E1C               	addlw	28
  4427  0EFE  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4428  0EFF  0086               	movwf	6
  4429  0F00  0187               	clrf	7
  4430  0F01  0008               	return
  4431  0F02                     __end_ofPL62:	
  4432  0F02                     PL64:	
  4433  0F02  0856               	movf	?___wmul,w
  4434  0F03  00E8               	movwf	??_AsicPushWork
  4435  0F04  0857               	movf	?___wmul+1,w
  4436  0F05  00E9               	movwf	??_AsicPushWork+1
  4437  0F06  0868               	movf	??_AsicPushWork,w
  4438  0F07  0008               	return
  4439  0F08                     __end_ofPL64:	
  4440  0F08                     PL68:	
  4441  0F08  35DF               	lslf	_ClockCfg^(0+256),f
  4442  0F09  0DE0               	rlf	(_ClockCfg+1)^(0+256),f
  4443  0F0A  0DE1               	rlf	(_ClockCfg+2)^(0+256),f
  4444  0F0B  0DE2               	rlf	(_ClockCfg+3)^(0+256),f
  4445  0F0C  0008               	return
  4446  0F0D                     __end_ofPL68:	
  4447  0F0D                     __ptext1942:	
  4448 ;; *************** function _InitWorkTick *****************
  4449 ;; Defined at:
  4450 ;;		line 280 in file "klondike.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;		None
  4455 ;; Return value:  Size  Location     Type
  4456 ;;		None               void
  4457 ;; Registers used:
  4458 ;;		wreg, status,2, status,0
  4459 ;; Tracked objects:
  4460 ;;		On entry : 17F/C
  4461 ;;		On exit  : 17F/2
  4462 ;;		Unchanged: FFE80/0
  4463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4468 ;;Total ram usage:        0 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:    4
  4471 ;; This function calls:
  4472 ;;		Nothing
  4473 ;; This function is called by:
  4474 ;;		_UserInit
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           
  4479                           ;psect for function _InitWorkTick
  4480  0F0D                     _InitWorkTick:	
  4481                           
  4482                           ;klondike.c: 281: TMR0CS = 0;
  4483                           
  4484                           ; Regs used in _InitWorkTick: [wreg+status,2+status,0]
  4485  0F0D  0021               	movlb	1	; select bank1
  4486  0F0E  1295               	bcf	21,5	;volatile
  4487                           
  4488                           ;klondike.c: 282: OPTION_REGbits.PSA = 0;
  4489  0F0F  1195               	bcf	21,3	;volatile
  4490                           
  4491                           ;klondike.c: 283: OPTION_REGbits.PS = 7;
  4492  0F10  3007               	movlw	7
  4493  0F11  0495               	iorwf	21,f	;volatile
  4494                           
  4495                           ;klondike.c: 284: TMR0 = HashTime;
  4496  0F12  0022               	movlb	2	; select bank2
  4497  0F13  0851               	movf	_HashTime^(0+256),w
  4498  0F14  0020               	movlb	0	; select bank0
  4499  0F15  0095               	movwf	21	;volatile
  4500                           
  4501                           ;klondike.c: 287: TRISCbits.TRISC7 = 0;
  4502  0F16  0021               	movlb	1	; select bank1
  4503  0F17  138E               	bcf	14,7	;volatile
  4504                           
  4505                           ;klondike.c: 288: TRISCbits.TRISC6 = 0;
  4506  0F18  130E               	bcf	14,6	;volatile
  4507                           
  4508                           ;klondike.c: 289: TRISCbits.TRISC4 = 0;
  4509  0F19  120E               	bcf	14,4	;volatile
  4510                           
  4511                           ;klondike.c: 290: TRISCbits.TRISC3 = 0;
  4512  0F1A  118E               	bcf	14,3	;volatile
  4513                           
  4514                           ;klondike.c: 291: LATC = 0xD8;;
  4515  0F1B  30D8               	movlw	216
  4516  0F1C  0022               	movlb	2	; select bank2
  4517  0F1D  008E               	movwf	14	;volatile
  4518                           
  4519                           ;klondike.c: 292: TRISAbits.TRISA4 = 0;
  4520  0F1E  0021               	movlb	1	; select bank1
  4521  0F1F  120C               	bcf	12,4	;volatile
  4522                           
  4523                           ;klondike.c: 293: LATAbits.LATA4 = 1;
  4524  0F20  0022               	movlb	2	; select bank2
  4525  0F21  160C               	bsf	12,4	;volatile
  4526  0F22  0008               	return
  4527  0F23                     __end_of_InitWorkTick:	
  4528  0F23                     __ptext1940:	
  4529 ;; *************** function _InitFAN *****************
  4530 ;; Defined at:
  4531 ;;		line 247 in file "klondike.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;		None
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;		None
  4536 ;; Return value:  Size  Location     Type
  4537 ;;		None               void
  4538 ;; Registers used:
  4539 ;;		wreg, status,2, status,0
  4540 ;; Tracked objects:
  4541 ;;		On entry : 17F/1
  4542 ;;		On exit  : 17F/C
  4543 ;;		Unchanged: FFE80/0
  4544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4549 ;;Total ram usage:        0 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:    4
  4552 ;; This function calls:
  4553 ;;		Nothing
  4554 ;; This function is called by:
  4555 ;;		_UserInit
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           
  4560                           ;psect for function _InitFAN
  4561  0F23                     _InitFAN:	
  4562                           
  4563                           ;klondike.c: 248: TRISCbits.TRISC5 = 1;
  4564                           
  4565                           ; Regs used in _InitFAN: [wreg+status,2+status,0]
  4566  0F23  168E               	bsf	14,5	;volatile
  4567                           
  4568                           ;klondike.c: 249: PWM1CON = 0;
  4569  0F24  002C               	movlb	12	; select bank12
  4570  0F25  0193               	clrf	19	;volatile
  4571                           
  4572                           ;klondike.c: 250: PR2 = 0xFF;
  4573  0F26  30FF               	movlw	255
  4574  0F27  0020               	movlb	0	; select bank0
  4575  0F28  009B               	movwf	27	;volatile
  4576                           
  4577                           ;klondike.c: 251: PWM1CON = 0xC0;
  4578  0F29  30C0               	movlw	192
  4579  0F2A  002C               	movlb	12	; select bank12
  4580  0F2B  0093               	movwf	19	;volatile
  4581                           
  4582                           ;klondike.c: 252: PWM1DCH = 230;
  4583  0F2C  30E6               	movlw	230
  4584  0F2D  0092               	movwf	18	;volatile
  4585                           
  4586                           ;klondike.c: 253: PWM1DCL = 0;
  4587  0F2E  0191               	clrf	17	;volatile
  4588                           
  4589                           ;klondike.c: 254: TMR2IF = 0;
  4590  0F2F  0020               	movlb	0	; select bank0
  4591  0F30  1091               	bcf	17,1	;volatile
  4592                           
  4593                           ;klondike.c: 255: T2CONbits.T2CKPS = 1;
  4594  0F31  081C               	movf	28,w	;volatile
  4595  0F32  39FC               	andlw	-4
  4596  0F33  3801               	iorlw	1
  4597  0F34  009C               	movwf	28	;volatile
  4598                           
  4599                           ;klondike.c: 256: TMR2ON = 1;
  4600  0F35  151C               	bsf	28,2	;volatile
  4601                           
  4602                           ;klondike.c: 257: TRISCbits.TRISC5 = 0;
  4603  0F36  0021               	movlb	1	; select bank1
  4604  0F37  128E               	bcf	14,5	;volatile
  4605                           
  4606                           ;klondike.c: 258: PWM1OE=1;
  4607  0F38  002C               	movlb	12	; select bank12
  4608  0F39  1713               	bsf	19,6	;volatile
  4609  0F3A  0008               	return
  4610  0F3B                     __end_of_InitFAN:	
  4611  0F3B                     __ptext1943:	
  4612 ;; *************** function _InitResultRx *****************
  4613 ;; Defined at:
  4614 ;;		line 297 in file "klondike.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;		None
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;		None
  4619 ;; Return value:  Size  Location     Type
  4620 ;;		None               void
  4621 ;; Registers used:
  4622 ;;		wreg, status,2
  4623 ;; Tracked objects:
  4624 ;;		On entry : 17F/2
  4625 ;;		On exit  : 17F/3
  4626 ;;		Unchanged: FFE80/0
  4627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4632 ;;Total ram usage:        0 bytes
  4633 ;; Hardware stack levels used:    1
  4634 ;; Hardware stack levels required when called:    4
  4635 ;; This function calls:
  4636 ;;		Nothing
  4637 ;; This function is called by:
  4638 ;;		_UserInit
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           
  4643                           ;psect for function _InitResultRx
  4644  0F3B                     _InitResultRx:	
  4645                           
  4646                           ;klondike.c: 298: ResultQC = 0;
  4647                           
  4648                           ; Regs used in _InitResultRx: [wreg+status,2]
  4649  0F3B  01B2               	clrf	_ResultQC^(0+256)
  4650                           
  4651                           ;klondike.c: 299: TXSTAbits.SYNC = 1;
  4652  0F3C  0023               	movlb	3	; select bank3
  4653  0F3D  161E               	bsf	30,4	;volatile
  4654                           
  4655                           ;klondike.c: 300: RCSTAbits.SPEN = 1;
  4656  0F3E  179D               	bsf	29,7	;volatile
  4657                           
  4658                           ;klondike.c: 301: TXSTAbits.CSRC = 0;
  4659  0F3F  139E               	bcf	30,7	;volatile
  4660                           
  4661                           ;klondike.c: 302: BAUDCONbits.SCKP = 0;
  4662  0F40  121F               	bcf	31,4	;volatile
  4663                           
  4664                           ;klondike.c: 303: ANSELBbits.ANSB5 = 0;
  4665  0F41  128D               	bcf	13,5	;volatile
  4666                           
  4667                           ;klondike.c: 305: IOCBPbits.IOCBP7 = 1;
  4668  0F42  0027               	movlb	7	; select bank7
  4669  0F43  1794               	bsf	20,7	;volatile
  4670                           
  4671                           ;klondike.c: 306: INTCONbits.IOCIE = 1;
  4672  0F44  158B               	bsf	11,3	;volatile
  4673                           
  4674                           ;klondike.c: 307: IOCBF = 0;
  4675  0F45  0196               	clrf	22	;volatile
  4676                           
  4677                           ;klondike.c: 309: INTCONbits.GIE = 1;
  4678  0F46  178B               	bsf	11,7	;volatile
  4679                           
  4680                           ;klondike.c: 310: RCSTAbits.CREN = 1;
  4681  0F47  0023               	movlb	3	; select bank3
  4682  0F48  161D               	bsf	29,4	;volatile
  4683                           
  4684                           ;klondike.c: 311: RCREG = 0xFF;
  4685  0F49  30FF               	movlw	255
  4686  0F4A  0099               	movwf	25	;volatile
  4687  0F4B  0008               	return
  4688  0F4C                     __end_of_InitResultRx:	
  4689  0F4C                     __ptext1939:	
  4690 ;; *************** function _DetectAsics *****************
  4691 ;; Defined at:
  4692 ;;		line 144 in file "klondike.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;		None
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;  x               1   22[BANK0 ] unsigned char 
  4697 ;; Return value:  Size  Location     Type
  4698 ;;		None               void
  4699 ;; Registers used:
  4700 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4701 ;; Tracked objects:
  4702 ;;		On entry : 17F/3
  4703 ;;		On exit  : 17F/2
  4704 ;;		Unchanged: FFE80/0
  4705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4707 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4708 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4709 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4710 ;;Total ram usage:        9 bytes
  4711 ;; Hardware stack levels used:    1
  4712 ;; Hardware stack levels required when called:    5
  4713 ;; This function calls:
  4714 ;;		___awdiv
  4715 ;; This function is called by:
  4716 ;;		_UserInit
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           
  4721                           ;psect for function _DetectAsics
  4722  0F4C                     _DetectAsics:	
  4723  0F4C                     l6233:	
  4724                           ; Regs used in _DetectAsics: [wreg+fsr1l-status,0+pclath+cstack]
  4725                           
  4726                           
  4727                           ;klondike.c: 159: Status.ChipCount = 4;
  4728  0F4C  3004               	movlw	4
  4729  0F4D  0022               	movlb	2	; select bank2
  4730  0F4E  00D3               	movwf	(_Status^(0+256)+1)	;volatile
  4731                           
  4732                           ;klondike.c: 162: BankSize = (Status.ChipCount+1)/2;
  4733  0F4F  3002               	movlw	2
  4734  0F50  0020               	movlb	0	; select bank0
  4735  0F51  00D6               	movwf	?___awdiv
  4736  0F52  01D7               	clrf	?___awdiv+1
  4737  0F53  0022               	movlb	2	; select bank2
  4738  0F54  0853               	movf	(_Status^(0+256)+1),w	;volatile
  4739  0F55  3E01               	addlw	1
  4740  0F56  0020               	movlb	0	; select bank0
  4741  0F57  00D8               	movwf	?___awdiv+2
  4742  0F58  3000               	movlw	0
  4743  0F59  1803               	skipnc
  4744  0F5A  3001               	movlw	1
  4745  0F5B  00D9               	movwf	?___awdiv+3
  4746  0F5C  27C0  3188         	fcall	___awdiv
  4747  0F5E  0856               	movf	?___awdiv,w
  4748  0F5F  0022               	movlb	2	; select bank2
  4749  0F60  00ED               	movwf	_BankSize^(0+256)
  4750                           
  4751                           ;klondike.c: 163: Status.MaxCount = 16384 / BankSize;
  4752  0F61  0020               	movlb	0	; select bank0
  4753  0F62  00D6               	movwf	?___awdiv
  4754  0F63  3040               	movlw	64
  4755  0F64  01D7               	clrf	?___awdiv+1
  4756  0F65  01D8               	clrf	?___awdiv+2
  4757  0F66  00D9               	movwf	?___awdiv+3
  4758  0F67  27C0  3188         	fcall	___awdiv
  4759  0F69  0857               	movf	?___awdiv+1,w
  4760  0F6A  0022               	movlb	2	; select bank2
  4761  0F6B  00DD               	movwf	((_Status+1)^(0+256)+10)	;volatile
  4762  0F6C  0020               	movlb	0	; select bank0
  4763  0F6D  0856               	movf	?___awdiv,w
  4764  0F6E  0022               	movlb	2	; select bank2
  4765  0F6F  00DC               	movwf	(_Status^(0+256)+10)	;volatile
  4766                           
  4767                           ;klondike.c: 164: NonceRanges[0] = 0;
  4768  0F70  0023               	movlb	3	; select bank3
  4769  0F71  01A0               	clrf	_NonceRanges^(0+384)
  4770  0F72  01A1               	clrf	(_NonceRanges+1)^(0+384)
  4771  0F73  01A2               	clrf	(_NonceRanges+2)^(0+384)
  4772  0F74  01A3               	clrf	(_NonceRanges+3)^(0+384)
  4773                           
  4774                           ;klondike.c: 165: for(BYTE x = 1; x < BankSize; x++)
  4775  0F75  0020               	movlb	0	; select bank0
  4776  0F76  01E6               	clrf	DetectAsics@x
  4777  0F77                     l6245:	
  4778  0F77  0AE6               	incf	DetectAsics@x,f
  4779  0F78  0022               	movlb	2	; select bank2
  4780  0F79  086D               	movf	_BankSize^(0+256),w
  4781  0F7A  0020               	movlb	0	; select bank0
  4782  0F7B  0266               	subwf	DetectAsics@x,w
  4783  0F7C  1803               	btfsc	3,0
  4784  0F7D  2FBA               	goto	l6249
  4785                           
  4786                           ;klondike.c: 166: NonceRanges[x] = NonceRanges[x-1] + 2*BankRanges[BankSize-1];
  4787  0F7E  0866               	movf	DetectAsics@x,w
  4788  0F7F  0709               	addwf	9,w
  4789  0F80  0709               	addwf	9,w
  4790  0F81  3E9C               	addlw	(_NonceRanges+252)& (0+255)
  4791  0F82  0086               	movwf	6
  4792  0F83  3001               	movlw	1	; select bank3/4
  4793  0F84  0087               	movwf	7
  4794  0F85  3F40               	moviw [0]fsr1
  4795  0F86  00DE               	movwf	??_DetectAsics
  4796  0F87  3F41               	moviw [1]fsr1
  4797  0F88  00DF               	movwf	??_DetectAsics+1
  4798  0F89  3F42               	moviw [2]fsr1
  4799  0F8A  00E0               	movwf	??_DetectAsics+2
  4800  0F8B  3F43               	moviw [3]fsr1
  4801  0F8C  00E1               	movwf	??_DetectAsics+3
  4802  0F8D  0022               	movlb	2	; select bank2
  4803  0F8E  086D               	movf	_BankSize^(0+256),w
  4804  0F8F  0709               	addwf	9,w
  4805  0F90  0709               	addwf	9,w
  4806  0F91  3E1C               	addlw	(_BankRanges+252)& (0+255)
  4807  0F92  0086               	movwf	6
  4808  0F93  3003               	movlw	3	; select bank6/7
  4809  0F94  0087               	movwf	7
  4810  0F95  3F40               	moviw [0]fsr1
  4811  0F96  0020               	movlb	0	; select bank0
  4812  0F97  00E2               	movwf	??_DetectAsics+4
  4813  0F98  3F41               	moviw [1]fsr1
  4814  0F99  00E3               	movwf	??_DetectAsics+5
  4815  0F9A  3F42               	moviw [2]fsr1
  4816  0F9B  00E4               	movwf	??_DetectAsics+6
  4817  0F9C  3F43               	moviw [3]fsr1
  4818  0F9D  00E5               	movwf	??_DetectAsics+7
  4819  0F9E  35E2               	lslf	??_DetectAsics+4,f
  4820  0F9F  0DE3               	rlf	??_DetectAsics+5,f
  4821  0FA0  0DE4               	rlf	??_DetectAsics+6,f
  4822  0FA1  0DE5               	rlf	??_DetectAsics+7,f
  4823  0FA2  0862               	movf	??_DetectAsics+4,w
  4824  0FA3  07DE               	addwf	??_DetectAsics,f
  4825  0FA4  0863               	movf	??_DetectAsics+5,w
  4826  0FA5  3DDF               	addwfc	??_DetectAsics+1,f
  4827  0FA6  0864               	movf	??_DetectAsics+6,w
  4828  0FA7  3DE0               	addwfc	??_DetectAsics+2,f
  4829  0FA8  0865               	movf	??_DetectAsics+7,w
  4830  0FA9  3DE1               	addwfc	??_DetectAsics+3,f
  4831  0FAA  0866               	movf	DetectAsics@x,w
  4832  0FAB  0709               	addwf	9,w
  4833  0FAC  0709               	addwf	9,w
  4834  0FAD  3EA0               	addlw	_NonceRanges& (0+255)
  4835  0FAE  0086               	movwf	6
  4836  0FAF  3001               	movlw	1	; select bank3/4
  4837  0FB0  0087               	movwf	7
  4838  0FB1  085E               	movf	??_DetectAsics,w
  4839  0FB2  3FC0               	movwi [0]fsr1
  4840  0FB3  085F               	movf	??_DetectAsics+1,w
  4841  0FB4  3FC1               	movwi [1]fsr1
  4842  0FB5  0860               	movf	??_DetectAsics+2,w
  4843  0FB6  3FC2               	movwi [2]fsr1
  4844  0FB7  0861               	movf	??_DetectAsics+3,w
  4845  0FB8  3FC3               	movwi [3]fsr1
  4846  0FB9  2F77               	goto	l6245
  4847  0FBA                     l6249:	
  4848                           
  4849                           ;klondike.c: 167: Status.State ='R';
  4850  0FBA  3052               	movlw	82
  4851  0FBB  0022               	movlb	2	; select bank2
  4852  0FBC  00D2               	movwf	_Status^(0+256)	;volatile
  4853                           
  4854                           ;klondike.c: 168: Status.HashCount = 0;
  4855  0FBD  01DA               	clrf	(_Status^(0+256)+8)	;volatile
  4856  0FBE  01DB               	clrf	((_Status+1)^(0+256)+8)	;volatile
  4857  0FBF  0008               	return
  4858  0FC0                     __end_of_DetectAsics:	
  4859  0FC0                     __ptext1959:	
  4860 ;; *************** function ___awdiv *****************
  4861 ;; Defined at:
  4862 ;;		line 5 in file "/opt/microchip/xc8/v1.12/sources/awdiv.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;  divisor         2    6[BANK0 ] int 
  4865 ;;  dividend        2    8[BANK0 ] int 
  4866 ;; Auto vars:     Size  Location     Type
  4867 ;;  quotient        2   12[BANK0 ] int 
  4868 ;;  sign            1   11[BANK0 ] unsigned char 
  4869 ;;  counter         1   10[BANK0 ] unsigned char 
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  2    6[BANK0 ] int 
  4872 ;; Registers used:
  4873 ;;		wreg, status,2, status,0
  4874 ;; Tracked objects:
  4875 ;;		On entry : 17F/0
  4876 ;;		On exit  : 17F/0
  4877 ;;		Unchanged: FFE80/0
  4878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4879 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4880 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4883 ;;Total ram usage:        8 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; Hardware stack levels required when called:    4
  4886 ;; This function calls:
  4887 ;;		Nothing
  4888 ;; This function is called by:
  4889 ;;		_DetectAsics
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           
  4894                           ;psect for function ___awdiv
  4895  0FC0                     ___awdiv:	
  4896                           
  4897                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4898  0FC0  01DB               	clrf	___awdiv@sign
  4899  0FC1  1FD7               	btfss	___awdiv@divisor+1,7
  4900  0FC2  2FCA               	goto	l6465
  4901  0FC3  09D6               	comf	___awdiv@divisor,f
  4902  0FC4  09D7               	comf	___awdiv@divisor+1,f
  4903  0FC5  0AD6               	incf	___awdiv@divisor,f
  4904  0FC6  1903               	skipnz
  4905  0FC7  0AD7               	incf	___awdiv@divisor+1,f
  4906  0FC8  01DB               	clrf	___awdiv@sign
  4907  0FC9  0ADB               	incf	___awdiv@sign,f
  4908  0FCA                     l6465:	
  4909  0FCA  1FD9               	btfss	___awdiv@dividend+1,7
  4910  0FCB  2FD3               	goto	l6471
  4911  0FCC  09D8               	comf	___awdiv@dividend,f
  4912  0FCD  09D9               	comf	___awdiv@dividend+1,f
  4913  0FCE  0AD8               	incf	___awdiv@dividend,f
  4914  0FCF  1903               	skipnz
  4915  0FD0  0AD9               	incf	___awdiv@dividend+1,f
  4916  0FD1  3001               	movlw	1
  4917  0FD2  06DB               	xorwf	___awdiv@sign,f
  4918  0FD3                     l6471:	
  4919  0FD3  01DC               	clrf	___awdiv@quotient
  4920  0FD4  01DD               	clrf	___awdiv@quotient+1
  4921  0FD5  0857               	movf	___awdiv@divisor+1,w
  4922  0FD6  0456               	iorwf	___awdiv@divisor,w
  4923  0FD7  1903               	skipnz
  4924  0FD8  2FF3               	goto	l6493
  4925  0FD9  01DA               	clrf	___awdiv@counter
  4926  0FDA                     L18:	
  4927  0FDA  0ADA               	incf	___awdiv@counter,f
  4928  0FDB  1BD7               	btfsc	___awdiv@divisor+1,7
  4929  0FDC  2FE0               	goto	l6481
  4930  0FDD  35D6               	lslf	___awdiv@divisor,f
  4931  0FDE  0DD7               	rlf	___awdiv@divisor+1,f
  4932  0FDF  2FDA               	goto	L18
  4933  0FE0                     l6481:	
  4934  0FE0  35DC               	lslf	___awdiv@quotient,f
  4935  0FE1  0DDD               	rlf	___awdiv@quotient+1,f
  4936  0FE2  0857               	movf	___awdiv@divisor+1,w
  4937  0FE3  0259               	subwf	___awdiv@dividend+1,w
  4938  0FE4  1D03               	skipz
  4939  0FE5  2FE8               	goto	u5355
  4940  0FE6  0856               	movf	___awdiv@divisor,w
  4941  0FE7  0258               	subwf	___awdiv@dividend,w
  4942  0FE8                     u5355:	
  4943  0FE8  1C03               	skipc
  4944  0FE9  2FEF               	goto	l6489
  4945  0FEA  0856               	movf	___awdiv@divisor,w
  4946  0FEB  02D8               	subwf	___awdiv@dividend,f
  4947  0FEC  0857               	movf	___awdiv@divisor+1,w
  4948  0FED  3BD9               	subwfb	___awdiv@dividend+1,f
  4949  0FEE  145C               	bsf	___awdiv@quotient,0
  4950  0FEF                     l6489:	
  4951  0FEF  36D7               	lsrf	___awdiv@divisor+1,f
  4952  0FF0  0CD6               	rrf	___awdiv@divisor,f
  4953  0FF1  0BDA               	decfsz	___awdiv@counter,f
  4954  0FF2  2FE0               	goto	l6481
  4955  0FF3                     l6493:	
  4956  0FF3  085B               	movf	___awdiv@sign,w
  4957  0FF4  1903               	btfsc	3,2
  4958  0FF5  2FFB               	goto	l6497
  4959  0FF6  09DC               	comf	___awdiv@quotient,f
  4960  0FF7  09DD               	comf	___awdiv@quotient+1,f
  4961  0FF8  0ADC               	incf	___awdiv@quotient,f
  4962  0FF9  1903               	skipnz
  4963  0FFA  0ADD               	incf	___awdiv@quotient+1,f
  4964  0FFB                     l6497:	
  4965  0FFB  085D               	movf	___awdiv@quotient+1,w
  4966  0FFC  00D7               	movwf	?___awdiv+1
  4967  0FFD  085C               	movf	___awdiv@quotient,w
  4968  0FFE  00D6               	movwf	?___awdiv
  4969  0FFF  0008               	return
  4970  1000                     __end_of___awdiv:	
  4971                           
  4972                           	psect	bssBANK0
  4973  006A                     __pbssBANK0:	
  4974  006A                     _pBDTEntryIn:	
  4975  006A                     	ds	2
  4976  006C                     _USBDeferStatusStagePacket:	
  4977  006C                     	ds	1
  4978  006D                     _controlTransferState:	
  4979  006D                     	ds	1
  4980  006E                     _pBDTEntryEP0OutCurrent:	
  4981  006E                     	ds	1
  4982  006F                     _pBDTEntryEP0OutNext:	
  4983  006F                     	ds	1
  4984                           
  4985                           	psect	bssBANK1
  4986  00EB                     __pbssBANK1:	
  4987  00EB                     _USBDeviceState:	
  4988  00EB                     	ds	1
  4989  00EC                     _USBGenericOutHandle:	
  4990  00EC                     	ds	1
  4991  00ED                     _WQI:	
  4992  00ED                     	ds	1
  4993  00EE                     _WorkNow:	
  4994  00EE                     	ds	1
  4995  00EF                     _USTATcopy:	
  4996  00EF                     	ds	1
  4997                           
  4998                           	psect	bssBANK2
  4999  0120                     __pbssBANK2:	
  5000  0120                     _outPipes:	
  5001  0120                     	ds	6
  5002  0126                     _ep_data_in:	
  5003  0126                     	ds	2
  5004  0128                     _ep_data_out:	
  5005  0128                     	ds	2
  5006  012A                     _fwbuf:	
  5007  012A                     	ds	2
  5008  012C                     _pBDTEntryOut:	
  5009  012C                     	ds	2
  5010  012E                     _send32_data:	
  5011  012E                     	ds	2
  5012  0130                     _BothEP0OutUOWNsSet:	
  5013  0130                     	ds	1
  5014  0131                     _RemoteWakeup:	
  5015  0131                     	ds	1
  5016  0132                     _ResultQC:	
  5017  0132                     	ds	1
  5018  0133                     _SlaveAddress:	
  5019  0133                     	ds	1
  5020  0134                     _SlowTick:	
  5021  0134                     	ds	1
  5022  0135                     _USBDeferINDataStagePackets:	
  5023  0135                     	ds	1
  5024  0136                     _USBDeferOUTDataStagePackets:	
  5025  0136                     	ds	1
  5026  0137                     _USBGenericInHandle:	
  5027  0137                     	ds	1
  5028  0138                     _USBStatusStageEnabledFlag1:	
  5029  0138                     	ds	1
  5030  0139                     _USBStatusStageEnabledFlag2:	
  5031  0139                     	ds	1
  5032  013A                     _USBStatusStageTimeoutCounter:	
  5033  013A                     	ds	1
  5034  013B                     _WQX:	
  5035  013B                     	ds	1
  5036  013C                     _endpoint_number:	
  5037  013C                     	ds	1
  5038  013D                     _last_bit0:	
  5039  013D                     	ds	1
  5040  013E                     _last_bit1:	
  5041  013E                     	ds	1
  5042  013F                     _pDst:	
  5043  013F                     	ds	1
  5044  0140                     _send32_count:	
  5045  0140                     	ds	1
  5046  0141                     _shortPacketStatus:	
  5047  0141                     	ds	1
  5048  0142                     _ResultQue:	
  5049  0142                     	ds	8
  5050  014A                     _inPipes:	
  5051  014A                     	ds	5
  5052  014F                     _USBActiveConfiguration:	
  5053  014F                     	ds	1
  5054  0150                     _USBAlternateInterface:	
  5055  0150                     	ds	1
  5056                           
  5057                           	psect	dataBANK2
  5058  0151                     __pdataBANK2:	
  5059  0151                     _HashTime:	
  5060  0151                     	ds	1
  5061  0152                     _Status:	
  5062  0152                     	ds	13
  5063  015F                     _ClockCfg:	
  5064  015F                     	ds	8
  5065  0167                     _Cfg:	
  5066  0167                     	ds	6
  5067                           
  5068                           	psect	bssBANK3
  5069  01A0                     __pbssBANK3:	
  5070  01A0                     _NonceRanges:	
  5071  01A0                     	ds	32
  5072  01C0                     _PrecalcHashes:	
  5073  01C0                     	ds	24
  5074                           
  5075                           	psect	dataBANK3
  5076  01D8                     __pdataBANK3:	
  5077  01D8                     AsicPreCalc@F3349:	
  5078  01D8                     	ds	12
  5079                           
  5080                           	psect	dataBANK6
  5081  0320                     __pdataBANK6:	
  5082  0320                     _BankRanges:	
  5083  0320                     	ds	32
  5084                           
  5085                           	psect	clrtext
  5086  15ED                     clear_ram:	
  5087                           ;	Called with FSR0 containing the base address, and
  5088                           ;	btemp/btemp+1 has the size to clear
  5089                           
  5090  15ED  0064               	clrwdt	;clear the watchdog before getting into this loop
  5091  15EE                     clrloop:	
  5092  15EE  0180               	clrf	0	;clear RAM location pointed to by FSR
  5093  15EF  3101               	addfsr 0,1
  5094  15F0  3001               	movlw	1
  5095  15F1  02FE               	subwf	126,f
  5096  15F2  3000               	movlw	0
  5097  15F3  3BFF               	subwfb	127,f
  5098  15F4  087F               	movf	127,w
  5099  15F5  047E               	iorwf	126,w
  5100  15F6  1903               	btfsc	3,2
  5101  15F7  3400               	retlw	0	;all done for this memory range, return
  5102  15F8  2DEE               	goto	clrloop	;have we reached the end yet?
  5103                           
  5104                           	psect	inittext
  5105  15E1                     init_ram:	
  5106  15E1  00FE               	movwf	126
  5107  15E2                     initloop:	
  5108  15E2  0012               	moviw fsr0++
  5109  15E3  001E               	movwi fsr1++
  5110  15E4  3001               	movlw	1
  5111  15E5  02FE               	subwf	126,f
  5112  15E6  3000               	movlw	0
  5113  15E7  3BFF               	subwfb	127,f
  5114  15E8  087F               	movf	127,w
  5115  15E9  047E               	iorwf	126,w
  5116  15EA  1903               	btfsc	3,2
  5117  15EB  3400               	retlw	0
  5118  15EC  2DE2               	goto	initloop
  5119                           
  5120                           	psect	cstackBANK1
  5121  00A0                     __pcstackBANK1:	
  5122  00A0                     ??_AsicPreCalc:	
  5123  00A0                     USBStdFeatureReqHandler@pUEP:	
  5124                           ; 0 bytes @ 0x0
  5125                           
  5126                           
  5127                           ; 2 bytes @ 0x0
  5128  00A0                     	ds	2
  5129  00A2                     USBStdFeatureReqHandler@current_ep_data:	
  5130                           
  5131                           ; 1 bytes @ 0x2
  5132  00A2                     	ds	1
  5133  00A3                     USBStdFeatureReqHandler@p:	
  5134                           
  5135                           ; 1 bytes @ 0x3
  5136  00A3                     	ds	1
  5137  00A4                     ??_USBCtrlEPService:	
  5138                           
  5139                           ; 0 bytes @ 0x4
  5140  00A4                     	ds	2
  5141  00A6                     USBCtrlEPService@setup_cnt:	
  5142                           
  5143                           ; 1 bytes @ 0x6
  5144  00A6                     	ds	1
  5145  00A7                     ??_USBDeviceTasks:	
  5146                           
  5147                           ; 0 bytes @ 0x7
  5148  00A7                     	ds	1
  5149  00A8                     USBDeviceTasks@i:	
  5150  00A8                     AsicPreCalc@K:	
  5151                           ; 1 bytes @ 0x8
  5152                           
  5153                           
  5154                           ; 12 bytes @ 0x8
  5155  00A8                     	ds	1
  5156  00A9                     _UpdateFirmware$2490:	
  5157                           
  5158                           ; 2 bytes @ 0x9
  5159  00A9                     	ds	2
  5160  00AB                     _UpdateFirmware$2491:	
  5161                           
  5162                           ; 2 bytes @ 0xB
  5163  00AB                     	ds	2
  5164  00AD                     UpdateFirmware@count:	
  5165                           
  5166                           ; 2 bytes @ 0xD
  5167  00AD                     	ds	2
  5168  00AF                     UpdateFirmware@n:	
  5169                           
  5170                           ; 1 bytes @ 0xF
  5171  00AF                     	ds	1
  5172  00B0                     UpdateFirmware@row:	
  5173                           
  5174                           ; 1 bytes @ 0x10
  5175  00B0                     	ds	4
  5176  00B4                     AsicPreCalc@z:	
  5177                           
  5178                           ; 4 bytes @ 0x14
  5179  00B4                     	ds	4
  5180  00B8                     AsicPreCalc@m:	
  5181                           
  5182                           ; 32 bytes @ 0x18
  5183  00B8                     	ds	32
  5184  00D8                     AsicPreCalc@y:	
  5185                           
  5186                           ; 4 bytes @ 0x38
  5187  00D8                     	ds	4
  5188  00DC                     AsicPreCalc@x:	
  5189                           
  5190                           ; 4 bytes @ 0x3C
  5191  00DC                     	ds	4
  5192  00E0                     AsicPreCalc@n:	
  5193                           
  5194                           ; 1 bytes @ 0x40
  5195  00E0                     	ds	1
  5196  00E1                     ??_ProcessCmd:	
  5197                           
  5198                           ; 0 bytes @ 0x41
  5199  00E1                     	ds	2
  5200  00E3                     _ProcessCmd$2052:	
  5201                           
  5202                           ; 2 bytes @ 0x43
  5203  00E3                     	ds	2
  5204  00E5                     ProcessCmd@n:	
  5205                           
  5206                           ; 1 bytes @ 0x45
  5207  00E5                     	ds	1
  5208  00E6                     ProcessCmd@cmd:	
  5209                           
  5210                           ; 1 bytes @ 0x46
  5211  00E6                     	ds	1
  5212  00E7                     _ProcessIO$2371:	
  5213                           
  5214                           ; 2 bytes @ 0x47
  5215  00E7                     	ds	2
  5216  00E9                     _ProcessIO$2405:	
  5217                           
  5218                           ; 2 bytes @ 0x49
  5219  00E9                     	ds	2
  5220                           
  5221                           	psect	cstackCOMMON
  5222  0070                     __pcstackCOMMON:	
  5223  0070                     ?_USBWakeFromSuspend:	
  5224  0070                     ?_USBSuspend:	
  5225                           ; 0 bytes @ 0x0
  5226                           
  5227  0070                     ?_USBCtrlEPAllowStatusStage:	
  5228                           ; 0 bytes @ 0x0
  5229                           
  5230  0070                     ?_USBStallHandler:	
  5231                           ; 0 bytes @ 0x0
  5232                           
  5233  0070                     ?_USBCtrlEPService:	
  5234                           ; 0 bytes @ 0x0
  5235                           
  5236  0070                     ?_USBCtrlTrfTxService:	
  5237                           ; 0 bytes @ 0x0
  5238                           
  5239  0070                     ?_USBCtrlTrfSetupHandler:	
  5240                           ; 0 bytes @ 0x0
  5241                           
  5242  0070                     ?_USBCtrlTrfOutHandler:	
  5243                           ; 0 bytes @ 0x0
  5244                           
  5245  0070                     ?_USBCtrlTrfInHandler:	
  5246                           ; 0 bytes @ 0x0
  5247                           
  5248  0070                     ?_USBCheckStdRequest:	
  5249                           ; 0 bytes @ 0x0
  5250                           
  5251  0070                     ?_USBStdFeatureReqHandler:	
  5252                           ; 0 bytes @ 0x0
  5253                           
  5254  0070                     ?_Send32:	
  5255                           ; 0 bytes @ 0x0
  5256                           
  5257  0070                     ?_AsicPushWork:	
  5258                           ; 0 bytes @ 0x0
  5259                           
  5260  0070                     ?_UpdateFirmware:	
  5261                           ; 0 bytes @ 0x0
  5262                           
  5263  0070                     ?_InitializeSystem:	
  5264                           ; 0 bytes @ 0x0
  5265                           
  5266  0070                     ?_ProcessIO:	
  5267                           ; 0 bytes @ 0x0
  5268                           
  5269  0070                     ?_UserInit:	
  5270                           ; 0 bytes @ 0x0
  5271                           
  5272  0070                     ?_USBDeviceInit:	
  5273                           ; 0 bytes @ 0x0
  5274                           
  5275  0070                     ?_USBDeviceTasks:	
  5276                           ; 0 bytes @ 0x0
  5277                           
  5278  0070                     ?_USBCtrlEPAllowDataStage:	
  5279                           ; 0 bytes @ 0x0
  5280                           
  5281  0070                     ?_USBCtrlEPServiceComplete:	
  5282                           ; 0 bytes @ 0x0
  5283                           
  5284  0070                     ?_USBCtrlTrfRxService:	
  5285                           ; 0 bytes @ 0x0
  5286                           
  5287  0070                     ?_USBStdSetCfgHandler:	
  5288                           ; 0 bytes @ 0x0
  5289                           
  5290  0070                     ?_USBStdGetDscHandler:	
  5291                           ; 0 bytes @ 0x0
  5292                           
  5293  0070                     ?_USBStdGetStatusHandler:	
  5294                           ; 0 bytes @ 0x0
  5295                           
  5296  0070                     ?_USBCheckVendorRequest:	
  5297                           ; 0 bytes @ 0x0
  5298                           
  5299  0070                     ?_ProcessCmd:	
  5300                           ; 0 bytes @ 0x0
  5301                           
  5302  0070                     ?_DetectAsics:	
  5303                           ; 0 bytes @ 0x0
  5304                           
  5305  0070                     ?_WorkTick:	
  5306                           ; 0 bytes @ 0x0
  5307                           
  5308  0070                     ?_ResultRx:	
  5309                           ; 0 bytes @ 0x0
  5310                           
  5311  0070                     ?_InitFAN:	
  5312                           ; 0 bytes @ 0x0
  5313                           
  5314  0070                     ?_InitTempSensor:	
  5315                           ; 0 bytes @ 0x0
  5316                           
  5317  0070                     ?_InitWorkTick:	
  5318                           ; 0 bytes @ 0x0
  5319                           
  5320  0070                     ?_InitResultRx:	
  5321                           ; 0 bytes @ 0x0
  5322                           
  5323  0070                     ?_ISRCode:	
  5324                           ; 0 bytes @ 0x0
  5325                           
  5326  0070                     ?_USBCBSuspend:	
  5327                           ; 0 bytes @ 0x0
  5328                           
  5329  0070                     ?_USBCBWakeFromSuspend:	
  5330                           ; 0 bytes @ 0x0
  5331                           
  5332  0070                     ?_USBCB_SOF_Handler:	
  5333                           ; 0 bytes @ 0x0
  5334                           
  5335  0070                     ?_USBCBErrorHandler:	
  5336                           ; 0 bytes @ 0x0
  5337                           
  5338  0070                     ?_USBCBCheckOtherReq:	
  5339                           ; 0 bytes @ 0x0
  5340                           
  5341  0070                     ?_USBCBStdSetDscHandler:	
  5342                           ; 0 bytes @ 0x0
  5343                           
  5344  0070                     ?_USBCBInitEP:	
  5345                           ; 0 bytes @ 0x0
  5346                           
  5347  0070                     ?i1___bmul:	
  5348                           ; 0 bytes @ 0x0
  5349                           
  5350  0070                     ?_main:	
  5351                           ; 1 bytes @ 0x0
  5352                           
  5353  0070                     ?i1___wmul:	
  5354                           ; 2 bytes @ 0x0
  5355                           
  5356  0070                     i1___bmul@multiplicand:	
  5357                           ; 2 bytes @ 0x0
  5358                           
  5359  0070                     i1___wmul@multiplier:	
  5360                           ; 1 bytes @ 0x0
  5361                           
  5362                           
  5363                           ; 2 bytes @ 0x0
  5364  0070                     	ds	1
  5365  0071                     ??i1___bmul:	
  5366  0071                     i1___bmul@multiplier:	
  5367                           ; 0 bytes @ 0x1
  5368                           
  5369                           
  5370                           ; 1 bytes @ 0x1
  5371  0071                     	ds	1
  5372  0072                     i1___bmul@product:	
  5373  0072                     i1___wmul@multiplicand:	
  5374                           ; 1 bytes @ 0x2
  5375                           
  5376                           
  5377                           ; 2 bytes @ 0x2
  5378  0072                     	ds	2
  5379  0074                     ??i1___wmul:	
  5380  0074                     i1___wmul@product:	
  5381                           ; 0 bytes @ 0x4
  5382                           
  5383                           
  5384                           ; 2 bytes @ 0x4
  5385  0074                     	ds	2
  5386  0076                     ?i1_SendCmdReply:	
  5387  0076                     i1SendCmdReply@cmd:	
  5388                           ; 0 bytes @ 0x6
  5389                           
  5390                           
  5391                           ; 2 bytes @ 0x6
  5392  0076                     	ds	2
  5393  0078                     i1SendCmdReply@data:	
  5394                           
  5395                           ; 2 bytes @ 0x8
  5396  0078                     	ds	2
  5397  007A                     i1SendCmdReply@count:	
  5398                           
  5399                           ; 1 bytes @ 0xA
  5400  007A                     	ds	1
  5401  007B                     i1SendCmdReply@n:	
  5402                           
  5403                           ; 1 bytes @ 0xB
  5404  007B                     	ds	1
  5405  007C                     ??_ResultRx:	
  5406  007C                     ResultRx@TimeOut:	
  5407                           ; 0 bytes @ 0xC
  5408                           
  5409                           
  5410                           ; 1 bytes @ 0xC
  5411  007C                     	ds	1
  5412  007D                     ??_ISRCode:	
  5413                           
  5414                           ; 0 bytes @ 0xD
  5415  007D                     	ds	1
  5416                           
  5417                           	psect	cstackBANK0
  5418  0050                     __pcstackBANK0:	
  5419  0050                     ??i1_SendCmdReply:	
  5420                           
  5421                           ; 0 bytes @ 0x0
  5422  0050                     	ds	6
  5423  0056                     ??_USBCtrlEPAllowStatusStage:	
  5424  0056                     ??_USBStallHandler:	
  5425                           ; 0 bytes @ 0x6
  5426                           
  5427  0056                     ?_USBConfigureEndpoint:	
  5428                           ; 0 bytes @ 0x6
  5429                           
  5430  0056                     ??_USBCtrlTrfTxService:	
  5431                           ; 0 bytes @ 0x6
  5432                           
  5433  0056                     ??_Send32:	
  5434                           ; 0 bytes @ 0x6
  5435                           
  5436  0056                     ??_USBDeviceInit:	
  5437                           ; 0 bytes @ 0x6
  5438                           
  5439  0056                     ??_USBStdGetDscHandler:	
  5440                           ; 0 bytes @ 0x6
  5441                           
  5442  0056                     ??_USBStdGetStatusHandler:	
  5443                           ; 0 bytes @ 0x6
  5444                           
  5445  0056                     ??_USBCheckVendorRequest:	
  5446                           ; 0 bytes @ 0x6
  5447                           
  5448  0056                     ??_WorkTick:	
  5449                           ; 0 bytes @ 0x6
  5450                           
  5451  0056                     ??_InitFAN:	
  5452                           ; 0 bytes @ 0x6
  5453                           
  5454  0056                     ??_InitTempSensor:	
  5455                           ; 0 bytes @ 0x6
  5456                           
  5457  0056                     ??_InitWorkTick:	
  5458                           ; 0 bytes @ 0x6
  5459                           
  5460  0056                     ??_InitResultRx:	
  5461                           ; 0 bytes @ 0x6
  5462                           
  5463  0056                     ??_USBCBSuspend:	
  5464                           ; 0 bytes @ 0x6
  5465                           
  5466  0056                     ??_USBCBWakeFromSuspend:	
  5467                           ; 0 bytes @ 0x6
  5468                           
  5469  0056                     ??_USBCB_SOF_Handler:	
  5470                           ; 0 bytes @ 0x6
  5471                           
  5472  0056                     ??_USBCBErrorHandler:	
  5473                           ; 0 bytes @ 0x6
  5474                           
  5475  0056                     ??_USBCBCheckOtherReq:	
  5476                           ; 0 bytes @ 0x6
  5477                           
  5478  0056                     ??_USBCBStdSetDscHandler:	
  5479                           ; 0 bytes @ 0x6
  5480                           
  5481  0056                     ?_EraseRow:	
  5482                           ; 0 bytes @ 0x6
  5483                           
  5484  0056                     ?_WriteRow:	
  5485                           ; 0 bytes @ 0x6
  5486                           
  5487  0056                     ?_VerifyRow:	
  5488                           ; 0 bytes @ 0x6
  5489                           
  5490  0056                     ?___bmul:	
  5491                           ; 1 bytes @ 0x6
  5492                           
  5493  0056                     ?_memset:	
  5494                           ; 1 bytes @ 0x6
  5495                           
  5496  0056                     ?___wmul:	
  5497                           ; 2 bytes @ 0x6
  5498                           
  5499  0056                     ?___lwdiv:	
  5500                           ; 2 bytes @ 0x6
  5501                           
  5502  0056                     ?___awdiv:	
  5503                           ; 2 bytes @ 0x6
  5504                           
  5505  0056                     USBConfigureEndpoint@direction:	
  5506                           ; 2 bytes @ 0x6
  5507                           
  5508  0056                     USBStdGetStatusHandler@p:	
  5509                           ; 1 bytes @ 0x6
  5510                           
  5511  0056                     ___bmul@multiplicand:	
  5512                           ; 1 bytes @ 0x6
  5513                           
  5514  0056                     EraseRow@addr:	
  5515                           ; 1 bytes @ 0x6
  5516                           
  5517  0056                     WriteRow@dest:	
  5518                           ; 2 bytes @ 0x6
  5519                           
  5520  0056                     VerifyRow@dest:	
  5521                           ; 2 bytes @ 0x6
  5522                           
  5523  0056                     memset@p1:	
  5524                           ; 2 bytes @ 0x6
  5525                           
  5526  0056                     ___wmul@multiplier:	
  5527                           ; 2 bytes @ 0x6
  5528                           
  5529  0056                     ___lwdiv@divisor:	
  5530                           ; 2 bytes @ 0x6
  5531                           
  5532  0056                     ___awdiv@divisor:	
  5533                           ; 2 bytes @ 0x6
  5534                           
  5535                           
  5536                           ; 2 bytes @ 0x6
  5537  0056                     	ds	1
  5538  0057                     ??_USBConfigureEndpoint:	
  5539  0057                     ??___bmul:	
  5540                           ; 0 bytes @ 0x7
  5541                           
  5542  0057                     ___bmul@product:	
  5543                           ; 0 bytes @ 0x7
  5544                           
  5545                           
  5546                           ; 1 bytes @ 0x7
  5547  0057                     	ds	1
  5548  0058                     ??_USBCtrlTrfRxService:	
  5549  0058                     ??_EraseRow:	
  5550                           ; 0 bytes @ 0x8
  5551                           
  5552  0058                     USBConfigureEndpoint@EPNum:	
  5553                           ; 0 bytes @ 0x8
  5554                           
  5555  0058                     USBCtrlTrfTxService@byteToSend:	
  5556                           ; 1 bytes @ 0x8
  5557                           
  5558  0058                     WriteRow@off:	
  5559                           ; 1 bytes @ 0x8
  5560                           
  5561  0058                     VerifyRow@off:	
  5562                           ; 1 bytes @ 0x8
  5563                           
  5564  0058                     ___bmul@multiplier:	
  5565                           ; 1 bytes @ 0x8
  5566                           
  5567  0058                     USBDeviceInit@p:	
  5568                           ; 1 bytes @ 0x8
  5569                           
  5570  0058                     memset@c:	
  5571                           ; 2 bytes @ 0x8
  5572                           
  5573  0058                     ___wmul@multiplicand:	
  5574                           ; 2 bytes @ 0x8
  5575                           
  5576  0058                     ___lwdiv@dividend:	
  5577                           ; 2 bytes @ 0x8
  5578                           
  5579  0058                     ___awdiv@dividend:	
  5580                           ; 2 bytes @ 0x8
  5581                           
  5582                           
  5583                           ; 2 bytes @ 0x8
  5584  0058                     	ds	1
  5585  0059                     ??_USBCtrlTrfInHandler:	
  5586  0059                     ??_USBCtrlEPAllowDataStage:	
  5587                           ; 0 bytes @ 0x9
  5588                           
  5589  0059                     ??_WriteRow:	
  5590                           ; 0 bytes @ 0x9
  5591                           
  5592  0059                     ??_VerifyRow:	
  5593                           ; 0 bytes @ 0x9
  5594                           
  5595  0059                     ?_USBTransferOnePacket:	
  5596                           ; 0 bytes @ 0x9
  5597                           
  5598  0059                     ?_rotate:	
  5599                           ; 1 bytes @ 0x9
  5600                           
  5601  0059                     USBTransferOnePacket@dir:	
  5602                           ; 4 bytes @ 0x9
  5603                           
  5604  0059                     USBConfigureEndpoint@handle:	
  5605                           ; 1 bytes @ 0x9
  5606                           
  5607  0059                     rotate@x:	
  5608                           ; 1 bytes @ 0x9
  5609                           
  5610                           
  5611                           ; 4 bytes @ 0x9
  5612  0059                     	ds	1
  5613  005A                     ?_USBEnableEndpoint:	
  5614  005A                     ??___wmul:	
  5615                           ; 0 bytes @ 0xA
  5616                           
  5617  005A                     ??___lwdiv:	
  5618                           ; 0 bytes @ 0xA
  5619                           
  5620  005A                     ??___awdiv:	
  5621                           ; 0 bytes @ 0xA
  5622                           
  5623  005A                     USBDeviceInit@i_718:	
  5624                           ; 0 bytes @ 0xA
  5625                           
  5626  005A                     USBEnableEndpoint@options:	
  5627                           ; 1 bytes @ 0xA
  5628                           
  5629  005A                     USBTransferOnePacket@data:	
  5630                           ; 1 bytes @ 0xA
  5631                           
  5632  005A                     USBCtrlTrfRxService@i:	
  5633                           ; 1 bytes @ 0xA
  5634                           
  5635  005A                     ___lwdiv@counter:	
  5636                           ; 1 bytes @ 0xA
  5637                           
  5638  005A                     ___awdiv@counter:	
  5639                           ; 1 bytes @ 0xA
  5640                           
  5641  005A                     memset@n:	
  5642                           ; 1 bytes @ 0xA
  5643                           
  5644  005A                     ___wmul@product:	
  5645                           ; 2 bytes @ 0xA
  5646                           
  5647                           
  5648                           ; 2 bytes @ 0xA
  5649  005A                     	ds	1
  5650  005B                     ??_USBEnableEndpoint:	
  5651  005B                     ??_USBCtrlEPServiceComplete:	
  5652                           ; 0 bytes @ 0xB
  5653                           
  5654  005B                     USBDeviceInit@i:	
  5655                           ; 0 bytes @ 0xB
  5656                           
  5657  005B                     USBTransferOnePacket@len:	
  5658                           ; 1 bytes @ 0xB
  5659                           
  5660  005B                     USBCtrlTrfRxService@byteToRead:	
  5661                           ; 1 bytes @ 0xB
  5662                           
  5663  005B                     USBCtrlTrfInHandler@lastDTS:	
  5664                           ; 1 bytes @ 0xB
  5665                           
  5666  005B                     ___awdiv@sign:	
  5667                           ; 1 bytes @ 0xB
  5668                           
  5669  005B                     ___lwdiv@quotient:	
  5670                           ; 1 bytes @ 0xB
  5671                           
  5672                           
  5673                           ; 2 bytes @ 0xB
  5674  005B                     	ds	1
  5675  005C                     ??_memset:	
  5676  005C                     ??_USBCtrlTrfOutHandler:	
  5677                           ; 0 bytes @ 0xC
  5678                           
  5679  005C                     ?_SendCmdReply:	
  5680                           ; 0 bytes @ 0xC
  5681                           
  5682  005C                     ??_USBTransferOnePacket:	
  5683                           ; 0 bytes @ 0xC
  5684                           
  5685  005C                     ?_SendAsicData:	
  5686                           ; 0 bytes @ 0xC
  5687                           
  5688  005C                     SendAsicData@work:	
  5689                           ; 0 bytes @ 0xC
  5690                           
  5691  005C                     SendCmdReply@cmd:	
  5692                           ; 2 bytes @ 0xC
  5693                           
  5694  005C                     ___awdiv@quotient:	
  5695                           ; 2 bytes @ 0xC
  5696                           
  5697                           
  5698                           ; 2 bytes @ 0xC
  5699  005C                     	ds	1
  5700  005D                     rotate@y:	
  5701  005D                     USBEnableEndpoint@p:	
  5702                           ; 1 bytes @ 0xD
  5703                           
  5704  005D                     memset@p:	
  5705                           ; 2 bytes @ 0xD
  5706                           
  5707                           
  5708                           ; 2 bytes @ 0xD
  5709  005D                     	ds	1
  5710  005E                     ??_rotate:	
  5711  005E                     ??_DetectAsics:	
  5712                           ; 0 bytes @ 0xE
  5713                           
  5714  005E                     USBTransferOnePacket@ep:	
  5715                           ; 0 bytes @ 0xE
  5716                           
  5717  005E                     SendAsicData@split:	
  5718                           ; 1 bytes @ 0xE
  5719                           
  5720  005E                     SendCmdReply@data:	
  5721                           ; 1 bytes @ 0xE
  5722                           
  5723                           
  5724                           ; 2 bytes @ 0xE
  5725  005E                     	ds	1
  5726  005F                     ??_SendAsicData:	
  5727  005F                     USBEnableEndpoint@ep:	
  5728                           ; 0 bytes @ 0xF
  5729                           
  5730  005F                     USBTransferOnePacket@handle:	
  5731                           ; 1 bytes @ 0xF
  5732                           
  5733                           
  5734                           ; 1 bytes @ 0xF
  5735  005F                     	ds	1
  5736  0060                     ??_USBCBInitEP:	
  5737  0060                     ?_USER_USB_CALLBACK_EVENT_HANDLER:	
  5738                           ; 0 bytes @ 0x10
  5739                           
  5740  0060                     SendCmdReply@count:	
  5741                           ; 1 bytes @ 0x10
  5742                           
  5743  0060                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  5744                           ; 1 bytes @ 0x10
  5745                           
  5746                           
  5747                           ; 2 bytes @ 0x10
  5748  0060                     	ds	1
  5749  0061                     ??_SendCmdReply:	
  5750                           
  5751                           ; 0 bytes @ 0x11
  5752  0061                     	ds	1
  5753  0062                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:	
  5754                           
  5755                           ; 2 bytes @ 0x12
  5756  0062                     	ds	2
  5757  0064                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  5758                           
  5759                           ; 2 bytes @ 0x14
  5760  0064                     	ds	2
  5761  0066                     ??_USBWakeFromSuspend:	
  5762  0066                     ??_USBSuspend:	
  5763                           ; 0 bytes @ 0x16
  5764                           
  5765  0066                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  5766                           ; 0 bytes @ 0x16
  5767                           
  5768  0066                     ??_USBStdFeatureReqHandler:	
  5769                           ; 0 bytes @ 0x16
  5770                           
  5771  0066                     ??_USBStdSetCfgHandler:	
  5772                           ; 0 bytes @ 0x16
  5773                           
  5774  0066                     ?_AsicPreCalc:	
  5775                           ; 0 bytes @ 0x16
  5776                           
  5777  0066                     DetectAsics@x:	
  5778                           ; 0 bytes @ 0x16
  5779                           
  5780  0066                     USBStdSetCfgHandler@p:	
  5781                           ; 1 bytes @ 0x16
  5782                           
  5783  0066                     AsicPreCalc@work:	
  5784                           ; 2 bytes @ 0x16
  5785                           
  5786                           
  5787                           ; 2 bytes @ 0x16
  5788  0066                     	ds	1
  5789  0067                     ??_InitializeSystem:	
  5790  0067                     ??_UserInit:	
  5791                           ; 0 bytes @ 0x17
  5792                           
  5793  0067                     SendCmdReply@n:	
  5794                           ; 0 bytes @ 0x17
  5795                           
  5796                           
  5797                           ; 1 bytes @ 0x17
  5798  0067                     	ds	1
  5799  0068                     ??_AsicPushWork:	
  5800  0068                     USBStdSetCfgHandler@i_1089:	
  5801                           ; 0 bytes @ 0x18
  5802                           
  5803                           
  5804                           ; 1 bytes @ 0x18
  5805  0068                     	ds	1
  5806  0069                     USBStdSetCfgHandler@i:	
  5807                           
  5808                           ; 1 bytes @ 0x19
  5809  0069                     	ds	1
  5810  006A                     ??_USBCtrlTrfSetupHandler:	
  5811  006A                     ??_USBCheckStdRequest:	
  5812                           ; 0 bytes @ 0x1A
  5813                           
  5814  006A                     ??_UpdateFirmware:	
  5815                           ; 0 bytes @ 0x1A
  5816                           
  5817  006A                     ??_ProcessIO:	
  5818                           ; 0 bytes @ 0x1A
  5819                           
  5820  006A                     ??_main:	
  5821                           ; 0 bytes @ 0x1A
  5822                           
  5823                           
  5824                           	psect	lowcode
  5825  0014                     __plowcode:	
  5826 ;; *************** function _UpdateFirmware *****************
  5827 ;; Defined at:
  5828 ;;		line 173 in file "fwup.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;		None
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;  count           2   13[BANK1 ] unsigned short 
  5833 ;;  row             1   16[BANK1 ] unsigned char 
  5834 ;;  n               1   15[BANK1 ] unsigned char 
  5835 ;; Return value:  Size  Location     Type
  5836 ;;		None               void
  5837 ;; Registers used:
  5838 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5839 ;; Tracked objects:
  5840 ;;		On entry : 1F/1
  5841 ;;		On exit  : 1F/5
  5842 ;;		Unchanged: FFE00/0
  5843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5845 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5847 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5848 ;;Total ram usage:        8 bytes
  5849 ;; Hardware stack levels used:    1
  5850 ;; Hardware stack levels required when called:   13
  5851 ;; This function calls:
  5852 ;;		_USBDeviceTasks
  5853 ;;		_EraseRow
  5854 ;;		_WriteRow
  5855 ;;		_VerifyRow
  5856 ;;		_USBTransferOnePacket
  5857 ;; This function is called by:
  5858 ;;		_ProcessCmd
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           
  5863                           ;psect for function _UpdateFirmware
  5864  0014                     _UpdateFirmware:	
  5865  0014                     l6169:	
  5866                           ; Regs used in _UpdateFirmware: [allreg]
  5867                           
  5868                           
  5869                           ;fwup.c: 174: BYTE row, n;
  5870                           ;fwup.c: 175: WORD count = 0;
  5871  0014  01AD               	clrf	UpdateFirmware@count^(0+128)
  5872  0015  01AE               	clrf	(UpdateFirmware@count+1)^(0+128)
  5873  0016                     l6171:	
  5874                           
  5875                           ;fwup.c: 176: fwbuf = &WorkQue;
  5876  0016  303C               	movlw	60
  5877  0017  0022               	movlb	2	; select bank2
  5878  0018  00AA               	movwf	_fwbuf^(0+256)
  5879  0019  3023               	movlw	35
  5880  001A  00AB               	movwf	(_fwbuf^(0+256)+1)
  5881  001B                     l6173:	
  5882                           
  5883                           ;fwup.c: 179: USBDeviceTasks();
  5884  001B  3181  2191  3180   	fcall	_USBDeviceTasks
  5885  001E                     l6175:	
  5886                           
  5887                           ;fwup.c: 180: if(!(USBGenericOutHandle==0?0:((volatile BDT_ENTRY*)USBGenericOutHandle)->
      +                          STAT.UOWN)) {
  5888  001E  0021               	movlb	1	; select bank1
  5889  001F  086C               	movf	_USBGenericOutHandle^(0+128),w
  5890  0020  1D03               	skipz
  5891  0021  2823               	goto	u5020
  5892  0022  282C               	goto	l6179
  5893  0023                     u5020:	
  5894  0023                     l6177:	
  5895  0023  086C               	movf	_USBGenericOutHandle^(0+128),w
  5896  0024  0086               	movwf	6
  5897  0025  0187               	clrf	7
  5898  0026  0D01               	rlf	1,w
  5899  0027  0D01               	rlf	1,w
  5900  0028  3901               	andlw	1
  5901  0029  00A9               	movwf	_UpdateFirmware$2490^(0+128)
  5902  002A  01AA               	clrf	(_UpdateFirmware$2490+1)^(0+128)
  5903  002B  282E               	goto	l6181
  5904  002C                     l6179:	
  5905  002C  01A9               	clrf	_UpdateFirmware$2490^(0+128)
  5906  002D  01AA               	clrf	(_UpdateFirmware$2490+1)^(0+128)
  5907  002E                     l6181:	
  5908  002E  082A               	movf	(_UpdateFirmware$2490+1)^(0+128),w
  5909  002F  0429               	iorwf	_UpdateFirmware$2490^(0+128),w
  5910  0030  1D03               	skipz
  5911  0031  2833               	goto	u5031
  5912  0032  2834               	goto	u5030
  5913  0033                     u5031:	
  5914  0033  281B               	goto	l6173
  5915  0034                     u5030:	
  5916  0034  28CB               	goto	l6229
  5917  0035                     l6185:	
  5918                           
  5919                           ;fwup.c: 185: for(n = 2; n < 34; n++)
  5920  0035  3002               	movlw	2
  5921  0036  0021               	movlb	1	; select bank1
  5922  0037  00AF               	movwf	UpdateFirmware@n^(0+128)
  5923  0038                     l6189:	
  5924                           
  5925                           ;fwup.c: 186: fwbuf[count++] = OUTPacket[n];
  5926  0038  082D               	movf	UpdateFirmware@count^(0+128),w
  5927  0039  0022               	movlb	2	; select bank2
  5928  003A  072A               	addwf	_fwbuf^(0+256),w
  5929  003B  0086               	movwf	6
  5930  003C  0021               	movlb	1	; select bank1
  5931  003D  082E               	movf	(UpdateFirmware@count+1)^(0+128),w
  5932  003E  0022               	movlb	2	; select bank2
  5933  003F  3D2B               	addwfc	(_fwbuf+1)^(0+256),w
  5934  0040  0087               	movwf	7
  5935  0041  0021               	movlb	1	; select bank1
  5936  0042  082F               	movf	UpdateFirmware@n^(0+128),w
  5937  0043  3EA0               	addlw	160
  5938  0044  0084               	movwf	4
  5939  0045  3002               	movlw	2	; select bank5/6
  5940  0046  0085               	movwf	5
  5941  0047  0800               	movf	0,w
  5942  0048  0081               	movwf	1
  5943  0049                     l6191:	
  5944  0049  0AAD               	incf	UpdateFirmware@count^(0+128),f
  5945  004A  1903               	skipnz
  5946  004B  0AAE               	incf	(UpdateFirmware@count+1)^(0+128),f
  5947  004C                     l6193:	
  5948  004C  0AAF               	incf	UpdateFirmware@n^(0+128),f
  5949  004D                     l6195:	
  5950  004D  3022               	movlw	34
  5951  004E  022F               	subwf	UpdateFirmware@n^(0+128),w
  5952  004F  1C03               	skipc
  5953  0050  2852               	goto	u5041
  5954  0051  2853               	goto	u5040
  5955  0052                     u5041:	
  5956  0052  2838               	goto	l6189
  5957  0053                     u5040:	
  5958  0053  28DA               	goto	l6231
  5959  0054                     l6197:	
  5960                           
  5961                           ;fwup.c: 189: INPacket[3] ='1';
  5962  0054  3031               	movlw	49
  5963  0055  0024               	movlb	4	; select bank4
  5964  0056  00A3               	movwf	35
  5965  0057                     l6199:	
  5966                           
  5967                           ;fwup.c: 190: for(row = 0; row < OUTPacket[3]; row++) {
  5968  0057  0021               	movlb	1	; select bank1
  5969  0058  01B0               	clrf	UpdateFirmware@row^(0+128)
  5970  0059  2888               	goto	l6209
  5971  005A                     l6201:	
  5972                           
  5973                           ;fwup.c: 191: EraseRow(OUTPacket[2]+row);
  5974  005A  0025               	movlb	5	; select bank5
  5975  005B  0822               	movf	34,w
  5976  005C  0020               	movlb	0	; select bank0
  5977  005D  00D6               	movwf	?_EraseRow
  5978  005E  01D7               	clrf	?_EraseRow+1
  5979  005F  0021               	movlb	1	; select bank1
  5980  0060  0830               	movf	UpdateFirmware@row^(0+128),w
  5981  0061  0020               	movlb	0	; select bank0
  5982  0062  07D6               	addwf	?_EraseRow,f
  5983  0063  1803               	skipnc
  5984  0064  0AD7               	incf	?_EraseRow+1,f
  5985  0065  20E8  3180         	fcall	_EraseRow
  5986                           
  5987                           ;fwup.c: 192: WriteRow(OUTPacket[2], row);
  5988  0067  0025               	movlb	5	; select bank5
  5989  0068  0822               	movf	34,w
  5990  0069  0020               	movlb	0	; select bank0
  5991  006A  00D6               	movwf	?_WriteRow
  5992  006B  01D7               	clrf	?_WriteRow+1
  5993  006C  0021               	movlb	1	; select bank1
  5994  006D  0830               	movf	UpdateFirmware@row^(0+128),w
  5995  006E  0020               	movlb	0	; select bank0
  5996  006F  00D8               	movwf	?_WriteRow+2
  5997  0070  20FB  3180         	fcall	_WriteRow
  5998  0072                     l6203:	
  5999                           
  6000                           ;fwup.c: 193: if(!VerifyRow(OUTPacket[2], row)) {
  6001  0072  0025               	movlb	5	; select bank5
  6002  0073  0822               	movf	34,w
  6003  0074  0020               	movlb	0	; select bank0
  6004  0075  00D6               	movwf	?_VerifyRow
  6005  0076  01D7               	clrf	?_VerifyRow+1
  6006  0077  0021               	movlb	1	; select bank1
  6007  0078  0830               	movf	UpdateFirmware@row^(0+128),w
  6008  0079  0020               	movlb	0	; select bank0
  6009  007A  00D8               	movwf	?_VerifyRow+2
  6010  007B  2149  3180         	fcall	_VerifyRow
  6011  007D  3800               	iorlw	0
  6012  007E  1D03               	skipz
  6013  007F  2881               	goto	u5051
  6014  0080  2882               	goto	u5050
  6015  0081                     u5051:	
  6016  0081  2886               	goto	l6207
  6017  0082                     u5050:	
  6018  0082                     l6205:	
  6019                           
  6020                           ;fwup.c: 194: INPacket[3] = '0';
  6021  0082  3030               	movlw	48
  6022  0083  0024               	movlb	4	; select bank4
  6023  0084  00A3               	movwf	35
  6024                           
  6025                           ;fwup.c: 195: break;
  6026  0085  2890               	goto	l6211
  6027  0086                     l6207:	
  6028  0086  0021               	movlb	1	; select bank1
  6029  0087  0AB0               	incf	UpdateFirmware@row^(0+128),f
  6030  0088                     l6209:	
  6031  0088  0025               	movlb	5	; select bank5
  6032  0089  0823               	movf	35,w
  6033  008A  0021               	movlb	1	; select bank1
  6034  008B  0230               	subwf	UpdateFirmware@row^(0+128),w
  6035  008C  1C03               	skipc
  6036  008D  288F               	goto	u5061
  6037  008E  2890               	goto	u5060
  6038  008F                     u5061:	
  6039  008F  285A               	goto	l6201
  6040  0090                     u5060:	
  6041  0090                     l6211:	
  6042                           
  6043                           ;fwup.c: 196: }
  6044                           ;fwup.c: 197: }
  6045                           ;fwup.c: 198: if(!(USBGenericInHandle==0?0:((volatile BDT_ENTRY*)USBGenericInHandle)->ST
      +                          AT.UOWN)) {
  6046  0090  0022               	movlb	2	; select bank2
  6047  0091  0837               	movf	_USBGenericInHandle^(0+256),w
  6048  0092  1D03               	skipz
  6049  0093  2895               	goto	u5070
  6050  0094  289F               	goto	l6215
  6051  0095                     u5070:	
  6052  0095                     l6213:	
  6053  0095  0837               	movf	_USBGenericInHandle^(0+256),w
  6054  0096  0086               	movwf	6
  6055  0097  0187               	clrf	7
  6056  0098  0D01               	rlf	1,w
  6057  0099  0D01               	rlf	1,w
  6058  009A  3901               	andlw	1
  6059  009B  0021               	movlb	1	; select bank1
  6060  009C  00AB               	movwf	_UpdateFirmware$2491^(0+128)
  6061  009D  01AC               	clrf	(_UpdateFirmware$2491+1)^(0+128)
  6062  009E  28A2               	goto	l6217
  6063  009F                     l6215:	
  6064  009F  0021               	movlb	1	; select bank1
  6065  00A0  01AB               	clrf	_UpdateFirmware$2491^(0+128)
  6066  00A1  01AC               	clrf	(_UpdateFirmware$2491+1)^(0+128)
  6067  00A2                     l6217:	
  6068  00A2  082C               	movf	(_UpdateFirmware$2491+1)^(0+128),w
  6069  00A3  042B               	iorwf	_UpdateFirmware$2491^(0+128),w
  6070  00A4  1D03               	skipz
  6071  00A5  28A7               	goto	u5081
  6072  00A6  28A8               	goto	u5080
  6073  00A7                     u5081:	
  6074  00A7  28C0               	goto	l6223
  6075  00A8                     u5080:	
  6076  00A8                     l6219:	
  6077                           
  6078                           ;fwup.c: 199: INPacket[0] = 'F';
  6079  00A8  3046               	movlw	70
  6080  00A9  0024               	movlb	4	; select bank4
  6081  00AA  00A0               	movwf	32
  6082                           
  6083                           ;fwup.c: 200: INPacket[1] = OUTPacket[1];
  6084  00AB  0025               	movlb	5	; select bank5
  6085  00AC  0821               	movf	33,w
  6086  00AD  0024               	movlb	4	; select bank4
  6087  00AE  00A1               	movwf	33
  6088                           
  6089                           ;fwup.c: 201: INPacket[2] = OUTPacket[2];
  6090  00AF  0025               	movlb	5	; select bank5
  6091  00B0  0822               	movf	34,w
  6092  00B1  0024               	movlb	4	; select bank4
  6093  00B2  00A2               	movwf	34
  6094  00B3                     l6221:	
  6095                           
  6096                           ;fwup.c: 202: USBGenericInHandle = USBTransferOnePacket(1,1,(BYTE*)&INPacket[0],15);
  6097  00B3  0020               	movlb	0	; select bank0
  6098  00B4  01D9               	clrf	?_USBTransferOnePacket
  6099  00B5  0AD9               	incf	?_USBTransferOnePacket,f
  6100  00B6  3020               	movlw	32
  6101  00B7  00DA               	movwf	?_USBTransferOnePacket+1
  6102  00B8  300F               	movlw	15
  6103  00B9  00DB               	movwf	?_USBTransferOnePacket+2
  6104  00BA  3001               	movlw	1
  6105  00BB  3182  22CD  3180   	fcall	_USBTransferOnePacket
  6106  00BE  0022               	movlb	2	; select bank2
  6107  00BF  00B7               	movwf	_USBGenericInHandle^(0+256)
  6108  00C0                     l6223:	
  6109                           
  6110                           ;fwup.c: 203: }
  6111                           ;fwup.c: 204: fwbuf = &WorkQue;
  6112  00C0  303C               	movlw	60
  6113  00C1  0022               	movlb	2	; select bank2
  6114  00C2  00AA               	movwf	_fwbuf^(0+256)
  6115  00C3  3023               	movlw	35
  6116  00C4  00AB               	movwf	(_fwbuf^(0+256)+1)
  6117  00C5                     l6225:	
  6118                           
  6119                           ;fwup.c: 205: count = 0;
  6120  00C5  0021               	movlb	1	; select bank1
  6121  00C6  01AD               	clrf	UpdateFirmware@count^(0+128)
  6122  00C7  01AE               	clrf	(UpdateFirmware@count+1)^(0+128)
  6123                           
  6124                           ;fwup.c: 206: break;
  6125  00C8  28DA               	goto	l6231
  6126  00C9                     l968:	
  6127                           ;fwup.c: 207: case 'R':
  6128                           
  6129  00C9  0001               	reset	;# 
  6130                           
  6131                           ;fwup.c: 209: break;
  6132  00CA  28DA               	goto	l6231
  6133  00CB                     l6229:	
  6134  00CB  0025               	movlb	5	; select bank5
  6135  00CC  0820               	movf	32,w
  6136                           
  6137                           ; Switch size 1, requested type "space"
  6138                           ; Number of cases is 4, Range of values is 68 to 88
  6139                           ; switch strategies available:
  6140                           ; Name         Instructions Cycles
  6141                           ; simple_byte           13     7 (average)
  6142                           ; direct_byte           51     9 (fixed)
  6143                           ; jumptable            263     9 (fixed)
  6144                           ;	Chosen strategy is simple_byte
  6145  00CD  3A44               	xorlw	68	; case 68
  6146  00CE  1903               	skipnz
  6147  00CF  2835               	goto	l6185
  6148  00D0  3A16               	xorlw	22	; case 82
  6149  00D1  1903               	skipnz
  6150  00D2  28C9               	goto	l968
  6151  00D3  3A05               	xorlw	5	; case 87
  6152  00D4  1903               	skipnz
  6153  00D5  2854               	goto	l6197
  6154  00D6  3A0F               	xorlw	15	; case 88
  6155  00D7  1903               	skipnz
  6156  00D8  28E7               	goto	l970
  6157  00D9  28DA               	goto	l6231
  6158  00DA                     l6231:	
  6159                           
  6160                           ;fwup.c: 213: USBGenericOutHandle = USBTransferOnePacket(1,0,(BYTE*)&OUTPacket,64);
  6161  00DA  0020               	movlb	0	; select bank0
  6162  00DB  01D9               	clrf	?_USBTransferOnePacket
  6163  00DC  30A0               	movlw	160
  6164  00DD  00DA               	movwf	?_USBTransferOnePacket+1
  6165  00DE  3040               	movlw	64
  6166  00DF  00DB               	movwf	?_USBTransferOnePacket+2
  6167  00E0  3001               	movlw	1
  6168  00E1  3182  22CD  3180   	fcall	_USBTransferOnePacket
  6169  00E4  0021               	movlb	1	; select bank1
  6170  00E5  00EC               	movwf	_USBGenericOutHandle^(0+128)
  6171  00E6  281B               	goto	l6173
  6172  00E7                     l970:	
  6173  00E7  0008               	return
  6174  00E8                     __end_of_UpdateFirmware:	
  6175                           
  6176 ;; *************** function _EraseRow *****************
  6177 ;; Defined at:
  6178 ;;		line 41 in file "fwup.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;  addr            2    6[BANK0 ] unsigned short 
  6181 ;; Auto vars:     Size  Location     Type
  6182 ;;		None
  6183 ;; Return value:  Size  Location     Type
  6184 ;;		None               void
  6185 ;; Registers used:
  6186 ;;		None
  6187 ;; Tracked objects:
  6188 ;;		On entry : 1F/0
  6189 ;;		On exit  : 0/0
  6190 ;;		Unchanged: FFE00/0
  6191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6192 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;Total ram usage:        2 bytes
  6197 ;; Hardware stack levels used:    1
  6198 ;; Hardware stack levels required when called:    4
  6199 ;; This function calls:
  6200 ;;		Nothing
  6201 ;; This function is called by:
  6202 ;;		_UpdateFirmware
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205  00E8                     _EraseRow:	
  6206  00E8                     l6393:	
  6207                           ; Regs used in _EraseRow: []
  6208                           
  6209  00E8  138B               	bcf	11,7	; Disable ints so required sequences will execute properly ;# 
  6210  00E9  0023               	banksel	401	; Bank 3 ;# 
  6211  00EA  0856               	movf	EraseRow@addr,w	; Load initial address ;# 
  6212  00EB  0091               	movwf	401	;# 
  6213  00EC  0857               	movf	EraseRow@addr+1,w	;# 
  6214  00ED  0092               	movwf	402	;# 
  6215  00EE  1315               	bcf	405,6	; Not configuration space ;# 
  6216  00EF  1615               	bsf	405,4	; Specify an erase operation ;# 
  6217  00F0  1515               	bsf	405,2	; Enable writes ;# 
  6218  00F1  3055               	movlw	85	; Start of required write sequence: ;# 
  6219  00F2  0096               	movwf	406	; Write 55h ;# 
  6220  00F3  30AA               	movlw	170	;# 
  6221  00F4  0096               	movwf	406	; Write AAh ;# 
  6222  00F5  1495               	bsf	405,1	; Set WR bit to begin write ;# 
  6223  00F6  0000               	nop	; NOP instructions are forced as processor writes all the program memory write latc
      +                          hes simultaneously to program memory. ;# 
  6224  00F7  0000               	nop	; After NOPs, the processor stalls until the self-write process in complete after w
      +                          rite processor continues with 3rd instruction ;# 
  6225  00F8  1115               	bcf	405,2	; Disable writes ;# 
  6226  00F9  178B               	bsf	11,7	; Enable interrupts ;# 
  6227  00FA                     l938:	
  6228  00FA  0008               	return
  6229  00FB                     __end_of_EraseRow:	
  6230                           
  6231 ;; *************** function _WriteRow *****************
  6232 ;; Defined at:
  6233 ;;		line 67 in file "fwup.c"
  6234 ;; Parameters:    Size  Location     Type
  6235 ;;  dest            2    6[BANK0 ] unsigned short 
  6236 ;;  off             1    8[BANK0 ] unsigned char 
  6237 ;; Auto vars:     Size  Location     Type
  6238 ;;		None
  6239 ;; Return value:  Size  Location     Type
  6240 ;;		None               void
  6241 ;; Registers used:
  6242 ;;		wreg
  6243 ;; Tracked objects:
  6244 ;;		On entry : 1F/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: FFE00/0
  6247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6248 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6250 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6251 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6252 ;;Total ram usage:        5 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    4
  6255 ;; This function calls:
  6256 ;;		Nothing
  6257 ;; This function is called by:
  6258 ;;		_UpdateFirmware
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261  00FB                     _WriteRow:	
  6262  00FB                     l6395:	
  6263                           ; Regs used in _WriteRow: [wreg]
  6264                           
  6265                           
  6266                           ;fwup.c: 68: dest = (dest+off) << 5;
  6267  00FB  0858               	movf	WriteRow@off,w
  6268  00FC  0756               	addwf	WriteRow@dest,w
  6269  00FD  00D9               	movwf	??_WriteRow
  6270  00FE  0857               	movf	WriteRow@dest+1,w
  6271  00FF  1803               	skipnc
  6272  0100  0A57               	incf	WriteRow@dest+1,w
  6273  0101  00DA               	movwf	??_WriteRow+1
  6274  0102  3005               	movlw	5
  6275  0103                     u5195:	
  6276  0103  35D9               	lslf	??_WriteRow,f
  6277  0104  0DDA               	rlf	??_WriteRow+1,f
  6278  0105  0B89               	decfsz	9,f
  6279  0106  2903               	goto	u5195
  6280  0107  0859               	movf	??_WriteRow,w
  6281  0108  00D6               	movwf	WriteRow@dest
  6282  0109  085A               	movf	??_WriteRow+1,w
  6283  010A  00D7               	movwf	WriteRow@dest+1
  6284                           
  6285                           ;fwup.c: 69: fwbuf = (WORD)&WorkQue + (WORD)off << 6;
  6286  010B  0858               	movf	WriteRow@off,w
  6287  010C  00D9               	movwf	??_WriteRow
  6288  010D  3000               	movlw	0
  6289  010E  00DA               	movwf	??_WriteRow+1
  6290  010F  0859               	movf	??_WriteRow,w
  6291  0110  0022               	movlb	2	; select bank2
  6292  0111  00AA               	movwf	_fwbuf^(0+256)
  6293  0112  0020               	movlb	0	; select bank0
  6294  0113  085A               	movf	??_WriteRow+1,w
  6295  0114  0022               	movlb	2	; select bank2
  6296  0115  00AB               	movwf	(_fwbuf+1)^(0+256)
  6297  0116  303C               	movlw	60
  6298  0117  07AA               	addwf	_fwbuf^(0+256),f
  6299  0118  3023               	movlw	35
  6300  0119  3DAB               	addwfc	(_fwbuf+1)^(0+256),f
  6301  011A  3006               	movlw	6
  6302  011B                     u5205:	
  6303  011B  35AA               	lslf	_fwbuf^(0+256),f
  6304  011C  0DAB               	rlf	(_fwbuf+1)^(0+256),f
  6305  011D  0B89               	decfsz	9,f
  6306  011E  291B               	goto	u5205
  6307  011F  138B               	bcf	11,7	; Disable ints so required sequences will execute properly ;# 
  6308  0120  0023               	banksel	402	; Bank 3 ;# 
  6309  0121  0857               	movf	WriteRow@dest+1,w	; Load initial code address ;# 
  6310  0122  0092               	movwf	402	;# 
  6311  0123  0856               	movf	WriteRow@dest,w	;# 
  6312  0124  0091               	movwf	401	;# 
  6313  0125  302A               	movlw	low _fwbuf	; Load initial data address ;# 
  6314  0126  0084               	movwf	4	;# 
  6315  0127  3001               	movlw	high _fwbuf	;# 
  6316  0128  0085               	movwf	5	;# 
  6317  0129  1315               	bcf	405,6	; Not configuration space ;# 
  6318  012A  1515               	bsf	405,2	; Enable writes ;# 
  6319  012B  1695               	bsf	405,5	; Only Load Write Latches ;# 
  6320  012C                     WLOOP:	
  6321                           
  6322                           ;# 
  6323  012C  0012               	moviw fsr0++	;# 
  6324  012D  0093               	movwf	403	; Load first data byte into lower ;# 
  6325  012E  0012               	moviw fsr0++	;# 
  6326  012F  0094               	movwf	404	; Load second data byte into upper ;# 
  6327  0130  0811               	movf	401,w	; Check if lower bits of address are '00000' ;# 
  6328  0131  3A1F               	xorlw	31	; Check if we're on the last of 32 addresses ;# 
  6329  0132  391F               	andlw	31	;# 
  6330  0133  1903               	btfsc	3,2	; Exit if last of 32 words ;# 
  6331  0134  293E               	goto	START_WRITE	;# 
  6332  0135  3055               	movlw	85	; Start of required write sequence: ;# 
  6333  0136  0096               	movwf	406	; Write 55h ;# 
  6334  0137  30AA               	movlw	170	;# 
  6335  0138  0096               	movwf	406	; Write AAh ;# 
  6336  0139  1495               	bsf	405,1	; Set WR bit to begin write ;# 
  6337  013A  0000               	nop	; NOP instructions are forced as processor ;# 
  6338  013B  0000               	nop	; loads program memory write latches ;# 
  6339  013C  0A91               	incf	401,f	; Still loading latches Increment address ;# 
  6340  013D  292C               	goto	WLOOP	; Write next latches ;# 
  6341  013E                     START_WRITE:	
  6342                           
  6343                           ;# 
  6344  013E  1295               	bcf	405,5	; No more loading latches - Actually start Flash program memory write ;# 
  6345  013F  3055               	movlw	85	; Start of required write sequence: ;# 
  6346  0140  0096               	movwf	406	; Write 55h ;# 
  6347  0141  30AA               	movlw	170	;# 
  6348  0142  0096               	movwf	406	; Write AAh ;# 
  6349  0143  1495               	bsf	405,1	; Set WR bit to begin write ;# 
  6350  0144  0000               	nop	; NOP instructions are forced as processor writes all the program memory write latc
      +                          hes simultaneously to program memory. ;# 
  6351  0145  0000               	nop	; After NOPs, the processor stalls until the self-write process in complete after w
      +                          rite processor continues with 3rd instruction ;# 
  6352  0146  1115               	bcf	405,2	; Disable writes ;# 
  6353  0147  178B               	bsf	11,7	; Enable interrupts ;# 
  6354  0148                     l941:	
  6355  0148  0008               	return
  6356  0149                     __end_of_WriteRow:	
  6357                           
  6358 ;; *************** function _VerifyRow *****************
  6359 ;; Defined at:
  6360 ;;		line 124 in file "fwup.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  dest            2    6[BANK0 ] unsigned short 
  6363 ;;  off             1    8[BANK0 ] unsigned char 
  6364 ;; Auto vars:     Size  Location     Type
  6365 ;;		None
  6366 ;; Return value:  Size  Location     Type
  6367 ;;                  1    wreg      enum E5
  6368 ;; Registers used:
  6369 ;;		wreg
  6370 ;; Tracked objects:
  6371 ;;		On entry : 1F/0
  6372 ;;		On exit  : 0/0
  6373 ;;		Unchanged: FFE00/0
  6374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6375 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6378 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6379 ;;Total ram usage:        5 bytes
  6380 ;; Hardware stack levels used:    1
  6381 ;; Hardware stack levels required when called:    4
  6382 ;; This function calls:
  6383 ;;		Nothing
  6384 ;; This function is called by:
  6385 ;;		_UpdateFirmware
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388  0149                     _VerifyRow:	
  6389  0149                     l6397:	
  6390                           ; Regs used in _VerifyRow: [wreg]
  6391                           
  6392                           
  6393                           ;fwup.c: 125: dest = (dest+off) << 5;
  6394  0149  0858               	movf	VerifyRow@off,w
  6395  014A  0756               	addwf	VerifyRow@dest,w
  6396  014B  00D9               	movwf	??_VerifyRow
  6397  014C  0857               	movf	VerifyRow@dest+1,w
  6398  014D  1803               	skipnc
  6399  014E  0A57               	incf	VerifyRow@dest+1,w
  6400  014F  00DA               	movwf	??_VerifyRow+1
  6401  0150  3005               	movlw	5
  6402  0151                     u5215:	
  6403  0151  35D9               	lslf	??_VerifyRow,f
  6404  0152  0DDA               	rlf	??_VerifyRow+1,f
  6405  0153  0B89               	decfsz	9,f
  6406  0154  2951               	goto	u5215
  6407  0155  0859               	movf	??_VerifyRow,w
  6408  0156  00D6               	movwf	VerifyRow@dest
  6409  0157  085A               	movf	??_VerifyRow+1,w
  6410  0158  00D7               	movwf	VerifyRow@dest+1
  6411                           
  6412                           ;fwup.c: 126: fwbuf = (WORD)&WorkQue + (WORD)off << 6;
  6413  0159  0858               	movf	VerifyRow@off,w
  6414  015A  00D9               	movwf	??_VerifyRow
  6415  015B  3000               	movlw	0
  6416  015C  00DA               	movwf	??_VerifyRow+1
  6417  015D  0859               	movf	??_VerifyRow,w
  6418  015E  0022               	movlb	2	; select bank2
  6419  015F  00AA               	movwf	_fwbuf^(0+256)
  6420  0160  0020               	movlb	0	; select bank0
  6421  0161  085A               	movf	??_VerifyRow+1,w
  6422  0162  0022               	movlb	2	; select bank2
  6423  0163  00AB               	movwf	(_fwbuf+1)^(0+256)
  6424  0164  303C               	movlw	60
  6425  0165  07AA               	addwf	_fwbuf^(0+256),f
  6426  0166  3023               	movlw	35
  6427  0167  3DAB               	addwfc	(_fwbuf+1)^(0+256),f
  6428  0168  3006               	movlw	6
  6429  0169                     u5225:	
  6430  0169  35AA               	lslf	_fwbuf^(0+256),f
  6431  016A  0DAB               	rlf	(_fwbuf+1)^(0+256),f
  6432  016B  0B89               	decfsz	9,f
  6433  016C  2969               	goto	u5225
  6434  016D  3001               	movlw	1	;# 
  6435  016E  00D6               	movwf	?_VerifyRow	;# 
  6436  016F  0023               	banksel	401	; Select Bank for PMCON registers ;# 
  6437  0170  302A               	movlw	low _fwbuf	; Load initial data address ;# 
  6438  0171  0084               	movwf	4	;# 
  6439  0172  3001               	movlw	high _fwbuf	;# 
  6440  0173  0085               	movwf	5	;# 
  6441  0174  3056               	movlw	VerifyRow@dest	; Load initial code address ;# 
  6442  0175  0086               	movwf	6	;# 
  6443  0176  3057               	movlw	VerifyRow@dest+1	;# 
  6444  0177  0087               	movwf	7	;# 
  6445  0178                     VLOOP:	
  6446                           
  6447                           ;# 
  6448  0178  0016               	moviw fsr1++	;# 
  6449  0179  0091               	movwf	401	; Store LSB of address ;# 
  6450  017A  0016               	moviw fsr1++	;# 
  6451  017B  0092               	movwf	402	; Store MSB of address ;# 
  6452  017C  1315               	bcf	405,6	; Do not select Configuration Space ;# 
  6453  017D  1415               	bsf	405,0	; Initiate read ;# 
  6454  017E  0000               	nop	;# 
  6455  017F  0000               	nop	;# 
  6456  0180  0012               	moviw fsr0++	;# 
  6457  0181  0613               	xorwf	403,w	; Compare LSB of word ;# 
  6458  0182  1D03               	btfss	3,2	; Fail if non-zero ;# 
  6459  0183  298E               	goto	FAIL_VERIFY	;# 
  6460  0184  0012               	moviw fsr0++	;# 
  6461  0185  0614               	xorwf	404,w	; Compare MSB of word ;# 
  6462  0186  1D03               	btfss	3,2	; Fail if non-zero ;# 
  6463  0187  298E               	goto	FAIL_VERIFY	;# 
  6464  0188  0811               	movf	401,w	; Check if lower bits of address are '00000' ;# 
  6465  0189  3A1F               	xorlw	31	; Check if we're on the last of 32 addresses ;# 
  6466  018A  391F               	andlw	31	;# 
  6467  018B  1903               	btfsc	3,2	; Exit if last of 32 words ;# 
  6468  018C  2990               	goto	VERIFY_DONE	;# 
  6469  018D  2978               	goto	VLOOP	;# 
  6470  018E                     FAIL_VERIFY:	
  6471                           
  6472                           ;# 
  6473  018E  3000               	movlw	0	;# 
  6474  018F  00D6               	movwf	?_VerifyRow	;# 
  6475  0190                     VERIFY_DONE:	
  6476  0190                     l944:	
  6477                           ;# 
  6478                           
  6479  0190  0008               	return
  6480  0191                     __end_of_VerifyRow:	
  6481                           
  6482                           	psect	usb
  6483  0191                     __pusb:	
  6484 ;; *************** function _USBDeviceTasks *****************
  6485 ;; Defined at:
  6486 ;;		line 669 in file "../USB/usb_device.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;		None
  6489 ;; Auto vars:     Size  Location     Type
  6490 ;;  i               1    8[BANK1 ] unsigned char 
  6491 ;; Return value:  Size  Location     Type
  6492 ;;		None               void
  6493 ;; Registers used:
  6494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6495 ;; Tracked objects:
  6496 ;;		On entry : 0/1
  6497 ;;		On exit  : 1F/0
  6498 ;;		Unchanged: FFFE0/0
  6499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6501 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6502 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6503 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6504 ;;Total ram usage:        2 bytes
  6505 ;; Hardware stack levels used:    1
  6506 ;; Hardware stack levels required when called:   12
  6507 ;; This function calls:
  6508 ;;		_USBWakeFromSuspend
  6509 ;;		_USBDeviceInit
  6510 ;;		_USBSuspend
  6511 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  6512 ;;		_USBCtrlEPAllowStatusStage
  6513 ;;		_USBStallHandler
  6514 ;;		_USBCtrlEPService
  6515 ;; This function is called by:
  6516 ;;		_main
  6517 ;;		_UpdateFirmware
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           
  6522                           ;psect for function _USBDeviceTasks
  6523  0191                     _USBDeviceTasks:	
  6524  0191                     l5203:	
  6525                           ; Regs used in _USBDeviceTasks: [allreg]
  6526                           
  6527  0191                     l5211:	
  6528                           ;usb_device.c: 670: BYTE i;
  6529                           ;usb_device.c: 696: if (1 != 1)
  6530                           
  6531                           
  6532                           ;usb_device.c: 735: }
  6533                           ;usb_device.c: 757: if(USBDeviceState == DETACHED_STATE)
  6534  0191  0021               	movlb	1	; select bank1
  6535  0192  08EB               	movf	_USBDeviceState^(0+128),f
  6536  0193  1D03               	skipz
  6537  0194  2996               	goto	u3771
  6538  0195  2997               	goto	u3770
  6539  0196                     u3771:	
  6540  0196  29A9               	goto	l5221
  6541  0197                     u3770:	
  6542  0197                     l5213:	
  6543                           
  6544                           ;usb_device.c: 758: {
  6545                           ;usb_device.c: 760: UCON = 0;
  6546  0197  003D               	movlb	29	; select bank29
  6547  0198  018E               	clrf	14	;volatile
  6548                           
  6549                           ;usb_device.c: 763: UIE = 0;
  6550  0199  0192               	clrf	18	;volatile
  6551  019A                     l5215:	
  6552                           
  6553                           ;usb_device.c: 767: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  6554  019A  3016               	movlw	22
  6555  019B  0091               	movwf	17	;volatile
  6556  019C                     l5217:	
  6557  019C  309F               	movlw	159
  6558  019D  0097               	movwf	23	;volatile
  6559  019E                     l5219:	
  6560  019E  307B               	movlw	123
  6561  019F  0092               	movwf	18	;volatile
  6562                           
  6563                           ;usb_device.c: 770: while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  6564  01A0  29A2               	goto	l140
  6565  01A1                     l141:	
  6566  01A1  158E               	bsf	14,3	;volatile
  6567  01A2                     l140:	
  6568  01A2  1D8E               	btfss	14,3	;volatile
  6569  01A3  29A5               	goto	u3781
  6570  01A4  29A6               	goto	u3780
  6571  01A5                     u3781:	
  6572  01A5  29A1               	goto	l141
  6573  01A6                     u3780:	
  6574  01A6                     l142:	
  6575                           
  6576                           ;usb_device.c: 773: USBDeviceState = ATTACHED_STATE;
  6577  01A6  0021               	movlb	1	; select bank1
  6578  01A7  01EB               	clrf	_USBDeviceState^(0+128)
  6579  01A8  0AEB               	incf	_USBDeviceState^(0+128),f
  6580  01A9                     l5221:	
  6581                           
  6582                           ;usb_device.c: 778: }
  6583                           ;usb_device.c: 781: if(USBDeviceState == ATTACHED_STATE)
  6584  01A9  036B               	decf	_USBDeviceState^(0+128),w
  6585  01AA  1D03               	skipz
  6586  01AB  29AD               	goto	u3791
  6587  01AC  29AE               	goto	u3790
  6588  01AD                     u3791:	
  6589  01AD  29BA               	goto	l5233
  6590  01AE                     u3790:	
  6591  01AE                     l5223:	
  6592                           
  6593                           ;usb_device.c: 782: {
  6594                           ;usb_device.c: 792: if(!UCONbits.SE0)
  6595  01AE  003D               	movlb	29	; select bank29
  6596  01AF  1A8E               	btfsc	14,5	;volatile
  6597  01B0  29B2               	goto	u3801
  6598  01B1  29B3               	goto	u3800
  6599  01B2                     u3801:	
  6600  01B2  29BA               	goto	l5233
  6601  01B3                     u3800:	
  6602  01B3                     l5225:	
  6603                           
  6604                           ;usb_device.c: 793: {
  6605                           ;usb_device.c: 794: UIR = 0;;
  6606  01B3  0190               	clrf	16	;volatile
  6607                           
  6608                           ;usb_device.c: 796: UIE=0;
  6609  01B4  0192               	clrf	18	;volatile
  6610  01B5                     l5227:	
  6611                           
  6612                           ;usb_device.c: 798: UIEbits.URSTIE = 1;
  6613  01B5  1412               	bsf	18,0	;volatile
  6614  01B6                     l5229:	
  6615                           
  6616                           ;usb_device.c: 799: UIEbits.IDLEIE = 1;
  6617  01B6  1612               	bsf	18,4	;volatile
  6618  01B7                     l5231:	
  6619                           
  6620                           ;usb_device.c: 800: USBDeviceState = POWERED_STATE;
  6621  01B7  3002               	movlw	2
  6622  01B8  0021               	movlb	1	; select bank1
  6623  01B9  00EB               	movwf	_USBDeviceState^(0+128)
  6624  01BA                     l5233:	
  6625                           
  6626                           ;usb_device.c: 801: }
  6627                           ;usb_device.c: 802: }
  6628                           ;usb_device.c: 818: if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  6629  01BA  003D               	movlb	29	; select bank29
  6630  01BB  1D10               	btfss	16,2	;volatile
  6631  01BC  29BE               	goto	u3811
  6632  01BD  29BF               	goto	u3810
  6633  01BE                     u3811:	
  6634  01BE  29C7               	goto	l5241
  6635  01BF                     u3810:	
  6636  01BF                     l5235:	
  6637  01BF  1D12               	btfss	18,2	;volatile
  6638  01C0  29C2               	goto	u3821
  6639  01C1  29C3               	goto	u3820
  6640  01C2                     u3821:	
  6641  01C2  29C7               	goto	l5241
  6642  01C3                     u3820:	
  6643  01C3                     l5237:	
  6644                           
  6645                           ;usb_device.c: 819: {
  6646                           ;usb_device.c: 820: (UIR &= 0xFB);
  6647  01C3  1110               	bcf	16,2	;volatile
  6648  01C4                     l5239:	
  6649                           
  6650                           ;usb_device.c: 824: USBWakeFromSuspend();
  6651  01C4  3187  27EC  3181   	fcall	_USBWakeFromSuspend
  6652  01C7                     l5241:	
  6653                           
  6654                           ;usb_device.c: 826: }
  6655                           ;usb_device.c: 831: if(UCONbits.SUSPND==1)
  6656  01C7  1C8E               	btfss	14,1	;volatile
  6657  01C8  29CA               	goto	u3831
  6658  01C9  29CB               	goto	u3830
  6659  01CA                     u3831:	
  6660  01CA  29CE               	goto	l146
  6661  01CB                     u3830:	
  6662  01CB                     l5243:	
  6663                           
  6664                           ;usb_device.c: 832: {
  6665                           ;usb_device.c: 833: PIR2bits.USBIF = 0;;
  6666  01CB  0020               	movlb	0	; select bank0
  6667  01CC  1112               	bcf	18,2	;volatile
  6668                           
  6669                           ;usb_device.c: 834: return;
  6670  01CD  2A87               	goto	l138
  6671  01CE                     l146:	
  6672                           
  6673                           ;usb_device.c: 835: }
  6674                           ;usb_device.c: 847: if(UIRbits.URSTIF && UIEbits.URSTIE)
  6675  01CE  1C10               	btfss	16,0	;volatile
  6676  01CF  29D1               	goto	u3841
  6677  01D0  29D2               	goto	u3840
  6678  01D1                     u3841:	
  6679  01D1  29DD               	goto	l5253
  6680  01D2                     u3840:	
  6681  01D2                     l5245:	
  6682  01D2  1C12               	btfss	18,0	;volatile
  6683  01D3  29D5               	goto	u3851
  6684  01D4  29D6               	goto	u3850
  6685  01D5                     u3851:	
  6686  01D5  29DD               	goto	l5253
  6687  01D6                     u3850:	
  6688  01D6                     l5247:	
  6689                           
  6690                           ;usb_device.c: 848: {
  6691                           ;usb_device.c: 849: USBDeviceInit();
  6692  01D6  3196  26BF  3181   	fcall	_USBDeviceInit
  6693  01D9                     l5249:	
  6694                           
  6695                           ;usb_device.c: 853: ;
  6696                           ;usb_device.c: 855: USBDeviceState = DEFAULT_STATE;
  6697  01D9  3004               	movlw	4
  6698  01DA  00EB               	movwf	_USBDeviceState^(0+128)
  6699  01DB                     l5251:	
  6700                           
  6701                           ;usb_device.c: 865: (UIR &= 0xFE);
  6702  01DB  003D               	movlb	29	; select bank29
  6703  01DC  1010               	bcf	16,0	;volatile
  6704  01DD                     l5253:	
  6705                           
  6706                           ;usb_device.c: 866: }
  6707                           ;usb_device.c: 871: if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  6708  01DD  1E10               	btfss	16,4	;volatile
  6709  01DE  29E0               	goto	u3861
  6710  01DF  29E1               	goto	u3860
  6711  01E0                     u3861:	
  6712  01E0  29EA               	goto	l5261
  6713  01E1                     u3860:	
  6714  01E1                     l5255:	
  6715  01E1  1E12               	btfss	18,4	;volatile
  6716  01E2  29E4               	goto	u3871
  6717  01E3  29E5               	goto	u3870
  6718  01E4                     u3871:	
  6719  01E4  29EA               	goto	l5261
  6720  01E5                     u3870:	
  6721  01E5                     l5257:	
  6722                           
  6723                           ;usb_device.c: 872: {
  6724                           ;usb_device.c: 877: USBSuspend();
  6725  01E5  3196  2605  3181   	fcall	_USBSuspend
  6726  01E8                     l5259:	
  6727                           
  6728                           ;usb_device.c: 880: (UIR &= 0xEF);
  6729  01E8  003D               	movlb	29	; select bank29
  6730  01E9  1210               	bcf	16,4	;volatile
  6731  01EA                     l5261:	
  6732                           
  6733                           ;usb_device.c: 881: }
  6734                           ;usb_device.c: 883: if(UIRbits.SOFIF)
  6735  01EA  1F10               	btfss	16,6	;volatile
  6736  01EB  29ED               	goto	u3881
  6737  01EC  29EE               	goto	u3880
  6738  01ED                     u3881:	
  6739  01ED  2A0F               	goto	l5275
  6740  01EE                     u3880:	
  6741  01EE                     l5263:	
  6742                           
  6743                           ;usb_device.c: 884: {
  6744                           ;usb_device.c: 885: if(UIEbits.SOFIE)
  6745  01EE  1F12               	btfss	18,6	;volatile
  6746  01EF  29F1               	goto	u3891
  6747  01F0  29F2               	goto	u3890
  6748  01F1                     u3891:	
  6749  01F1  29FF               	goto	l5267
  6750  01F2                     u3890:	
  6751  01F2                     l5265:	
  6752                           
  6753                           ;usb_device.c: 886: {
  6754                           ;usb_device.c: 887: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SOF,0,1);
  6755  01F2  3073               	movlw	115
  6756  01F3  0020               	movlb	0	; select bank0
  6757  01F4  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  6758  01F5  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  6759  01F6  3000               	movlw	0
  6760  01F7  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  6761  01F8  3000               	movlw	0
  6762  01F9  00E3               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  6763  01FA  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  6764  01FB  0AE4               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+4,f
  6765  01FC  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  6766  01FD  2288  3181         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  6767  01FF                     l5267:	
  6768                           
  6769                           ;usb_device.c: 888: }
  6770                           ;usb_device.c: 889: (UIR &= 0xBF);
  6771  01FF  003D               	movlb	29	; select bank29
  6772  0200  1310               	bcf	16,6	;volatile
  6773  0201                     l5269:	
  6774                           
  6775                           ;usb_device.c: 914: if(USBStatusStageTimeoutCounter != 0u)
  6776  0201  0022               	movlb	2	; select bank2
  6777  0202  083A               	movf	_USBStatusStageTimeoutCounter^(0+256),w
  6778  0203  1D03               	skipz
  6779  0204  2A06               	goto	u3900
  6780  0205  2A07               	goto	l151
  6781  0206                     u3900:	
  6782  0206                     l5271:	
  6783                           
  6784                           ;usb_device.c: 915: {
  6785                           ;usb_device.c: 916: USBStatusStageTimeoutCounter--;
  6786  0206  03BA               	decf	_USBStatusStageTimeoutCounter^(0+256),f
  6787  0207                     l151:	
  6788                           
  6789                           ;usb_device.c: 917: }
  6790                           ;usb_device.c: 923: if(USBStatusStageTimeoutCounter == 0)
  6791  0207  08BA               	movf	_USBStatusStageTimeoutCounter^(0+256),f
  6792  0208  1D03               	skipz
  6793  0209  2A0B               	goto	u3911
  6794  020A  2A0C               	goto	u3910
  6795  020B                     u3911:	
  6796  020B  2A0F               	goto	l5275
  6797  020C                     u3910:	
  6798  020C                     l5273:	
  6799                           
  6800                           ;usb_device.c: 924: {
  6801                           ;usb_device.c: 925: USBCtrlEPAllowStatusStage();
  6802  020C  3187  2796  3181   	fcall	_USBCtrlEPAllowStatusStage
  6803  020F                     l5275:	
  6804                           
  6805                           ;usb_device.c: 926: }
  6806                           ;usb_device.c: 928: }
  6807                           ;usb_device.c: 930: if(UIRbits.STALLIF && UIEbits.STALLIE)
  6808  020F  003D               	movlb	29	; select bank29
  6809  0210  1E90               	btfss	16,5	;volatile
  6810  0211  2A13               	goto	u3921
  6811  0212  2A14               	goto	u3920
  6812  0213                     u3921:	
  6813  0213  2A1B               	goto	l5281
  6814  0214                     u3920:	
  6815  0214                     l5277:	
  6816  0214  1E92               	btfss	18,5	;volatile
  6817  0215  2A17               	goto	u3931
  6818  0216  2A18               	goto	u3930
  6819  0217                     u3931:	
  6820  0217  2A1B               	goto	l5281
  6821  0218                     u3930:	
  6822  0218                     l5279:	
  6823                           
  6824                           ;usb_device.c: 931: {
  6825                           ;usb_device.c: 932: USBStallHandler();
  6826  0218  3196  2614  3181   	fcall	_USBStallHandler
  6827  021B                     l5281:	
  6828                           
  6829                           ;usb_device.c: 933: }
  6830                           ;usb_device.c: 935: if(UIRbits.UERRIF && UIEbits.UERRIE)
  6831  021B  1C90               	btfss	16,1	;volatile
  6832  021C  2A1E               	goto	u3941
  6833  021D  2A1F               	goto	u3940
  6834  021E                     u3941:	
  6835  021E  2A33               	goto	l5289
  6836  021F                     u3940:	
  6837  021F                     l5283:	
  6838  021F  1C92               	btfss	18,1	;volatile
  6839  0220  2A22               	goto	u3951
  6840  0221  2A23               	goto	u3950
  6841  0222                     u3951:	
  6842  0222  2A33               	goto	l5289
  6843  0223                     u3950:	
  6844  0223                     l5285:	
  6845                           
  6846                           ;usb_device.c: 936: {
  6847                           ;usb_device.c: 937: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_BUS_ERROR,0,1);
  6848  0223  30FF               	movlw	255
  6849  0224  0020               	movlb	0	; select bank0
  6850  0225  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  6851  0226  307F               	movlw	127
  6852  0227  00E1               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  6853  0228  3000               	movlw	0
  6854  0229  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  6855  022A  3000               	movlw	0
  6856  022B  00E3               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  6857  022C  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  6858  022D  0AE4               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+4,f
  6859  022E  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  6860  022F  2288  3181         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  6861  0231                     l5287:	
  6862                           
  6863                           ;usb_device.c: 938: UEIR = 0;;
  6864  0231  003D               	movlb	29	; select bank29
  6865  0232  0193               	clrf	19	;volatile
  6866  0233                     l5289:	
  6867                           
  6868                           ;usb_device.c: 946: }
  6869                           ;usb_device.c: 953: if(USBDeviceState < DEFAULT_STATE)
  6870  0233  3004               	movlw	4
  6871  0234  0021               	movlb	1	; select bank1
  6872  0235  026B               	subwf	_USBDeviceState^(0+128),w
  6873  0236  1803               	skipnc
  6874  0237  2A39               	goto	u3961
  6875  0238  2A3A               	goto	u3960
  6876  0239                     u3961:	
  6877  0239  2A3B               	goto	l155
  6878  023A                     u3960:	
  6879  023A  29CB               	goto	l5243
  6880  023B                     l155:	
  6881                           
  6882                           ;usb_device.c: 957: }
  6883                           ;usb_device.c: 962: if(UIEbits.TRNIE)
  6884  023B  003D               	movlb	29	; select bank29
  6885  023C  1D92               	btfss	18,3	;volatile
  6886  023D  2A3F               	goto	u3971
  6887  023E  2A40               	goto	u3970
  6888  023F                     u3971:	
  6889  023F  29CB               	goto	l5243
  6890  0240                     u3970:	
  6891  0240                     l5293:	
  6892                           
  6893                           ;usb_device.c: 963: {
  6894                           ;usb_device.c: 964: for(i = 0; i < 4u; i++)
  6895  0240  0021               	movlb	1	; select bank1
  6896  0241  01A8               	clrf	USBDeviceTasks@i^(0+128)
  6897  0242                     l157:	
  6898                           
  6899                           ;usb_device.c: 965: {
  6900                           ;usb_device.c: 966: if(UIRbits.TRNIF)
  6901  0242  003D               	movlb	29	; select bank29
  6902  0243  1D90               	btfss	16,3	;volatile
  6903  0244  2A46               	goto	u3981
  6904  0245  2A47               	goto	u3980
  6905  0246                     u3981:	
  6906  0246  29CB               	goto	l5243
  6907  0247                     u3980:	
  6908  0247                     l5299:	
  6909                           
  6910                           ;usb_device.c: 967: {
  6911                           ;usb_device.c: 969: USTATcopy.Val = USTAT;
  6912  0247  080F               	movf	15,w	;volatile
  6913  0248  0021               	movlb	1	; select bank1
  6914  0249  00EF               	movwf	_USTATcopy^(0+128)
  6915  024A                     l5301:	
  6916                           
  6917                           ;usb_device.c: 970: endpoint_number = USTATcopy.endpoint_number;
  6918  024A  0C6F               	rrf	_USTATcopy^(0+128),w
  6919  024B  00A7               	movwf	??_USBDeviceTasks^(0+128)
  6920  024C  0CA7               	rrf	??_USBDeviceTasks^(0+128),f
  6921  024D  0C27               	rrf	??_USBDeviceTasks^(0+128),w
  6922  024E  390F               	andlw	15
  6923  024F  0022               	movlb	2	; select bank2
  6924  0250  00BC               	movwf	_endpoint_number^(0+256)
  6925  0251                     l5303:	
  6926                           
  6927                           ;usb_device.c: 972: (UIR &= 0xF7);
  6928  0251  003D               	movlb	29	; select bank29
  6929  0252  1190               	bcf	16,3	;volatile
  6930  0253                     l5305:	
  6931                           
  6932                           ;usb_device.c: 977: if(USTATcopy.direction == 0)
  6933  0253  0021               	movlb	1	; select bank1
  6934  0254  196F               	btfsc	_USTATcopy^(0+128),2
  6935  0255  2A57               	goto	u3991
  6936  0256  2A58               	goto	u3990
  6937  0257                     u3991:	
  6938  0257  2A61               	goto	l5309
  6939  0258                     u3990:	
  6940  0258                     l5307:	
  6941                           
  6942                           ;usb_device.c: 978: {
  6943                           ;usb_device.c: 979: ep_data_out[endpoint_number].bits.ping_pong_state ^= 1;
  6944  0258  0022               	movlb	2	; select bank2
  6945  0259  083C               	movf	_endpoint_number^(0+256),w
  6946  025A  3E28               	addlw	_ep_data_out& (0+255)
  6947  025B  0086               	movwf	6
  6948  025C  3001               	movlw	1	; select bank2/3
  6949  025D  0087               	movwf	7
  6950  025E  3001               	movlw	1
  6951  025F  0681               	xorwf	1,f
  6952                           
  6953                           ;usb_device.c: 980: }
  6954  0260  2A69               	goto	l5311
  6955  0261                     l5309:	
  6956                           
  6957                           ;usb_device.c: 981: else
  6958                           ;usb_device.c: 982: {
  6959                           ;usb_device.c: 983: ep_data_in[endpoint_number].bits.ping_pong_state ^= 1;
  6960  0261  0022               	movlb	2	; select bank2
  6961  0262  083C               	movf	_endpoint_number^(0+256),w
  6962  0263  3E26               	addlw	_ep_data_in& (0+255)
  6963  0264  0086               	movwf	6
  6964  0265  3001               	movlw	1	; select bank2/3
  6965  0266  0087               	movwf	7
  6966  0267  3001               	movlw	1
  6967  0268  0681               	xorwf	1,f
  6968  0269                     l5311:	
  6969                           
  6970                           ;usb_device.c: 984: }
  6971                           ;usb_device.c: 989: if(endpoint_number == 0)
  6972  0269  08BC               	movf	_endpoint_number^(0+256),f
  6973  026A  1D03               	skipz
  6974  026B  2A6D               	goto	u4001
  6975  026C  2A6E               	goto	u4000
  6976  026D                     u4001:	
  6977  026D  2A72               	goto	l5315
  6978  026E                     u4000:	
  6979  026E                     l5313:	
  6980                           
  6981                           ;usb_device.c: 990: {
  6982                           ;usb_device.c: 991: USBCtrlEPService();
  6983  026E  3186  26B7  3181   	fcall	_USBCtrlEPService
  6984                           
  6985                           ;usb_device.c: 992: }
  6986  0271  2A7E               	goto	l5317
  6987  0272                     l5315:	
  6988                           
  6989                           ;usb_device.c: 993: else
  6990                           ;usb_device.c: 994: {
  6991                           ;usb_device.c: 995: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER,(BYTE*)&USTATcopy.Val
      +                          ,0);
  6992  0272  3072               	movlw	114
  6993  0273  0020               	movlb	0	; select bank0
  6994  0274  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  6995  0275  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  6996  0276  30EF               	movlw	_USTATcopy& (0+255)
  6997  0277  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  6998  0278  3000               	movlw	0
  6999  0279  00E3               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  7000  027A  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  7001  027B  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  7002  027C  2288  3181         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  7003  027E                     l5317:	
  7004  027E  0021               	movlb	1	; select bank1
  7005  027F  0AA8               	incf	USBDeviceTasks@i^(0+128),f
  7006  0280                     l5319:	
  7007  0280  3004               	movlw	4
  7008  0281  0228               	subwf	USBDeviceTasks@i^(0+128),w
  7009  0282  1C03               	skipc
  7010  0283  2A85               	goto	u4011
  7011  0284  2A86               	goto	u4010
  7012  0285                     u4011:	
  7013  0285  2A42               	goto	l157
  7014  0286                     u4010:	
  7015  0286  29CB               	goto	l5243
  7016  0287                     l138:	
  7017  0287  0008               	return
  7018  0288                     __end_of_USBDeviceTasks:	
  7019                           
  7020 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
  7021 ;; Defined at:
  7022 ;;		line 630 in file "main.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;  event           2   16[BANK0 ] int 
  7025 ;;  pdata           2   18[BANK0 ] PTR void 
  7026 ;;		 -> USTATcopy(1), USBActiveConfiguration(1), NULL(0), BDT(32), 
  7027 ;;  size            2   20[BANK0 ] unsigned short 
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;		None
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  1    wreg      enum E5
  7032 ;; Registers used:
  7033 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7034 ;; Tracked objects:
  7035 ;;		On entry : 1F/0
  7036 ;;		On exit  : 1E/0
  7037 ;;		Unchanged: FFFE0/0
  7038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7039 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7042 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7043 ;;Total ram usage:        6 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; Hardware stack levels required when called:    7
  7046 ;; This function calls:
  7047 ;;		_USBCB_SOF_Handler
  7048 ;;		_USBCBSuspend
  7049 ;;		_USBCBWakeFromSuspend
  7050 ;;		_USBCBInitEP
  7051 ;;		_USBCBStdSetDscHandler
  7052 ;;		_USBCBCheckOtherReq
  7053 ;;		_USBCBErrorHandler
  7054 ;; This function is called by:
  7055 ;;		_USBDeviceTasks
  7056 ;;		_USBStdSetCfgHandler
  7057 ;;		_USBSuspend
  7058 ;;		_USBWakeFromSuspend
  7059 ;;		_USBCtrlTrfSetupHandler
  7060 ;;		_USBCheckStdRequest
  7061 ;;		_USBStdFeatureReqHandler
  7062 ;; This function uses a non-reentrant model
  7063 ;;
  7064  0288                     _USER_USB_CALLBACK_EVENT_HANDLER:	
  7065  0288                     l5333:	
  7066                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-status,0+pclath+cstack]
  7067                           
  7068                           
  7069                           ;main.c: 631: switch( event )
  7070  0288  2AA5               	goto	l5351
  7071  0289                     l5335:	
  7072                           
  7073                           ;main.c: 637: USBCB_SOF_Handler();
  7074  0289  3180  2003  3181   	fcall	_USBCB_SOF_Handler
  7075                           
  7076                           ;main.c: 638: break;
  7077  028C  2ACC               	goto	l919
  7078  028D                     l5337:	
  7079                           
  7080                           ;main.c: 640: USBCBSuspend();
  7081  028D  3187  27FE  3181   	fcall	_USBCBSuspend
  7082                           
  7083                           ;main.c: 641: break;
  7084  0290  2ACC               	goto	l919
  7085  0291                     l5339:	
  7086                           
  7087                           ;main.c: 643: USBCBWakeFromSuspend();
  7088  0291  3187  27FF  3181   	fcall	_USBCBWakeFromSuspend
  7089                           
  7090                           ;main.c: 644: break;
  7091  0294  2ACC               	goto	l919
  7092  0295                     l5341:	
  7093                           
  7094                           ;main.c: 646: USBCBInitEP();
  7095  0295  3196  2668  3181   	fcall	_USBCBInitEP
  7096                           
  7097                           ;main.c: 647: break;
  7098  0298  2ACC               	goto	l919
  7099  0299                     l5343:	
  7100                           
  7101                           ;main.c: 649: USBCBStdSetDscHandler();
  7102  0299  3188  2002  3181   	fcall	_USBCBStdSetDscHandler
  7103                           
  7104                           ;main.c: 650: break;
  7105  029C  2ACC               	goto	l919
  7106  029D                     l5345:	
  7107                           
  7108                           ;main.c: 652: USBCBCheckOtherReq();
  7109  029D  3187  27FC  3181   	fcall	_USBCBCheckOtherReq
  7110                           
  7111                           ;main.c: 653: break;
  7112  02A0  2ACC               	goto	l919
  7113  02A1                     l5347:	
  7114                           
  7115                           ;main.c: 655: USBCBErrorHandler();
  7116  02A1  3180  2002  3181   	fcall	_USBCBErrorHandler
  7117                           
  7118                           ;main.c: 656: break;
  7119  02A4  2ACC               	goto	l919
  7120  02A5                     l5351:	
  7121                           
  7122                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  7123                           ; Switch size 1, requested type "space"
  7124                           ; Number of cases is 2, Range of values is 0 to 127
  7125                           ; switch strategies available:
  7126                           ; Name         Instructions Cycles
  7127                           ; simple_byte            7     4 (average)
  7128                           ; direct_byte          262     6 (fixed)
  7129                           ; jumptable            260     6 (fixed)
  7130                           ; rangetable           132     6 (fixed)
  7131                           ; spacedrange          261     8 (fixed)
  7132                           ; locatedrange         128     3 (fixed)
  7133                           ;	Chosen strategy is simple_byte
  7134  02A5  0861               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,w
  7135  02A6  3A00               	xorlw	0	; case 0
  7136  02A7  1903               	skipnz
  7137  02A8  2AAD               	goto	l6627
  7138  02A9  3A7F               	xorlw	127	; case 127
  7139  02AA  1903               	skipnz
  7140  02AB  2AC7               	goto	l6629
  7141  02AC  2ACC               	goto	l919
  7142  02AD                     l6627:	
  7143                           
  7144                           ; Switch size 1, requested type "space"
  7145                           ; Number of cases is 8, Range of values is 1 to 117
  7146                           ; switch strategies available:
  7147                           ; Name         Instructions Cycles
  7148                           ; simple_byte           25    13 (average)
  7149                           ; direct_byte          243     9 (fixed)
  7150                           ; jumptable            263     9 (fixed)
  7151                           ;	Chosen strategy is simple_byte
  7152  02AD  0860               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
  7153  02AE  3A01               	xorlw	1	; case 1
  7154  02AF  1903               	skipnz
  7155  02B0  2A95               	goto	l5341
  7156  02B1  3A03               	xorlw	3	; case 2
  7157  02B2  1903               	skipnz
  7158  02B3  2A99               	goto	l5343
  7159  02B4  3A01               	xorlw	1	; case 3
  7160  02B5  1903               	skipnz
  7161  02B6  2A9D               	goto	l5345
  7162  02B7  3A06               	xorlw	6	; case 5
  7163  02B8  1903               	skipnz
  7164  02B9  2ACC               	goto	l919
  7165  02BA  3A77               	xorlw	119	; case 114
  7166  02BB  1903               	skipnz
  7167  02BC  2ACC               	goto	l919
  7168  02BD  3A01               	xorlw	1	; case 115
  7169  02BE  1903               	skipnz
  7170  02BF  2A89               	goto	l5335
  7171  02C0  3A07               	xorlw	7	; case 116
  7172  02C1  1903               	skipnz
  7173  02C2  2A91               	goto	l5339
  7174  02C3  3A01               	xorlw	1	; case 117
  7175  02C4  1903               	skipnz
  7176  02C5  2A8D               	goto	l5337
  7177  02C6  2ACC               	goto	l919
  7178  02C7                     l6629:	
  7179                           
  7180                           ; Switch size 1, requested type "space"
  7181                           ; Number of cases is 1, Range of values is 255 to 255
  7182                           ; switch strategies available:
  7183                           ; Name         Instructions Cycles
  7184                           ; simple_byte            4     3 (average)
  7185                           ; direct_byte            7     5 (fixed)
  7186                           ; jumptable            263     9 (fixed)
  7187                           ;	Chosen strategy is simple_byte
  7188  02C7  0860               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
  7189  02C8  3AFF               	xorlw	255	; case 255
  7190  02C9  1903               	skipnz
  7191  02CA  2AA1               	goto	l5347
  7192  02CB  2ACC               	goto	l919
  7193  02CC                     l919:	
  7194  02CC  0008               	return
  7195  02CD                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:	
  7196                           
  7197 ;; *************** function _USBTransferOnePacket *****************
  7198 ;; Defined at:
  7199 ;;		line 1173 in file "../USB/usb_device.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;  ep              1    wreg     unsigned char 
  7202 ;;  dir             1    9[BANK0 ] unsigned char 
  7203 ;;  data            1   10[BANK0 ] PTR unsigned char 
  7204 ;;		 -> INPacket(64), OUTPacket(64), 
  7205 ;;  len             1   11[BANK0 ] unsigned char 
  7206 ;; Auto vars:     Size  Location     Type
  7207 ;;  ep              1   14[BANK0 ] unsigned char 
  7208 ;;  handle          1   15[BANK0 ] PTR volatile struct __BD
  7209 ;;		 -> NULL(0), BDT(32), 
  7210 ;; Return value:  Size  Location     Type
  7211 ;;                  1    wreg      PTR void 
  7212 ;; Registers used:
  7213 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7214 ;; Tracked objects:
  7215 ;;		On entry : 1F/0
  7216 ;;		On exit  : 1F/0
  7217 ;;		Unchanged: FFFE0/0
  7218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7219 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7223 ;;Total ram usage:        7 bytes
  7224 ;; Hardware stack levels used:    1
  7225 ;; Hardware stack levels required when called:    4
  7226 ;; This function calls:
  7227 ;;		Nothing
  7228 ;; This function is called by:
  7229 ;;		_ProcessIO
  7230 ;;		_USBCBInitEP
  7231 ;;		_UpdateFirmware
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234  02CD                     _USBTransferOnePacket:	
  7235                           
  7236                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l-status,0]
  7237                           ;USBTransferOnePacket@ep stored from wreg
  7238  02CD  00DE               	movwf	USBTransferOnePacket@ep
  7239  02CE                     l5463:	
  7240                           
  7241                           ;usb_device.c: 1174: volatile BDT_ENTRY* handle;
  7242                           ;usb_device.c: 1177: if(dir != 0)
  7243  02CE  0859               	movf	USBTransferOnePacket@dir,w
  7244  02CF  1D03               	skipz
  7245  02D0  2AD2               	goto	u4160
  7246  02D1  2AD9               	goto	l5467
  7247  02D2                     u4160:	
  7248  02D2                     l5465:	
  7249                           
  7250                           ;usb_device.c: 1178: {
  7251                           ;usb_device.c: 1180: handle = pBDTEntryIn[ep];
  7252  02D2  085E               	movf	USBTransferOnePacket@ep,w
  7253  02D3  3E6A               	addlw	_pBDTEntryIn& (0+255)
  7254  02D4  0086               	movwf	6
  7255  02D5  0187               	clrf	7
  7256  02D6  0801               	movf	1,w
  7257  02D7  00DF               	movwf	USBTransferOnePacket@handle
  7258                           
  7259                           ;usb_device.c: 1181: }
  7260  02D8  2AE0               	goto	l5469
  7261  02D9                     l5467:	
  7262                           
  7263                           ;usb_device.c: 1182: else
  7264                           ;usb_device.c: 1183: {
  7265                           ;usb_device.c: 1185: handle = pBDTEntryOut[ep];
  7266  02D9  085E               	movf	USBTransferOnePacket@ep,w
  7267  02DA  3E2C               	addlw	_pBDTEntryOut& (0+255)
  7268  02DB  0086               	movwf	6
  7269  02DC  3001               	movlw	1	; select bank2/3
  7270  02DD  0087               	movwf	7
  7271  02DE  0801               	movf	1,w
  7272  02DF  00DF               	movwf	USBTransferOnePacket@handle
  7273  02E0                     l5469:	
  7274                           
  7275                           ;usb_device.c: 1186: }
  7276                           ;usb_device.c: 1190: if(handle == 0)
  7277  02E0  08DF               	movf	USBTransferOnePacket@handle,f
  7278  02E1  1D03               	skipz
  7279  02E2  2AE4               	goto	u4171
  7280  02E3  2AE5               	goto	u4170
  7281  02E4                     u4171:	
  7282  02E4  2AE7               	goto	l5475
  7283  02E5                     u4170:	
  7284  02E5                     l5471:	
  7285                           
  7286                           ;usb_device.c: 1191: {
  7287                           ;usb_device.c: 1192: return 0;
  7288  02E5  3000               	movlw	0
  7289  02E6  2B15               	goto	l175
  7290  02E7                     l5475:	
  7291                           
  7292                           ;usb_device.c: 1193: }
  7293                           ;usb_device.c: 1206: handle->ADR = (((WORD)(data))& 0x7FFF);
  7294  02E7  085A               	movf	USBTransferOnePacket@data,w
  7295  02E8  00DC               	movwf	??_USBTransferOnePacket
  7296  02E9  3002               	movlw	2
  7297  02EA  00DD               	movwf	??_USBTransferOnePacket+1
  7298  02EB  085F               	movf	USBTransferOnePacket@handle,w
  7299  02EC  3E02               	addlw	2
  7300  02ED  0086               	movwf	6
  7301  02EE  0187               	clrf	7
  7302  02EF  085C               	movf	??_USBTransferOnePacket,w
  7303  02F0  3FC0               	movwi [0]fsr1
  7304  02F1  085D               	movf	??_USBTransferOnePacket+1,w
  7305  02F2  3FC1               	movwi [1]fsr1
  7306                           
  7307                           ;usb_device.c: 1207: handle->CNT = len;
  7308  02F3  0A5F               	incf	USBTransferOnePacket@handle,w
  7309  02F4  0086               	movwf	6
  7310  02F5  0187               	clrf	7
  7311  02F6  085B               	movf	USBTransferOnePacket@len,w
  7312  02F7  0081               	movwf	1
  7313  02F8                     l5477:	
  7314                           
  7315                           ;usb_device.c: 1208: handle->STAT.Val &= 0x40;
  7316  02F8  085F               	movf	USBTransferOnePacket@handle,w
  7317  02F9  0086               	movwf	6
  7318  02FA  0187               	clrf	7
  7319  02FB  3040               	movlw	64
  7320  02FC  0581               	andwf	1,f
  7321  02FD                     l5479:	
  7322                           
  7323                           ;usb_device.c: 1209: handle->STAT.Val |= 0x80 | (0x08 & 0x08);
  7324  02FD  085F               	movf	USBTransferOnePacket@handle,w
  7325  02FE  0086               	movwf	6
  7326  02FF  0187               	clrf	7
  7327  0300  3088               	movlw	136
  7328  0301  0481               	iorwf	1,f
  7329  0302                     l5481:	
  7330                           
  7331                           ;usb_device.c: 1212: if(dir != 0)
  7332  0302  0859               	movf	USBTransferOnePacket@dir,w
  7333  0303  1D03               	skipz
  7334  0304  2B06               	goto	u4180
  7335  0305  2B0D               	goto	l5485
  7336  0306                     u4180:	
  7337  0306                     l5483:	
  7338                           
  7339                           ;usb_device.c: 1213: {
  7340                           ;usb_device.c: 1215: ((BYTE_VAL*)&pBDTEntryIn[ep])->Val ^= 0x0004;;
  7341  0306  085E               	movf	USBTransferOnePacket@ep,w
  7342  0307  3E6A               	addlw	_pBDTEntryIn& (0+255)
  7343  0308  0086               	movwf	6
  7344  0309  0187               	clrf	7
  7345  030A  3004               	movlw	4
  7346  030B  0681               	xorwf	1,f
  7347                           
  7348                           ;usb_device.c: 1216: }
  7349  030C  2B14               	goto	l5487
  7350  030D                     l5485:	
  7351                           
  7352                           ;usb_device.c: 1217: else
  7353                           ;usb_device.c: 1218: {
  7354                           ;usb_device.c: 1220: ((BYTE_VAL*)&pBDTEntryOut[ep])->Val ^= 0x0004;;
  7355  030D  085E               	movf	USBTransferOnePacket@ep,w
  7356  030E  3E2C               	addlw	_pBDTEntryOut& (0+255)
  7357  030F  0086               	movwf	6
  7358  0310  3001               	movlw	1	; select bank2/3
  7359  0311  0087               	movwf	7
  7360  0312  3004               	movlw	4
  7361  0313  0681               	xorwf	1,f
  7362  0314                     l5487:	
  7363                           
  7364                           ;usb_device.c: 1221: }
  7365                           ;usb_device.c: 1222: return (void*)handle;
  7366  0314  085F               	movf	USBTransferOnePacket@handle,w
  7367  0315                     l175:	
  7368  0315  0008               	return
  7369  0316                     __end_of_USBTransferOnePacket:	
  7370                           
  7371                           	psect	text1918
  7372  16BF                     __ptext1918:	
  7373 ;; *************** function _USBDeviceInit *****************
  7374 ;; Defined at:
  7375 ;;		line 467 in file "../USB/usb_device.c"
  7376 ;; Parameters:    Size  Location     Type
  7377 ;;		None
  7378 ;; Auto vars:     Size  Location     Type
  7379 ;;  p               2    8[BANK0 ] PTR unsigned char 
  7380 ;;		 -> UEP1(1), 
  7381 ;;  i               1   10[BANK0 ] unsigned char 
  7382 ;;  i               1   11[BANK0 ] unsigned char 
  7383 ;; Return value:  Size  Location     Type
  7384 ;;		None               void
  7385 ;; Registers used:
  7386 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7387 ;; Tracked objects:
  7388 ;;		On entry : 0/2
  7389 ;;		On exit  : 1F/1
  7390 ;;		Unchanged: FFFE0/0
  7391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7393 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7394 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7395 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7396 ;;Total ram usage:        6 bytes
  7397 ;; Hardware stack levels used:    1
  7398 ;; Hardware stack levels required when called:    4
  7399 ;; This function calls:
  7400 ;;		Nothing
  7401 ;; This function is called by:
  7402 ;;		_USBDeviceTasks
  7403 ;;		_InitializeSystem
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           
  7408                           ;psect for function _USBDeviceInit
  7409  16BF                     _USBDeviceInit:	
  7410  16BF                     l5137:	
  7411                           ; Regs used in _USBDeviceInit: [wreg+fsr1l-status,0]
  7412                           
  7413                           
  7414                           ;usb_device.c: 468: BYTE i;
  7415                           ;usb_device.c: 470: {PIE2bits.USBIE = 0;};
  7416  16BF  0021               	movlb	1	; select bank1
  7417  16C0  1112               	bcf	18,2	;volatile
  7418                           
  7419                           ;usb_device.c: 473: UEIR = 0;;
  7420  16C1  003D               	movlb	29	; select bank29
  7421  16C2  0193               	clrf	19	;volatile
  7422                           
  7423                           ;usb_device.c: 476: UIR = 0;;
  7424  16C3  0190               	clrf	16	;volatile
  7425                           
  7426                           ;usb_device.c: 479: UEP0 = 0;
  7427  16C4  0198               	clrf	24	;volatile
  7428                           
  7429                           ;usb_device.c: 481: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<1;i++) *p++ = 0; };
  7430  16C5  300E               	movlw	14
  7431  16C6  0020               	movlb	0	; select bank0
  7432  16C7  00D9               	movwf	USBDeviceInit@p+1
  7433  16C8  3099               	movlw	153
  7434  16C9  00D8               	movwf	USBDeviceInit@p
  7435  16CA  01DA               	clrf	USBDeviceInit@i_718
  7436  16CB                     l5147:	
  7437  16CB  0858               	movf	USBDeviceInit@p,w
  7438  16CC  0086               	movwf	6
  7439  16CD  0859               	movf	USBDeviceInit@p+1,w
  7440  16CE  0087               	movwf	7
  7441  16CF  0181               	clrf	1
  7442  16D0  0AD8               	incf	USBDeviceInit@p,f
  7443  16D1  1903               	skipnz
  7444  16D2  0AD9               	incf	USBDeviceInit@p+1,f
  7445  16D3  0ADA               	incf	USBDeviceInit@i_718,f
  7446  16D4  1903               	btfsc	3,2
  7447  16D5  2ECB               	goto	l5147
  7448                           
  7449                           ;usb_device.c: 483: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  7450  16D6  3016               	movlw	22
  7451  16D7  003D               	movlb	29	; select bank29
  7452  16D8  0091               	movwf	17	;volatile
  7453  16D9  309F               	movlw	159
  7454  16DA  0097               	movwf	23	;volatile
  7455  16DB  307B               	movlw	123
  7456  16DC  0092               	movwf	18	;volatile
  7457                           
  7458                           ;usb_device.c: 486: ;
  7459                           ;usb_device.c: 489: ;
  7460                           ;usb_device.c: 492: for(i=0;i<(sizeof(BDT)/sizeof(BDT_ENTRY));i++)
  7461  16DD  0020               	movlb	0	; select bank0
  7462  16DE  01DB               	clrf	USBDeviceInit@i
  7463  16DF                     l5163:	
  7464                           
  7465                           ;usb_device.c: 493: {
  7466                           ;usb_device.c: 494: BDT[i].Val = 0x00;
  7467  16DF  085B               	movf	USBDeviceInit@i,w
  7468  16E0  0709               	addwf	9,w
  7469  16E1  0709               	addwf	9,w
  7470  16E2  3E20               	addlw	32
  7471  16E3  0086               	movwf	6
  7472  16E4  3000               	movlw	0
  7473  16E5  0187               	clrf	7
  7474  16E6  3FC0               	movwi [0]fsr1
  7475  16E7  3FC1               	movwi [1]fsr1
  7476  16E8  3FC2               	movwi [2]fsr1
  7477  16E9  3FC3               	movwi [3]fsr1
  7478  16EA  3008               	movlw	8
  7479  16EB  0ADB               	incf	USBDeviceInit@i,f
  7480  16EC  025B               	subwf	USBDeviceInit@i,w
  7481  16ED  1C03               	skipc
  7482  16EE  2EDF               	goto	l5163
  7483                           
  7484                           ;usb_device.c: 495: }
  7485                           ;usb_device.c: 498: UCONbits.PPBRST = 1;
  7486  16EF  003D               	movlb	29	; select bank29
  7487  16F0  170E               	bsf	14,6	;volatile
  7488                           
  7489                           ;usb_device.c: 501: UADDR = 0x00;
  7490  16F1  0196               	clrf	22	;volatile
  7491                           
  7492                           ;usb_device.c: 504: UCONbits.PKTDIS = 0;
  7493  16F2  120E               	bcf	14,4	;volatile
  7494                           
  7495                           ;usb_device.c: 507: UCONbits.PPBRST = 0;
  7496  16F3  130E               	bcf	14,6	;volatile
  7497  16F4                     l5177:	
  7498                           ;usb_device.c: 510: while(UIRbits.TRNIF == 1)
  7499                           
  7500  16F4  003D               	movlb	29	; select bank29
  7501  16F5  1D90               	btfss	16,3	;volatile
  7502  16F6  2EFE               	goto	l5179
  7503                           
  7504                           ;usb_device.c: 511: {
  7505                           ;usb_device.c: 512: (UIR &= 0xF7);
  7506  16F7  1190               	bcf	16,3	;volatile
  7507                           
  7508                           ;usb_device.c: 514: inPipes[0].info.Val = 0;
  7509  16F8  0022               	movlb	2	; select bank2
  7510  16F9  01CC               	clrf	(_inPipes^(0+256)+2)
  7511                           
  7512                           ;usb_device.c: 515: outPipes[0].info.Val = 0;
  7513  16FA  01A2               	clrf	(_outPipes^(0+256)+2)
  7514                           
  7515                           ;usb_device.c: 516: outPipes[0].wCount.Val = 0;
  7516  16FB  01A3               	clrf	(_outPipes^(0+256)+3)
  7517  16FC  01A4               	clrf	((_outPipes+1)^(0+256)+3)
  7518  16FD  2EF4               	goto	l5177
  7519  16FE                     l5179:	
  7520                           
  7521                           ;usb_device.c: 517: }
  7522                           ;usb_device.c: 521: USBStatusStageEnabledFlag1 = TRUE;
  7523  16FE  3001               	movlw	1
  7524  16FF  0022               	movlb	2	; select bank2
  7525  1700  00B8               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  7526                           
  7527                           ;usb_device.c: 522: USBStatusStageEnabledFlag2 = TRUE;
  7528  1701  00B9               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  7529                           
  7530                           ;usb_device.c: 524: USBDeferINDataStagePackets = FALSE;
  7531  1702  01B5               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  7532                           
  7533                           ;usb_device.c: 526: USBBusIsSuspended = FALSE;
  7534  1703  01B6               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  7535                           
  7536                           ;usb_device.c: 530: for(i = 0; i < (BYTE)(1+1u); i++)
  7537  1704  0020               	movlb	0	; select bank0
  7538  1705  01DB               	clrf	USBDeviceInit@i
  7539  1706                     l5191:	
  7540                           
  7541                           ;usb_device.c: 531: {
  7542                           ;usb_device.c: 532: pBDTEntryIn[i] = 0u;
  7543  1706  085B               	movf	USBDeviceInit@i,w
  7544  1707  3E6A               	addlw	_pBDTEntryIn& (0+255)
  7545  1708  0086               	movwf	6
  7546  1709  0187               	clrf	7
  7547  170A  0181               	clrf	1
  7548                           
  7549                           ;usb_device.c: 533: pBDTEntryOut[i] = 0u;
  7550  170B  085B               	movf	USBDeviceInit@i,w
  7551  170C  3E2C               	addlw	_pBDTEntryOut& (0+255)
  7552  170D  0086               	movwf	6
  7553  170E  3001               	movlw	1	; select bank2/3
  7554  170F  0087               	movwf	7
  7555  1710  0181               	clrf	1
  7556                           
  7557                           ;usb_device.c: 534: ep_data_in[i].Val = 0u;
  7558  1711  085B               	movf	USBDeviceInit@i,w
  7559  1712  3E26               	addlw	_ep_data_in& (0+255)
  7560  1713  0086               	movwf	6
  7561  1714  0181               	clrf	1
  7562                           
  7563                           ;usb_device.c: 535: ep_data_out[i].Val = 0u;
  7564  1715  085B               	movf	USBDeviceInit@i,w
  7565  1716  3E28               	addlw	_ep_data_out& (0+255)
  7566  1717  0086               	movwf	6
  7567  1718  3002               	movlw	2
  7568  1719  0181               	clrf	1
  7569  171A  0ADB               	incf	USBDeviceInit@i,f
  7570  171B  025B               	subwf	USBDeviceInit@i,w
  7571  171C  1C03               	skipc
  7572  171D  2F06               	goto	l5191
  7573                           
  7574                           ;usb_device.c: 536: }
  7575                           ;usb_device.c: 539: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  7576  171E  3028               	movlw	40
  7577  171F  00EA               	movwf	_pBDTEntryIn
  7578                           
  7579                           ;usb_device.c: 541: UEP0 = 0x06|0x10;
  7580  1720  3016               	movlw	22
  7581  1721  003D               	movlb	29	; select bank29
  7582  1722  0098               	movwf	24	;volatile
  7583                           
  7584                           ;usb_device.c: 543: BDT[0].ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  7585  1723  3040               	movlw	64
  7586  1724  0020               	movlb	0	; select bank0
  7587  1725  00D6               	movwf	??_USBDeviceInit
  7588  1726  01D7               	clrf	??_USBDeviceInit+1
  7589  1727  00A2               	movwf	34	;volatile
  7590  1728  0857               	movf	??_USBDeviceInit+1,w
  7591  1729  00A3               	movwf	35	;volatile
  7592                           
  7593                           ;usb_device.c: 544: BDT[0].CNT = 8;
  7594  172A  3008               	movlw	8
  7595  172B  00A1               	movwf	33	;volatile
  7596                           
  7597                           ;usb_device.c: 545: BDT[0].STAT.Val = 0x80|0x00|0x04;
  7598  172C  3084               	movlw	132
  7599  172D  00A0               	movwf	32	;volatile
  7600                           
  7601                           ;usb_device.c: 548: USBActiveConfiguration = 0;
  7602  172E  0022               	movlb	2	; select bank2
  7603  172F  01CF               	clrf	_USBActiveConfiguration^(0+256)
  7604                           
  7605                           ;usb_device.c: 551: USBDeviceState = DETACHED_STATE;
  7606  1730  0021               	movlb	1	; select bank1
  7607  1731  01EB               	clrf	_USBDeviceState^(0+128)
  7608  1732  0008               	return
  7609  1733                     __end_of_USBDeviceInit:	
  7610                           
  7611                           	psect	text1919
  7612  07EC                     __ptext1919:	
  7613 ;; *************** function _USBWakeFromSuspend *****************
  7614 ;; Defined at:
  7615 ;;		line 2456 in file "../USB/usb_device.c"
  7616 ;; Parameters:    Size  Location     Type
  7617 ;;		None
  7618 ;; Auto vars:     Size  Location     Type
  7619 ;;		None
  7620 ;; Return value:  Size  Location     Type
  7621 ;;		None               void
  7622 ;; Registers used:
  7623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7624 ;; Tracked objects:
  7625 ;;		On entry : 1F/1D
  7626 ;;		On exit  : 1F/1D
  7627 ;;		Unchanged: FFFE0/0
  7628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;Total ram usage:        0 bytes
  7634 ;; Hardware stack levels used:    1
  7635 ;; Hardware stack levels required when called:    8
  7636 ;; This function calls:
  7637 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7638 ;; This function is called by:
  7639 ;;		_USBDeviceTasks
  7640 ;; This function uses a non-reentrant model
  7641 ;;
  7642                           
  7643                           
  7644                           ;psect for function _USBWakeFromSuspend
  7645  07EC                     _USBWakeFromSuspend:	
  7646                           
  7647                           ;usb_device.c: 2463: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_RESUME,0,0);
  7648                           
  7649                           ; Regs used in _USBWakeFromSuspend: [allreg]
  7650  07EC  3074               	movlw	116
  7651  07ED  0020               	movlb	0	; select bank0
  7652  07EE  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  7653  07EF  3000               	movlw	0
  7654  07F0  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  7655  07F1  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  7656  07F2  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  7657  07F3  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  7658  07F4  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  7659  07F5  3182  2288         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  7660                           
  7661                           ;usb_device.c: 2470: UCONbits.SUSPND = 0;
  7662  07F7  003D               	movlb	29	; select bank29
  7663  07F8  108E               	bcf	14,1	;volatile
  7664                           
  7665                           ;usb_device.c: 2475: UIEbits.ACTVIE = 0;
  7666  07F9  1112               	bcf	18,2	;volatile
  7667                           
  7668                           ;usb_device.c: 2495: {
  7669                           ;usb_device.c: 2496: (UIR &= 0xFB);
  7670  07FA  1110               	bcf	16,2	;volatile
  7671  07FB  0008               	return
  7672  07FC                     __end_of_USBWakeFromSuspend:	
  7673                           
  7674                           	psect	text1920
  7675  1605                     __ptext1920:	
  7676 ;; *************** function _USBSuspend *****************
  7677 ;; Defined at:
  7678 ;;		line 2399 in file "../USB/usb_device.c"
  7679 ;; Parameters:    Size  Location     Type
  7680 ;;		None
  7681 ;; Auto vars:     Size  Location     Type
  7682 ;;		None
  7683 ;; Return value:  Size  Location     Type
  7684 ;;		None               void
  7685 ;; Registers used:
  7686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7687 ;; Tracked objects:
  7688 ;;		On entry : 1F/1D
  7689 ;;		On exit  : 1E/0
  7690 ;;		Unchanged: FFFE0/0
  7691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7696 ;;Total ram usage:        0 bytes
  7697 ;; Hardware stack levels used:    1
  7698 ;; Hardware stack levels required when called:    8
  7699 ;; This function calls:
  7700 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7701 ;; This function is called by:
  7702 ;;		_USBDeviceTasks
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           
  7707                           ;psect for function _USBSuspend
  7708  1605                     _USBSuspend:	
  7709                           
  7710                           ;usb_device.c: 2423: UIEbits.ACTVIE = 1;
  7711                           
  7712                           ; Regs used in _USBSuspend: [allreg]
  7713  1605  1512               	bsf	18,2	;volatile
  7714                           
  7715                           ;usb_device.c: 2424: (UIR &= 0xEF);
  7716  1606  1210               	bcf	16,4	;volatile
  7717                           
  7718                           ;usb_device.c: 2430: USBBusIsSuspended = TRUE;
  7719  1607  148E               	bsf	14,1	;volatile
  7720                           
  7721                           ;usb_device.c: 2437: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SUSPEND,0,0);
  7722  1608  3075               	movlw	117
  7723  1609  0020               	movlb	0	; select bank0
  7724  160A  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  7725  160B  3000               	movlw	0
  7726  160C  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  7727  160D  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  7728  160E  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  7729  160F  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  7730  1610  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  7731  1611  3182  2288         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  7732  1613  0008               	return
  7733  1614                     __end_of_USBSuspend:	
  7734                           
  7735                           	psect	text1921
  7736  1614                     __ptext1921:	
  7737 ;; *************** function _USBStallHandler *****************
  7738 ;; Defined at:
  7739 ;;		line 2356 in file "../USB/usb_device.c"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;		None
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;		None
  7744 ;; Return value:  Size  Location     Type
  7745 ;;		None               void
  7746 ;; Registers used:
  7747 ;;		wreg, fsr1l, fsr1h
  7748 ;; Tracked objects:
  7749 ;;		On entry : 1F/1D
  7750 ;;		On exit  : 1F/1D
  7751 ;;		Unchanged: FFFE0/0
  7752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7757 ;;Total ram usage:        0 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:    4
  7760 ;; This function calls:
  7761 ;;		Nothing
  7762 ;; This function is called by:
  7763 ;;		_USBDeviceTasks
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767                           
  7768                           ;psect for function _USBStallHandler
  7769  1614                     _USBStallHandler:	
  7770                           
  7771                           ;usb_device.c: 2368: if(UEP0bits.EPSTALL == 1)
  7772                           
  7773                           ; Regs used in _USBStallHandler: [wregfsr1]
  7774  1614  1C18               	btfss	24,0	;volatile
  7775  1615  2E2A               	goto	l5397
  7776                           
  7777                           ;usb_device.c: 2369: {
  7778                           ;usb_device.c: 2371: if((pBDTEntryEP0OutCurrent->STAT.Val == 0x80) && (pBDTEntryIn[0]->S
      +                          TAT.Val == (0x80|0x04)))
  7779  1616  0020               	movlb	0	; select bank0
  7780  1617  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7781  1618  0086               	movwf	6
  7782  1619  0187               	clrf	7
  7783  161A  0801               	movf	1,w
  7784  161B  3A80               	xorlw	128
  7785  161C  1D03               	skipz
  7786  161D  2E28               	goto	l5395
  7787  161E  086A               	movf	_pBDTEntryIn,w
  7788  161F  0086               	movwf	6
  7789  1620  0801               	movf	1,w
  7790  1621  3A84               	xorlw	132
  7791  1622  1D03               	skipz
  7792  1623  2E28               	goto	l5395
  7793                           
  7794                           ;usb_device.c: 2372: {
  7795                           ;usb_device.c: 2374: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
  7796  1624  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7797  1625  0086               	movwf	6
  7798  1626  308C               	movlw	140
  7799  1627  0081               	movwf	1
  7800  1628                     l5395:	
  7801                           
  7802                           ;usb_device.c: 2375: }
  7803                           ;usb_device.c: 2376: UEP0bits.EPSTALL = 0;
  7804  1628  003D               	movlb	29	; select bank29
  7805  1629  1018               	bcf	24,0	;volatile
  7806  162A                     l5397:	
  7807                           
  7808                           ;usb_device.c: 2377: }
  7809                           ;usb_device.c: 2379: (UIR &= 0xDF);
  7810  162A  1290               	bcf	16,5	;volatile
  7811  162B  0008               	return
  7812  162C                     __end_of_USBStallHandler:	
  7813                           
  7814                           	psect	text1922
  7815  06B7                     __ptext1922:	
  7816 ;; *************** function _USBCtrlEPService *****************
  7817 ;; Defined at:
  7818 ;;		line 2523 in file "../USB/usb_device.c"
  7819 ;; Parameters:    Size  Location     Type
  7820 ;;		None
  7821 ;; Auto vars:     Size  Location     Type
  7822 ;;  setup_cnt       1    6[BANK1 ] unsigned char 
  7823 ;; Return value:  Size  Location     Type
  7824 ;;		None               void
  7825 ;; Registers used:
  7826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7827 ;; Tracked objects:
  7828 ;;		On entry : 1F/2
  7829 ;;		On exit  : 1C/0
  7830 ;;		Unchanged: FFFE0/0
  7831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7835 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7836 ;;Total ram usage:        3 bytes
  7837 ;; Hardware stack levels used:    1
  7838 ;; Hardware stack levels required when called:   11
  7839 ;; This function calls:
  7840 ;;		_USBCtrlTrfSetupHandler
  7841 ;;		_USBCtrlTrfOutHandler
  7842 ;;		_USBCtrlTrfInHandler
  7843 ;; This function is called by:
  7844 ;;		_USBDeviceTasks
  7845 ;; This function uses a non-reentrant model
  7846 ;;
  7847                           
  7848                           
  7849                           ;psect for function _USBCtrlEPService
  7850  06B7                     _USBCtrlEPService:	
  7851                           
  7852                           ;usb_device.c: 2528: USBStatusStageTimeoutCounter = (BYTE)45;
  7853                           
  7854                           ; Regs used in _USBCtrlEPService: [allreg]
  7855  06B7  302D               	movlw	45
  7856  06B8  00BA               	movwf	_USBStatusStageTimeoutCounter^(0+256)
  7857                           
  7858                           ;usb_device.c: 2532: if((USTATcopy.Val & ~0x02) == 0x00)
  7859  06B9  0021               	movlb	1	; select bank1
  7860  06BA  086F               	movf	_USTATcopy^(0+128),w
  7861  06BB  39FD               	andlw	253
  7862  06BC  1D03               	btfss	3,2
  7863  06BD  2F06               	goto	l5431
  7864                           
  7865                           ;usb_device.c: 2533: {
  7866                           ;usb_device.c: 2536: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val &
      +                           0x7E)>>1];
  7867  06BE  366F               	lsrf	_USTATcopy^(0+128),w
  7868  06BF  393F               	andlw	63
  7869  06C0  0709               	addwf	9,w
  7870  06C1  0709               	addwf	9,w
  7871  06C2  3E20               	addlw	32
  7872  06C3  0020               	movlb	0	; select bank0
  7873  06C4  00EE               	movwf	_pBDTEntryEP0OutCurrent
  7874                           
  7875                           ;usb_device.c: 2544: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
  7876  06C5  00EF               	movwf	_pBDTEntryEP0OutNext
  7877                           
  7878                           ;usb_device.c: 2546: ((BYTE_VAL*)&pBDTEntryEP0OutNext)->Val ^= 0x0004;
  7879  06C6  3004               	movlw	4
  7880  06C7  06EF               	xorwf	_pBDTEntryEP0OutNext,f
  7881                           
  7882                           ;usb_device.c: 2549: if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
  7883  06C8  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7884  06C9  0086               	movwf	6
  7885  06CA  0187               	clrf	7
  7886  06CB  0C01               	rrf	1,w
  7887  06CC  0C89               	rrf	9,f
  7888  06CD  390F               	andlw	15
  7889  06CE  3A0D               	xorlw	13
  7890  06CF  1D03               	skipz
  7891  06D0  2F05               	goto	l5429
  7892                           
  7893                           ;usb_device.c: 2550: {
  7894                           ;usb_device.c: 2551: unsigned char setup_cnt;
  7895                           ;usb_device.c: 2557: for(setup_cnt = 0; setup_cnt < 8u; setup_cnt++)
  7896  06D1  0021               	movlb	1	; select bank1
  7897  06D2  01A6               	clrf	USBCtrlEPService@setup_cnt^(0+128)
  7898  06D3                     l5417:	
  7899                           
  7900                           ;usb_device.c: 2558: {
  7901                           ;usb_device.c: 2559: *(BYTE*)((BYTE*)&SetupPkt + setup_cnt) = *(BYTE*)((void *)(pBDTEntr
      +                          yEP0OutCurrent->ADR));
  7902  06D3  0826               	movf	USBCtrlEPService@setup_cnt^(0+128),w
  7903  06D4  3E40               	addlw	64
  7904  06D5  0086               	movwf	6
  7905  06D6  0187               	clrf	7
  7906  06D7  0020               	movlb	0	; select bank0
  7907  06D8  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7908  06D9  3E02               	addlw	2
  7909  06DA  0084               	movwf	4
  7910  06DB  0185               	clrf	5
  7911  06DC  3F00               	moviw [0]fsr0
  7912  06DD  0021               	movlb	1	; select bank1
  7913  06DE  00A4               	movwf	??_USBCtrlEPService^(0+128)
  7914  06DF  3F01               	moviw [1]fsr0
  7915  06E0  00A5               	movwf	(??_USBCtrlEPService^(0+128)+1)
  7916  06E1  0824               	movf	??_USBCtrlEPService^(0+128),w
  7917  06E2  0084               	movwf	4
  7918  06E3  0825               	movf	(??_USBCtrlEPService+1)^(0+128),w
  7919  06E4  0085               	movwf	5
  7920  06E5  0800               	movf	0,w
  7921  06E6  0081               	movwf	1
  7922                           
  7923                           ;usb_device.c: 2560: pBDTEntryEP0OutCurrent->ADR++;
  7924  06E7  0020               	movlb	0	; select bank0
  7925  06E8  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7926  06E9  3E02               	addlw	2
  7927  06EA  0086               	movwf	6
  7928  06EB  3001               	movlw	1
  7929  06EC  0781               	addwf	1,f
  7930  06ED  3141               	addfsr 1,1
  7931  06EE  1803               	skipnc
  7932  06EF  0A81               	incf	1,f
  7933  06F0  0021               	movlb	1	; select bank1
  7934  06F1  3008               	movlw	8
  7935  06F2  0AA6               	incf	USBCtrlEPService@setup_cnt^(0+128),f
  7936  06F3  0226               	subwf	USBCtrlEPService@setup_cnt^(0+128),w
  7937  06F4  1C03               	skipc
  7938  06F5  2ED3               	goto	l5417
  7939                           
  7940                           ;usb_device.c: 2561: }
  7941                           ;usb_device.c: 2562: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  7942  06F6  3040               	movlw	64
  7943  06F7  00A4               	movwf	??_USBCtrlEPService^(0+128)
  7944  06F8  01A5               	clrf	(??_USBCtrlEPService^(0+128)+1)
  7945  06F9  0020               	movlb	0	; select bank0
  7946  06FA  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7947  06FB  3E02               	addlw	2
  7948  06FC  0086               	movwf	6
  7949  06FD  0187               	clrf	7
  7950  06FE  0021               	movlb	1	; select bank1
  7951  06FF  0824               	movf	??_USBCtrlEPService^(0+128),w
  7952  0700  3FC0               	movwi [0]fsr1
  7953  0701  0825               	movf	(??_USBCtrlEPService+1)^(0+128),w
  7954  0702  3FC1               	movwi [1]fsr1
  7955                           
  7956                           ;usb_device.c: 2565: USBCtrlTrfSetupHandler();
  7957  0703  3183  2B16         	ljmp	l5745
  7958  0705                     l5429:	
  7959                           ;usb_device.c: 2566: }
  7960                           
  7961                           
  7962                           ;usb_device.c: 2567: else
  7963                           ;usb_device.c: 2568: {
  7964                           ;usb_device.c: 2570: USBCtrlTrfOutHandler();
  7965  0705  2F0E               	ljmp	l5771
  7966  0706                     l5431:	
  7967                           
  7968                           ;usb_device.c: 2573: else if((USTATcopy.Val & ~0x02) == 0x04)
  7969  0706  30FD               	movlw	253
  7970  0707  056F               	andwf	_USTATcopy^(0+128),w
  7971  0708  00A4               	movwf	??_USBCtrlEPService^(0+128)
  7972  0709  3A04               	xorlw	4
  7973  070A  1D03               	skipz
  7974  070B  0008               	return
  7975                           
  7976                           ;usb_device.c: 2574: {
  7977                           ;usb_device.c: 2577: USBCtrlTrfInHandler();
  7978  070C  3185  2D72         	ljmp	l5783
  7979  070E                     __end_of_USBCtrlEPService:	
  7980  070E                     __ptext1926:	
  7981 ;; *************** function _USBCtrlTrfOutHandler *****************
  7982 ;; Defined at:
  7983 ;;		line 2695 in file "../USB/usb_device.c"
  7984 ;; Parameters:    Size  Location     Type
  7985 ;;		None
  7986 ;; Auto vars:     Size  Location     Type
  7987 ;;		None
  7988 ;; Return value:  Size  Location     Type
  7989 ;;		None               void
  7990 ;; Registers used:
  7991 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7992 ;; Tracked objects:
  7993 ;;		On entry : 1F/0
  7994 ;;		On exit  : 1D/0
  7995 ;;		Unchanged: FFFE0/0
  7996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7999 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8000 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;Total ram usage:        2 bytes
  8002 ;; Hardware stack levels used:    1
  8003 ;; Hardware stack levels required when called:    6
  8004 ;; This function calls:
  8005 ;;		_USBCtrlTrfRxService
  8006 ;; This function is called by:
  8007 ;;		_USBCtrlEPService
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           
  8012                           ;psect for function _USBCtrlTrfOutHandler
  8013  070E                     _USBCtrlTrfOutHandler:	
  8014  070E                     l5771:	
  8015                           ; Regs used in _USBCtrlTrfOutHandler: [wreg-status,0+pclath+cstack]
  8016                           
  8017                           
  8018                           ;usb_device.c: 2696: if(controlTransferState == 2)
  8019  070E  086D               	movf	_controlTransferState,w
  8020  070F  3A02               	xorlw	2
  8021  0710  1D03               	skipz
  8022  0711  2F13               	goto	l5775
  8023                           
  8024                           ;usb_device.c: 2697: {
  8025                           ;usb_device.c: 2698: USBCtrlTrfRxService();
  8026  0712  2F2B               	ljmp	l5595
  8027  0713                     l5775:	
  8028                           ;usb_device.c: 2699: }
  8029                           
  8030                           
  8031                           ;usb_device.c: 2700: else
  8032                           ;usb_device.c: 2701: {
  8033                           ;usb_device.c: 2704: controlTransferState = 0;
  8034  0713  01ED               	clrf	_controlTransferState
  8035                           
  8036                           ;usb_device.c: 2711: if(BothEP0OutUOWNsSet == FALSE)
  8037  0714  0022               	movlb	2	; select bank2
  8038  0715  08B0               	movf	_BothEP0OutUOWNsSet^(0+256),f
  8039  0716  1D03               	skipz
  8040  0717  2F29               	goto	l5781
  8041                           
  8042                           ;usb_device.c: 2712: {
  8043                           ;usb_device.c: 2713: pBDTEntryEP0OutNext->CNT = 8;
  8044  0718  0020               	movlb	0	; select bank0
  8045                           
  8046                           ;usb_device.c: 2714: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  8047  0719  27D1  3186         	fcall	PL36	;call to abstracted procedure
  8048  071B  00DC               	movwf	??_USBCtrlTrfOutHandler
  8049  071C  01DD               	clrf	??_USBCtrlTrfOutHandler+1
  8050  071D  086F               	movf	_pBDTEntryEP0OutNext,w
  8051  071E  3E02               	addlw	2
  8052  071F  0086               	movwf	6
  8053  0720  085C               	movf	??_USBCtrlTrfOutHandler,w
  8054  0721  3FC0               	movwi [0]fsr1
  8055  0722  085D               	movf	??_USBCtrlTrfOutHandler+1,w
  8056  0723  3FC1               	movwi [1]fsr1
  8057                           
  8058                           ;usb_device.c: 2715: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
  8059  0724  086F               	movf	_pBDTEntryEP0OutNext,w
  8060  0725  0086               	movwf	6
  8061  0726  308C               	movlw	140
  8062  0727  0081               	movwf	1
  8063                           
  8064                           ;usb_device.c: 2716: }
  8065  0728  0008               	return
  8066  0729                     l5781:	
  8067                           
  8068                           ;usb_device.c: 2717: else
  8069                           ;usb_device.c: 2718: {
  8070                           ;usb_device.c: 2719: BothEP0OutUOWNsSet = FALSE;
  8071  0729  01B0               	clrf	_BothEP0OutUOWNsSet^(0+256)
  8072  072A  0008               	return
  8073  072B                     __end_of_USBCtrlTrfOutHandler:	
  8074  072B                     __ptext1927:	
  8075 ;; *************** function _USBCtrlTrfRxService *****************
  8076 ;; Defined at:
  8077 ;;		line 2019 in file "../USB/usb_device.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;		None
  8080 ;; Auto vars:     Size  Location     Type
  8081 ;;  byteToRead      1   11[BANK0 ] unsigned char 
  8082 ;;  i               1   10[BANK0 ] unsigned char 
  8083 ;; Return value:  Size  Location     Type
  8084 ;;		None               void
  8085 ;; Registers used:
  8086 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8087 ;; Tracked objects:
  8088 ;;		On entry : 1F/0
  8089 ;;		On exit  : 1D/0
  8090 ;;		Unchanged: FFFE0/0
  8091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8095 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8096 ;;Total ram usage:        4 bytes
  8097 ;; Hardware stack levels used:    1
  8098 ;; Hardware stack levels required when called:    5
  8099 ;; This function calls:
  8100 ;;		_USBCtrlEPAllowStatusStage
  8101 ;; This function is called by:
  8102 ;;		_USBCtrlTrfOutHandler
  8103 ;; This function uses a non-reentrant model
  8104 ;;
  8105                           
  8106                           
  8107                           ;psect for function _USBCtrlTrfRxService
  8108  072B                     _USBCtrlTrfRxService:	
  8109  072B                     l5595:	
  8110                           ; Regs used in _USBCtrlTrfRxService: [wreg-status,0+pclath+cstack]
  8111                           
  8112                           
  8113                           ;usb_device.c: 2020: BYTE byteToRead;
  8114                           ;usb_device.c: 2021: BYTE i;
  8115                           ;usb_device.c: 2025: byteToRead = pBDTEntryEP0OutCurrent->CNT;
  8116  072B  086E               	movf	_pBDTEntryEP0OutCurrent,w
  8117  072C  0086               	movwf	6
  8118  072D  0187               	clrf	7
  8119  072E  3F41               	moviw [1]fsr1
  8120  072F  00DB               	movwf	USBCtrlTrfRxService@byteToRead
  8121                           
  8122                           ;usb_device.c: 2031: if(byteToRead > outPipes[0].wCount.Val)
  8123  0730  00D8               	movwf	??_USBCtrlTrfRxService
  8124  0731  01D9               	clrf	??_USBCtrlTrfRxService+1
  8125  0732  0859               	movf	??_USBCtrlTrfRxService+1,w
  8126  0733  0022               	movlb	2	; select bank2
  8127  0734  0224               	subwf	((_outPipes+1)^(0+256)+3),w
  8128  0735  1D03               	skipz
  8129  0736  2F3B               	goto	u4345
  8130  0737  0020               	movlb	0	; select bank0
  8131  0738  0858               	movf	??_USBCtrlTrfRxService,w
  8132  0739  0022               	movlb	2	; select bank2
  8133  073A  0223               	subwf	(_outPipes^(0+256)+3),w
  8134  073B                     u4345:	
  8135  073B  1803               	skipnc
  8136  073C  2F40               	goto	l5601
  8137                           
  8138                           ;usb_device.c: 2032: {
  8139                           ;usb_device.c: 2033: byteToRead = outPipes[0].wCount.Val;
  8140  073D  0823               	movf	(_outPipes^(0+256)+3),w
  8141  073E  0020               	movlb	0	; select bank0
  8142  073F  00DB               	movwf	USBCtrlTrfRxService@byteToRead
  8143  0740                     l5601:	
  8144                           
  8145                           ;usb_device.c: 2034: }
  8146                           ;usb_device.c: 2036: outPipes[0].wCount.Val = outPipes[0].wCount.Val - byteToRead;
  8147  0740  0020               	movlb	0	; select bank0
  8148  0741  085B               	movf	USBCtrlTrfRxService@byteToRead,w
  8149  0742  00D8               	movwf	??_USBCtrlTrfRxService
  8150  0743  01D9               	clrf	??_USBCtrlTrfRxService+1
  8151  0744  0022               	movlb	2	; select bank2
  8152  0745  0223               	subwf	(_outPipes^(0+256)+3),w
  8153  0746  00A3               	movwf	(_outPipes^(0+256)+3)
  8154  0747  0020               	movlb	0	; select bank0
  8155  0748  0859               	movf	??_USBCtrlTrfRxService+1,w
  8156  0749  0022               	movlb	2	; select bank2
  8157  074A  3B24               	subwfb	((_outPipes+1)^(0+256)+3),w
  8158  074B  00A4               	movwf	((_outPipes+1)^(0+256)+3)
  8159                           
  8160                           ;usb_device.c: 2040: for(i=0;i<byteToRead;i++)
  8161  074C  0020               	movlb	0	; select bank0
  8162  074D  01DA               	clrf	USBCtrlTrfRxService@i
  8163  074E                     l5611:	
  8164  074E  085B               	movf	USBCtrlTrfRxService@byteToRead,w
  8165  074F  025A               	subwf	USBCtrlTrfRxService@i,w
  8166  0750  1803               	btfsc	3,0
  8167  0751  2F62               	goto	l5613
  8168                           
  8169                           ;usb_device.c: 2041: {
  8170                           ;usb_device.c: 2042: *outPipes[0].pDst.bRam++ = CtrlTrfData[i];
  8171  0752  0022               	movlb	2	; select bank2
  8172  0753  0820               	movf	_outPipes^(0+256),w
  8173  0754  0086               	movwf	6
  8174  0755  0187               	clrf	7
  8175  0756  0020               	movlb	0	; select bank0
  8176  0757  085A               	movf	USBCtrlTrfRxService@i,w
  8177  0758  3E48               	addlw	72
  8178  0759  0084               	movwf	4
  8179  075A  0185               	clrf	5
  8180  075B  0800               	movf	0,w
  8181  075C  0081               	movwf	1
  8182  075D  0022               	movlb	2	; select bank2
  8183  075E  0AA0               	incf	_outPipes^(0+256),f
  8184  075F  0020               	movlb	0	; select bank0
  8185  0760  0ADA               	incf	USBCtrlTrfRxService@i,f
  8186  0761  2F4E               	goto	l5611
  8187  0762                     l5613:	
  8188                           
  8189                           ;usb_device.c: 2043: }
  8190                           ;usb_device.c: 2047: if(outPipes[0].wCount.Val > 0)
  8191  0762  3003               	movlw	3
  8192  0763  3E20               	addlw	_outPipes& (0+255)
  8193  0764  0086               	movwf	6
  8194  0765  3001               	movlw	1	; select bank2/3
  8195  0766  0087               	movwf	7
  8196  0767  0016               	moviw fsr1++
  8197  0768  0401               	iorwf	1,w
  8198  0769  1903               	skipnz
  8199  076A  2F81               	goto	l5621
  8200                           
  8201                           ;usb_device.c: 2048: {
  8202                           ;usb_device.c: 2049: pBDTEntryEP0OutNext->CNT = 8;
  8203  076B  0A6F               	incf	_pBDTEntryEP0OutNext,w
  8204  076C  0086               	movwf	6
  8205  076D  3008               	movlw	8
  8206  076E  0187               	clrf	7
  8207  076F  0081               	movwf	1
  8208                           
  8209                           ;usb_device.c: 2050: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
  8210  0770  3048               	movlw	72
  8211  0771  27D7  3186         	fcall	PL42	;call to abstracted procedure
  8212                           
  8213                           ;usb_device.c: 2051: if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
  8214  0773  086E               	movf	_pBDTEntryEP0OutCurrent,w
  8215  0774  0086               	movwf	6
  8216                           
  8217                           ;usb_device.c: 2052: {
  8218                           ;usb_device.c: 2053: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  8219  0775  086F               	movf	_pBDTEntryEP0OutNext,w
  8220  0776  1B01               	btfsc	1,6
  8221  0777  2F7C               	goto	L7
  8222  0778  0086               	movwf	6
  8223  0779  30C8               	movlw	200
  8224  077A  0081               	movwf	1
  8225                           
  8226                           ;usb_device.c: 2054: }
  8227  077B  0008               	return
  8228  077C                     L7:	
  8229                           ;usb_device.c: 2055: else
  8230                           ;usb_device.c: 2056: {
  8231                           ;usb_device.c: 2057: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08);
  8232                           
  8233  077C  0086               	movwf	6
  8234  077D  3088               	movlw	136
  8235  077E  0187               	clrf	7
  8236  077F  0081               	movwf	1
  8237  0780  0008               	return
  8238  0781                     l5621:	
  8239                           
  8240                           ;usb_device.c: 2060: else
  8241                           ;usb_device.c: 2061: {
  8242                           ;usb_device.c: 2065: pBDTEntryEP0OutNext->CNT = 8;
  8243                           
  8244                           ;usb_device.c: 2066: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  8245  0781  27D1  3186         	fcall	PL36	;call to abstracted procedure
  8246  0783  27D7  3186         	fcall	PL42	;call to abstracted procedure
  8247                           
  8248                           ;usb_device.c: 2070: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
  8249  0785  086F               	movf	_pBDTEntryEP0OutNext,w
  8250  0786  0086               	movwf	6
  8251  0787  3084               	movlw	132
  8252  0788  0081               	movwf	1
  8253                           
  8254                           ;usb_device.c: 2077: if(outPipes[0].pFunc != (0))
  8255  0789  0022               	movlb	2	; select bank2
  8256  078A  0825               	movf	(_outPipes+5)^(0+256),w
  8257  078B  1903               	btfsc	3,2
  8258  078C  2F90               	goto	l5627
  8259                           
  8260                           ;usb_device.c: 2078: {
  8261                           ;usb_device.c: 2084: outPipes[0].pFunc();
  8262  078D  0825               	movf	(_outPipes+5)^(0+256),w
  8263  078E  3186  2EB7         	ljmp	$	;if you get stuck here, you called an invalid pointer
  8264  0790                     l5627:	
  8265                           
  8266                           ;usb_device.c: 2089: }
  8267                           ;usb_device.c: 2090: outPipes[0].info.bits.busy = 0;
  8268  0790  13A2               	bcf	(_outPipes^(0+256)+2),7
  8269                           
  8270                           ;usb_device.c: 2104: if(USBDeferStatusStagePacket == FALSE)
  8271  0791  0020               	movlb	0	; select bank0
  8272  0792  08EC               	movf	_USBDeferStatusStagePacket,f
  8273  0793  1D03               	skipz
  8274  0794  0008               	return
  8275                           
  8276                           ;usb_device.c: 2105: {
  8277                           ;usb_device.c: 2106: USBCtrlEPAllowStatusStage();
  8278  0795  2F96               	ljmp	l5357
  8279  0796                     __end_of_USBCtrlTrfRxService:	
  8280  0796                     __ptext1928:	
  8281 ;; *************** function _USBCtrlEPAllowStatusStage *****************
  8282 ;; Defined at:
  8283 ;;		line 1590 in file "../USB/usb_device.c"
  8284 ;; Parameters:    Size  Location     Type
  8285 ;;		None
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;		None
  8288 ;; Return value:  Size  Location     Type
  8289 ;;		None               void
  8290 ;; Registers used:
  8291 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8292 ;; Tracked objects:
  8293 ;;		On entry : 1C/2
  8294 ;;		On exit  : 1D/0
  8295 ;;		Unchanged: FFFE0/0
  8296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;Total ram usage:        2 bytes
  8302 ;; Hardware stack levels used:    1
  8303 ;; Hardware stack levels required when called:    4
  8304 ;; This function calls:
  8305 ;;		Nothing
  8306 ;; This function is called by:
  8307 ;;		_USBDeviceTasks
  8308 ;;		_USBCtrlEPServiceComplete
  8309 ;;		_USBCtrlTrfRxService
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           
  8314                           ;psect for function _USBCtrlEPAllowStatusStage
  8315  0796                     _USBCtrlEPAllowStatusStage:	
  8316  0796                     l5357:	
  8317                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l-status,0]
  8318                           
  8319                           
  8320                           ;usb_device.c: 1596: if(USBStatusStageEnabledFlag1 == FALSE)
  8321  0796  0022               	movlb	2	; select bank2
  8322  0797  08B8               	movf	_USBStatusStageEnabledFlag1^(0+256),f
  8323  0798  1D03               	skipz
  8324  0799  0008               	return
  8325                           
  8326                           ;usb_device.c: 1597: {
  8327                           ;usb_device.c: 1598: USBStatusStageEnabledFlag1 = TRUE;
  8328  079A  3001               	movlw	1
  8329  079B  00B8               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  8330                           
  8331                           ;usb_device.c: 1599: if(USBStatusStageEnabledFlag2 == FALSE)
  8332  079C  08B9               	movf	_USBStatusStageEnabledFlag2^(0+256),f
  8333  079D  1D03               	skipz
  8334  079E  0008               	return
  8335                           
  8336                           ;usb_device.c: 1600: {
  8337                           ;usb_device.c: 1601: USBStatusStageEnabledFlag2 = TRUE;
  8338  079F  00B9               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  8339                           
  8340                           ;usb_device.c: 1605: if(controlTransferState == 2)
  8341  07A0  0020               	movlb	0	; select bank0
  8342  07A1  086D               	movf	_controlTransferState,w
  8343  07A2  3A02               	xorlw	2
  8344  07A3  1D03               	skipz
  8345  07A4  2FAB               	goto	l5369
  8346                           
  8347                           ;usb_device.c: 1606: {
  8348                           ;usb_device.c: 1607: pBDTEntryIn[0]->CNT = 0;
  8349  07A5  0A6A               	incf	_pBDTEntryIn,w
  8350  07A6  0086               	movwf	6
  8351  07A7  0187               	clrf	7
  8352  07A8  0181               	clrf	1
  8353                           
  8354                           ;usb_device.c: 1608: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  8355  07A9  086A               	movf	_pBDTEntryIn,w
  8356                           
  8357                           ;usb_device.c: 1609: }
  8358  07AA  2FE8               	ljmp	PL66	;call to abstracted procedure
  8359  07AB                     l5369:	
  8360                           
  8361                           ;usb_device.c: 1610: else if(controlTransferState == 1)
  8362  07AB  0B6D               	decfsz	_controlTransferState,w
  8363  07AC  0008               	return
  8364                           
  8365                           ;usb_device.c: 1611: {
  8366                           ;usb_device.c: 1612: BothEP0OutUOWNsSet = FALSE;
  8367  07AD  0022               	movlb	2	; select bank2
  8368  07AE  01B0               	clrf	_BothEP0OutUOWNsSet^(0+256)
  8369                           
  8370                           ;usb_device.c: 1617: pBDTEntryEP0OutCurrent->CNT = 8;
  8371  07AF  0020               	movlb	0	; select bank0
  8372  07B0  0A6E               	incf	_pBDTEntryEP0OutCurrent,w
  8373  07B1  0086               	movwf	6
  8374  07B2  3008               	movlw	8
  8375  07B3  0187               	clrf	7
  8376  07B4  0081               	movwf	1
  8377                           
  8378                           ;usb_device.c: 1618: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  8379  07B5  3040               	movlw	64
  8380  07B6  00D6               	movwf	??_USBCtrlEPAllowStatusStage
  8381  07B7  01D7               	clrf	??_USBCtrlEPAllowStatusStage+1
  8382  07B8  086E               	movf	_pBDTEntryEP0OutCurrent,w
  8383  07B9  27E1  3186         	fcall	PL60	;call to abstracted procedure
  8384                           
  8385                           ;usb_device.c: 1619: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x04;
  8386  07BB  086E               	movf	_pBDTEntryEP0OutCurrent,w
  8387  07BC  0086               	movwf	6
  8388  07BD  3084               	movlw	132
  8389  07BE  0081               	movwf	1
  8390                           
  8391                           ;usb_device.c: 1620: BothEP0OutUOWNsSet = TRUE;
  8392  07BF  0022               	movlb	2	; select bank2
  8393  07C0  01B0               	clrf	_BothEP0OutUOWNsSet^(0+256)
  8394  07C1  0AB0               	incf	_BothEP0OutUOWNsSet^(0+256),f
  8395                           
  8396                           ;usb_device.c: 1624: pBDTEntryEP0OutNext->CNT = 8;
  8397  07C2  0020               	movlb	0	; select bank0
  8398  07C3  0A6F               	incf	_pBDTEntryEP0OutNext,w
  8399  07C4  0086               	movwf	6
  8400  07C5  3008               	movlw	8
  8401  07C6  0081               	movwf	1
  8402                           
  8403                           ;usb_device.c: 1625: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  8404  07C7  3040               	movlw	64
  8405  07C8  00D6               	movwf	??_USBCtrlEPAllowStatusStage
  8406  07C9  01D7               	clrf	??_USBCtrlEPAllowStatusStage+1
  8407  07CA  086F               	movf	_pBDTEntryEP0OutNext,w
  8408  07CB  27E1               	fcall	PL60	;call to abstracted procedure
  8409                           
  8410                           ;usb_device.c: 1626: pBDTEntryEP0OutNext->STAT.Val = 0x80;
  8411  07CC  086F               	movf	_pBDTEntryEP0OutNext,w
  8412  07CD  0086               	movwf	6
  8413  07CE  3080               	movlw	128
  8414  07CF  0081               	movwf	1
  8415  07D0  0008               	return
  8416  07D1                     __end_of_USBCtrlEPAllowStatusStage:	
  8417  07D1                     PL36:	
  8418  07D1  0A6F               	incf	_pBDTEntryEP0OutNext,w
  8419  07D2  0086               	movwf	6
  8420  07D3  3008               	movlw	8
  8421  07D4  0187               	clrf	7
  8422  07D5  0081               	movwf	1
  8423  07D6  3440               	retlw	64
  8424  07D7                     __end_ofPL36:	
  8425  07D7                     PL42:	
  8426  07D7  00D8               	movwf	??_USBCtrlTrfRxService
  8427  07D8  01D9               	clrf	??_USBCtrlTrfRxService+1
  8428  07D9  086F               	movf	_pBDTEntryEP0OutNext,w
  8429  07DA  3E02               	addlw	2
  8430  07DB  0086               	movwf	6
  8431  07DC  0858               	movf	??_USBCtrlTrfRxService,w
  8432  07DD  3FC0               	movwi [0]fsr1
  8433  07DE  0859               	movf	??_USBCtrlTrfRxService+1,w
  8434  07DF  3FC1               	movwi [1]fsr1
  8435  07E0  0008               	return
  8436  07E1                     __end_ofPL42:	
  8437  07E1                     PL60:	
  8438  07E1  3E02               	addlw	2
  8439  07E2  0086               	movwf	6
  8440  07E3  0856               	movf	??_USBCtrlEPAllowStatusStage,w
  8441  07E4  3FC0               	movwi [0]fsr1
  8442  07E5  0857               	movf	??_USBCtrlEPAllowStatusStage+1,w
  8443  07E6  3FC1               	movwi [1]fsr1
  8444  07E7  0008               	return
  8445  07E8                     __end_ofPL60:	
  8446  07E8                     PL66:	
  8447  07E8  0086               	movwf	6
  8448  07E9  30C8               	movlw	200
  8449  07EA  0081               	movwf	1
  8450  07EB  0008               	return
  8451  07EC                     __end_ofPL66:	
  8452                           
  8453                           	psect	text1923
  8454  0316                     __ptext1923:	
  8455 ;; *************** function _USBCtrlTrfSetupHandler *****************
  8456 ;; Defined at:
  8457 ;;		line 2623 in file "../USB/usb_device.c"
  8458 ;; Parameters:    Size  Location     Type
  8459 ;;		None
  8460 ;; Auto vars:     Size  Location     Type
  8461 ;;		None
  8462 ;; Return value:  Size  Location     Type
  8463 ;;		None               void
  8464 ;; Registers used:
  8465 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  8466 ;; Tracked objects:
  8467 ;;		On entry : 1F/1
  8468 ;;		On exit  : 1D/0
  8469 ;;		Unchanged: FFFE0/0
  8470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8475 ;;Total ram usage:        0 bytes
  8476 ;; Hardware stack levels used:    1
  8477 ;; Hardware stack levels required when called:   10
  8478 ;; This function calls:
  8479 ;;		_USBCheckStdRequest
  8480 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8481 ;;		_USBCtrlEPServiceComplete
  8482 ;; This function is called by:
  8483 ;;		_USBCtrlEPService
  8484 ;; This function uses a non-reentrant model
  8485 ;;
  8486                           
  8487                           
  8488                           ;psect for function _USBCtrlTrfSetupHandler
  8489  0316                     _USBCtrlTrfSetupHandler:	
  8490  0316                     l5745:	
  8491                           ; Regs used in _USBCtrlTrfSetupHandler: [allreg]
  8492                           
  8493                           
  8494                           ;usb_device.c: 2627: shortPacketStatus = 0;
  8495  0316  0022               	movlb	2	; select bank2
  8496  0317  01C1               	clrf	_shortPacketStatus^(0+256)
  8497                           
  8498                           ;usb_device.c: 2628: USBDeferStatusStagePacket = FALSE;
  8499  0318  0020               	movlb	0	; select bank0
  8500  0319  01EC               	clrf	_USBDeferStatusStagePacket	;volatile
  8501                           
  8502                           ;usb_device.c: 2629: USBDeferINDataStagePackets = FALSE;
  8503  031A  0022               	movlb	2	; select bank2
  8504  031B  01B5               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  8505                           
  8506                           ;usb_device.c: 2630: USBDeferOUTDataStagePackets = FALSE;
  8507  031C  01B6               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  8508                           
  8509                           ;usb_device.c: 2631: BothEP0OutUOWNsSet = FALSE;
  8510  031D  01B0               	clrf	_BothEP0OutUOWNsSet^(0+256)
  8511                           
  8512                           ;usb_device.c: 2632: controlTransferState = 0;
  8513  031E  0020               	movlb	0	; select bank0
  8514  031F  01ED               	clrf	_controlTransferState
  8515                           
  8516                           ;usb_device.c: 2641: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  8517  0320  086A               	movf	_pBDTEntryIn,w
  8518  0321  0086               	movwf	6
  8519  0322  3004               	movlw	4
  8520  0323  0187               	clrf	7
  8521  0324  1381               	bcf	1,7
  8522                           
  8523                           ;usb_device.c: 2642: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  8524  0325  06EA               	xorwf	_pBDTEntryIn,f
  8525                           
  8526                           ;usb_device.c: 2643: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  8527  0326  086A               	movf	_pBDTEntryIn,w
  8528  0327  0086               	movwf	6
  8529  0328  3004               	movlw	4
  8530  0329  1381               	bcf	1,7
  8531                           
  8532                           ;usb_device.c: 2644: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  8533  032A  06EA               	xorwf	_pBDTEntryIn,f
  8534                           
  8535                           ;usb_device.c: 2645: pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
  8536  032B  086F               	movf	_pBDTEntryEP0OutNext,w
  8537  032C  0086               	movwf	6
  8538  032D  1381               	bcf	1,7
  8539                           
  8540                           ;usb_device.c: 2647: inPipes[0].info.Val = 0;
  8541  032E  0022               	movlb	2	; select bank2
  8542  032F  01CC               	clrf	(_inPipes^(0+256)+2)
  8543                           
  8544                           ;usb_device.c: 2648: inPipes[0].wCount.Val = 0;
  8545  0330  01CD               	clrf	(_inPipes^(0+256)+3)
  8546  0331  01CE               	clrf	((_inPipes+1)^(0+256)+3)
  8547                           
  8548                           ;usb_device.c: 2649: outPipes[0].info.Val = 0;
  8549  0332  01A2               	clrf	(_outPipes^(0+256)+2)
  8550                           
  8551                           ;usb_device.c: 2650: outPipes[0].wCount.Val = 0;
  8552  0333  01A3               	clrf	(_outPipes^(0+256)+3)
  8553  0334  01A4               	clrf	((_outPipes+1)^(0+256)+3)
  8554                           
  8555                           ;usb_device.c: 2656: USBCheckStdRequest();
  8556  0335  2343               	fcall	_USBCheckStdRequest
  8557                           
  8558                           ;usb_device.c: 2657: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_EP0_REQUEST,0,0);
  8559  0336  3003               	movlw	3
  8560  0337  0020               	movlb	0	; select bank0
  8561  0338  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  8562  0339  3000               	movlw	0
  8563  033A  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  8564  033B  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  8565  033C  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  8566  033D  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  8567  033E  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  8568  033F  3182  2288  3183   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8569                           
  8570                           ;usb_device.c: 2670: USBCtrlEPServiceComplete();
  8571  0342  2DC6               	ljmp	l5549
  8572  0343                     __end_of_USBCtrlTrfSetupHandler:	
  8573  0343                     __ptext1931:	
  8574 ;; *************** function _USBCheckStdRequest *****************
  8575 ;; Defined at:
  8576 ;;		line 2839 in file "../USB/usb_device.c"
  8577 ;; Parameters:    Size  Location     Type
  8578 ;;		None
  8579 ;; Auto vars:     Size  Location     Type
  8580 ;;		None
  8581 ;; Return value:  Size  Location     Type
  8582 ;;		None               void
  8583 ;; Registers used:
  8584 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  8585 ;; Tracked objects:
  8586 ;;		On entry : 1F/2
  8587 ;;		On exit  : 1C/0
  8588 ;;		Unchanged: FFFE0/0
  8589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8594 ;;Total ram usage:        0 bytes
  8595 ;; Hardware stack levels used:    1
  8596 ;; Hardware stack levels required when called:    9
  8597 ;; This function calls:
  8598 ;;		_USBStdGetDscHandler
  8599 ;;		_USBStdSetCfgHandler
  8600 ;;		_USBStdGetStatusHandler
  8601 ;;		_USBStdFeatureReqHandler
  8602 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8603 ;; This function is called by:
  8604 ;;		_USBCtrlTrfSetupHandler
  8605 ;; This function uses a non-reentrant model
  8606 ;;
  8607                           
  8608                           
  8609                           ;psect for function _USBCheckStdRequest
  8610  0343                     _USBCheckStdRequest:	
  8611                           
  8612                           ;usb_device.c: 2840: if(SetupPkt.RequestType != (0x00>>5)) return;
  8613                           
  8614                           ; Regs used in _USBCheckStdRequest: [allreg]
  8615  0343  0020               	movlb	0	; select bank0
  8616  0344  0E40               	swapf	64,w	;volatile
  8617  0345  0C89               	rrf	9,f
  8618  0346  3903               	andlw	3
  8619  0347  1D03               	btfss	3,2
  8620  0348  0008               	return
  8621  0349  2B77               	goto	l5853
  8622  034A                     l332:	
  8623                           ;usb_device.c: 2843: {
  8624                           ;usb_device.c: 2844: case 5:
  8625                           
  8626                           
  8627                           ;usb_device.c: 2845: inPipes[0].info.bits.busy = 1;
  8628  034A  0022               	movlb	2	; select bank2
  8629  034B  3008               	movlw	8
  8630  034C  17CC               	bsf	(_inPipes^(0+256)+2),7
  8631                           
  8632                           ;usb_device.c: 2846: USBDeviceState = ADR_PENDING_STATE;
  8633  034D  0021               	movlb	1	; select bank1
  8634  034E  00EB               	movwf	_USBDeviceState^(0+128)
  8635                           
  8636                           ;usb_device.c: 2848: break;
  8637  034F  0008               	return
  8638  0350                     l5823:	
  8639                           
  8640                           ;usb_device.c: 2850: USBStdGetDscHandler();
  8641  0350  2CB8               	ljmp	l5693
  8642  0351                     l5825:	
  8643                           ;usb_device.c: 2851: break;
  8644                           
  8645                           
  8646                           ;usb_device.c: 2853: USBStdSetCfgHandler();
  8647  0351  2CFC               	ljmp	l5633
  8648  0352                     l5827:	
  8649                           ;usb_device.c: 2854: break;
  8650                           
  8651                           
  8652                           ;usb_device.c: 2856: inPipes[0].pSrc.bRam = (BYTE*)&USBActiveConfiguration;
  8653  0352  304F               	movlw	_USBActiveConfiguration& (0+255)
  8654  0353                     L9:	
  8655  0353  0022               	movlb	2	; select bank2
  8656  0354  00CA               	movwf	_inPipes^(0+256)
  8657  0355  3001               	movlw	1
  8658  0356  00CB               	movwf	(_inPipes+1)^(0+256)
  8659                           
  8660                           ;usb_device.c: 2857: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  8661  0357  144C               	bsf	(_inPipes^(0+256)+2),0
  8662                           
  8663                           ;usb_device.c: 2858: inPipes[0].wCount.v[0] = 1;
  8664  0358  01CD               	clrf	(_inPipes^(0+256)+3)
  8665  0359  0ACD               	incf	(_inPipes^(0+256)+3),f
  8666                           
  8667                           ;usb_device.c: 2859: inPipes[0].info.bits.busy = 1;
  8668  035A  17CC               	bsf	(_inPipes^(0+256)+2),7
  8669                           
  8670                           ;usb_device.c: 2860: break;
  8671  035B  0008               	return
  8672  035C                     l5835:	
  8673                           
  8674                           ;usb_device.c: 2862: USBStdGetStatusHandler();
  8675  035C  2C74               	ljmp	l5719
  8676  035D                     l5837:	
  8677                           ;usb_device.c: 2863: break;
  8678                           
  8679                           
  8680                           ;usb_device.c: 2865: case 3:
  8681                           ;usb_device.c: 2866: USBStdFeatureReqHandler();
  8682  035D  2B82               	ljmp	l5861
  8683  035E                     l5839:	
  8684                           ;usb_device.c: 2867: break;
  8685                           
  8686                           
  8687                           ;usb_device.c: 2869: inPipes[0].pSrc.bRam = (BYTE*)&USBAlternateInterface[SetupPkt.bIntf
      +                          ID];
  8688  035E  0844               	movf	68,w	;volatile
  8689  035F  3E50               	addlw	_USBAlternateInterface& (0+255)
  8690  0360  2B53               	goto	L9
  8691  0361                     l341:	
  8692                           ;usb_device.c: 2874: case 11:
  8693                           
  8694                           
  8695                           ;usb_device.c: 2875: inPipes[0].info.bits.busy = 1;
  8696  0361  0022               	movlb	2	; select bank2
  8697  0362  17CC               	bsf	(_inPipes^(0+256)+2),7
  8698                           
  8699                           ;usb_device.c: 2876: USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.bAltID;
  8700  0363  0020               	movlb	0	; select bank0
  8701  0364  0844               	movf	68,w	;volatile
  8702  0365  3E50               	addlw	_USBAlternateInterface& (0+255)
  8703  0366  0086               	movwf	6
  8704  0367  3001               	movlw	1	; select bank2/3
  8705  0368  0087               	movwf	7
  8706  0369  0842               	movf	66,w	;volatile
  8707  036A  0081               	movwf	1
  8708                           
  8709                           ;usb_device.c: 2877: break;
  8710  036B  0008               	return
  8711  036C                     l5849:	
  8712                           
  8713                           ;usb_device.c: 2879: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SET_DESCRIPTOR,0,0);
  8714  036C  3002               	movlw	2
  8715  036D  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  8716  036E  3000               	movlw	0
  8717  036F  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  8718  0370  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  8719  0371  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  8720  0372  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  8721  0373  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  8722  0374  3182  2288         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8723                           
  8724                           ;usb_device.c: 2880: break;
  8725  0376  0008               	return
  8726  0377                     l5853:	
  8727  0377  0841               	movf	65,w	;volatile
  8728                           
  8729                           ; Switch size 1, requested type "space"
  8730                           ; Number of cases is 11, Range of values is 0 to 12
  8731                           ; switch strategies available:
  8732                           ; Name         Instructions Cycles
  8733                           ; direct_byte           32     6 (fixed)
  8734                           ; simple_byte           34    18 (average)
  8735                           ; jumptable            260     6 (fixed)
  8736                           ; rangetable            17     4 (fixed)
  8737                           ; spacedrange           31     6 (fixed)
  8738                           ; locatedrange          13     3 (fixed)
  8739                           ;	Chosen strategy is direct_byte
  8740  0378  0084               	movwf	4
  8741  0379  300D               	movlw	13
  8742  037A  0204               	subwf	4,w
  8743  037B  1803               	skipnc
  8744  037C  0008               	return
  8745  037D  3190               	movlp	high S6625
  8746  037E  3504               	lslf	4,w
  8747  037F  3EBD               	addlw	low S6625
  8748  0380  0082               	movwf	2
  8749  0381                     l330:	
  8750  0381  0008               	return
  8751  0382                     __end_of_USBCheckStdRequest:	
  8752  0382                     __ptext1936:	
  8753 ;; *************** function _USBStdFeatureReqHandler *****************
  8754 ;; Defined at:
  8755 ;;		line 2907 in file "../USB/usb_device.c"
  8756 ;; Parameters:    Size  Location     Type
  8757 ;;		None
  8758 ;; Auto vars:     Size  Location     Type
  8759 ;;  pUEP            2    0[BANK1 ] PTR unsigned char 
  8760 ;;		 -> UEP0(1), 
  8761 ;;  p               1    3[BANK1 ] PTR struct __BDT
  8762 ;;		 -> NULL(0), BDT(32), 
  8763 ;;  current_ep_d    1    2[BANK1 ] struct .
  8764 ;; Return value:  Size  Location     Type
  8765 ;;		None               void
  8766 ;; Registers used:
  8767 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8768 ;; Tracked objects:
  8769 ;;		On entry : 1D/0
  8770 ;;		On exit  : 1E/0
  8771 ;;		Unchanged: FFFE0/0
  8772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8774 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8775 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8776 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8777 ;;Total ram usage:        6 bytes
  8778 ;; Hardware stack levels used:    1
  8779 ;; Hardware stack levels required when called:    8
  8780 ;; This function calls:
  8781 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8782 ;; This function is called by:
  8783 ;;		_USBCheckStdRequest
  8784 ;; This function uses a non-reentrant model
  8785 ;;
  8786                           
  8787                           
  8788                           ;psect for function _USBStdFeatureReqHandler
  8789  0382                     _USBStdFeatureReqHandler:	
  8790  0382                     l5861:	
  8791                           ; Regs used in _USBStdFeatureReqHandler: [wreg-status,0+pclath+cstack]
  8792                           
  8793                           
  8794                           ;usb_device.c: 2908: BDT_ENTRY *p;
  8795                           ;usb_device.c: 2909: EP_STATUS current_ep_data;
  8796                           ;usb_device.c: 2913: unsigned char* pUEP;
  8797                           ;usb_device.c: 2951: if((SetupPkt.bFeature == 1)&&
  8798                           ;usb_device.c: 2952: (SetupPkt.Recipient == (0x00)))
  8799  0382  0020               	movlb	0	; select bank0
  8800  0383  0B42               	decfsz	66,w	;volatile
  8801  0384  2B96               	goto	l5873
  8802  0385  0840               	movf	64,w	;volatile
  8803  0386  391F               	andlw	31
  8804  0387  1D03               	skipz
  8805  0388  2B96               	goto	l5873
  8806                           
  8807                           ;usb_device.c: 2953: {
  8808                           ;usb_device.c: 2954: inPipes[0].info.bits.busy = 1;
  8809  0389  0022               	movlb	2	; select bank2
  8810  038A  17CC               	bsf	(_inPipes^(0+256)+2),7
  8811                           
  8812                           ;usb_device.c: 2955: if(SetupPkt.bRequest == 3)
  8813  038B  0020               	movlb	0	; select bank0
  8814  038C  0841               	movf	65,w	;volatile
  8815  038D  3A03               	xorlw	3
  8816  038E  1D03               	skipz
  8817  038F  2B94               	goto	l5871
  8818                           
  8819                           ;usb_device.c: 2956: RemoteWakeup = TRUE;
  8820  0390  0022               	movlb	2	; select bank2
  8821  0391  01B1               	clrf	_RemoteWakeup^(0+256)
  8822  0392  0AB1               	incf	_RemoteWakeup^(0+256),f
  8823  0393  2B96               	goto	l5873
  8824  0394                     l5871:	
  8825                           
  8826                           ;usb_device.c: 2957: else
  8827                           ;usb_device.c: 2958: RemoteWakeup = FALSE;
  8828  0394  0022               	movlb	2	; select bank2
  8829  0395  01B1               	clrf	_RemoteWakeup^(0+256)
  8830  0396                     l5873:	
  8831                           
  8832                           ;usb_device.c: 2959: }
  8833                           ;usb_device.c: 2962: if((SetupPkt.bFeature == 0)&&
  8834                           ;usb_device.c: 2963: (SetupPkt.Recipient == (0x02))&&
  8835                           ;usb_device.c: 2964: (SetupPkt.EPNum != 0) && (SetupPkt.EPNum <= 1)&&
  8836                           ;usb_device.c: 2965: (USBDeviceState == CONFIGURED_STATE))
  8837  0396  0020               	movlb	0	; select bank0
  8838  0397  0842               	movf	66,w
  8839  0398  1D03               	skipz
  8840  0399  0008               	return
  8841  039A  0840               	movf	64,w	;volatile
  8842  039B  391F               	andlw	31
  8843  039C  3A02               	xorlw	2
  8844  039D  1D03               	skipz
  8845  039E  0008               	return
  8846  039F  0844               	movf	68,w	;volatile
  8847  03A0  390F               	andlw	15
  8848  03A1  1903               	skipnz
  8849  03A2  0008               	return
  8850  03A3  0844               	movf	68,w	;volatile
  8851  03A4  390F               	andlw	15
  8852  03A5  00E6               	movwf	??_USBStdFeatureReqHandler
  8853  03A6  3002               	movlw	2
  8854  03A7  0266               	subwf	??_USBStdFeatureReqHandler,w
  8855  03A8  1803               	skipnc
  8856  03A9  0008               	return
  8857  03AA  0021               	movlb	1	; select bank1
  8858  03AB  086B               	movf	_USBDeviceState^(0+128),w
  8859  03AC  3A20               	xorlw	32
  8860  03AD  1D03               	skipz
  8861  03AE  0008               	return
  8862                           
  8863                           ;usb_device.c: 2966: {
  8864                           ;usb_device.c: 2969: inPipes[0].info.bits.busy = 1;
  8865  03AF  0022               	movlb	2	; select bank2
  8866  03B0  17CC               	bsf	(_inPipes^(0+256)+2),7
  8867                           
  8868                           ;usb_device.c: 2972: if(SetupPkt.EPDir == 0)
  8869  03B1  0020               	movlb	0	; select bank0
  8870  03B2  1BC4               	btfsc	68,7	;volatile
  8871  03B3  2BC3               	goto	l5887
  8872                           
  8873                           ;usb_device.c: 2973: {
  8874                           ;usb_device.c: 2974: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
  8875  03B4  0844               	movf	68,w	;volatile
  8876  03B5  390F               	andlw	15
  8877  03B6  3E2C               	addlw	_pBDTEntryOut& (0+255)
  8878  03B7  0086               	movwf	6
  8879  03B8  3001               	movlw	1	; select bank2/3
  8880  03B9  0087               	movwf	7
  8881  03BA  0801               	movf	1,w
  8882  03BB  0021               	movlb	1	; select bank1
  8883  03BC  00A3               	movwf	USBStdFeatureReqHandler@p^(0+128)
  8884                           
  8885                           ;usb_device.c: 2975: current_ep_data.Val = ep_data_out[SetupPkt.EPNum].Val;
  8886  03BD  0020               	movlb	0	; select bank0
  8887  03BE  0844               	movf	68,w	;volatile
  8888  03BF  390F               	andlw	15
  8889  03C0  3E28               	addlw	_ep_data_out& (0+255)
  8890  03C1  0086               	movwf	6
  8891  03C2  2BD2               	goto	L11
  8892  03C3                     l5887:	
  8893                           ;usb_device.c: 2976: }
  8894                           
  8895                           
  8896                           ;usb_device.c: 2977: else
  8897                           ;usb_device.c: 2978: {
  8898                           ;usb_device.c: 2979: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
  8899  03C3  0844               	movf	68,w	;volatile
  8900  03C4  390F               	andlw	15
  8901  03C5  3E6A               	addlw	_pBDTEntryIn& (0+255)
  8902  03C6  0086               	movwf	6
  8903  03C7  0187               	clrf	7
  8904  03C8  0801               	movf	1,w
  8905  03C9  0021               	movlb	1	; select bank1
  8906  03CA  00A3               	movwf	USBStdFeatureReqHandler@p^(0+128)
  8907                           
  8908                           ;usb_device.c: 2980: current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Val;
  8909  03CB  0020               	movlb	0	; select bank0
  8910  03CC  0844               	movf	68,w	;volatile
  8911  03CD  390F               	andlw	15
  8912  03CE  3E26               	addlw	_ep_data_in& (0+255)
  8913  03CF  0086               	movwf	6
  8914  03D0  3001               	movlw	1	; select bank2/3
  8915  03D1  0087               	movwf	7
  8916  03D2                     L11:	
  8917  03D2  0801               	movf	1,w
  8918  03D3  0021               	movlb	1	; select bank1
  8919  03D4  00A2               	movwf	USBStdFeatureReqHandler@current_ep_data^(0+128)
  8920                           
  8921                           ;usb_device.c: 2981: }
  8922                           ;usb_device.c: 2987: if(current_ep_data.bits.ping_pong_state == 0)
  8923  03D5  1822               	btfsc	USBStdFeatureReqHandler@current_ep_data^(0+128),0
  8924  03D6  2BD9               	goto	l353
  8925                           
  8926                           ;usb_device.c: 2988: {
  8927                           ;usb_device.c: 2989: {((BYTE_VAL*)&p)->Val &= ~0x0004;};
  8928  03D7  1123               	bcf	USBStdFeatureReqHandler@p^(0+128),2
  8929                           
  8930                           ;usb_device.c: 2990: }
  8931  03D8  2BDA               	goto	l354
  8932  03D9                     l353:	
  8933                           
  8934                           ;usb_device.c: 2991: else
  8935                           ;usb_device.c: 2992: {
  8936                           ;usb_device.c: 2993: {((BYTE_VAL*)&p)->Val |= 0x0004;};
  8937  03D9  1523               	bsf	USBStdFeatureReqHandler@p^(0+128),2
  8938  03DA                     l354:	
  8939                           
  8940                           ;usb_device.c: 2994: }
  8941                           ;usb_device.c: 2999: if(SetupPkt.EPDir == 0)
  8942  03DA  0020               	movlb	0	; select bank0
  8943  03DB  1BC4               	btfsc	68,7	;volatile
  8944  03DC  2BE4               	goto	l5895
  8945                           
  8946                           ;usb_device.c: 3000: {
  8947                           ;usb_device.c: 3001: pBDTEntryOut[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
  8948  03DD  0844               	movf	68,w	;volatile
  8949  03DE  390F               	andlw	15
  8950  03DF  3E2C               	addlw	_pBDTEntryOut& (0+255)
  8951  03E0  0086               	movwf	6
  8952  03E1  3001               	movlw	1	; select bank2/3
  8953  03E2  0087               	movwf	7
  8954  03E3  2BE9               	goto	L12
  8955  03E4                     l5895:	
  8956                           ;usb_device.c: 3002: }
  8957                           
  8958                           
  8959                           ;usb_device.c: 3003: else
  8960                           ;usb_device.c: 3004: {
  8961                           ;usb_device.c: 3005: pBDTEntryIn[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
  8962  03E4  0844               	movf	68,w	;volatile
  8963  03E5  390F               	andlw	15
  8964  03E6  3E6A               	addlw	_pBDTEntryIn& (0+255)
  8965  03E7  0086               	movwf	6
  8966  03E8  0187               	clrf	7
  8967  03E9                     L12:	
  8968  03E9  0021               	movlb	1	; select bank1
  8969  03EA  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  8970  03EB  0081               	movwf	1
  8971                           
  8972                           ;usb_device.c: 3006: }
  8973                           ;usb_device.c: 3009: if(SetupPkt.bRequest == 3)
  8974  03EC  0020               	movlb	0	; select bank0
  8975  03ED  0841               	movf	65,w	;volatile
  8976  03EE  3A03               	xorlw	3
  8977  03EF  1D03               	skipz
  8978  03F0  2C0C               	goto	l5907
  8979                           
  8980                           ;usb_device.c: 3010: {
  8981                           ;usb_device.c: 3011: if(p->STAT.UOWN == 1)
  8982  03F1  0021               	movlb	1	; select bank1
  8983  03F2  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  8984  03F3  0086               	movwf	6
  8985  03F4  0187               	clrf	7
  8986  03F5  1F81               	btfss	1,7
  8987  03F6  2C05               	goto	l358
  8988                           
  8989                           ;usb_device.c: 3012: {
  8990                           ;usb_device.c: 3015: if(SetupPkt.EPDir == 0)
  8991  03F7  0020               	movlb	0	; select bank0
  8992  03F8  1BC4               	btfsc	68,7	;volatile
  8993  03F9  2BFE               	goto	l5905
  8994                           
  8995                           ;usb_device.c: 3016: {
  8996                           ;usb_device.c: 3017: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
  8997  03FA  0844               	movf	68,w	;volatile
  8998  03FB  390F               	andlw	15
  8999  03FC  3E28               	addlw	_ep_data_out& (0+255)
  9000  03FD  2C01               	goto	L13
  9001  03FE                     l5905:	
  9002                           ;usb_device.c: 3018: }
  9003                           
  9004                           
  9005                           ;usb_device.c: 3019: else
  9006                           ;usb_device.c: 3020: {
  9007                           ;usb_device.c: 3021: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
  9008  03FE  0844               	movf	68,w	;volatile
  9009  03FF  390F               	andlw	15
  9010  0400  3E26               	addlw	_ep_data_in& (0+255)
  9011  0401                     L13:	
  9012  0401  0086               	movwf	6
  9013  0402  3001               	movlw	1	; select bank2/3
  9014  0403  0087               	movwf	7
  9015  0404  1481               	bsf	1,1
  9016  0405                     l358:	
  9017                           
  9018                           ;usb_device.c: 3022: }
  9019                           ;usb_device.c: 3023: }
  9020                           ;usb_device.c: 3026: p->STAT.Val |= 0x80|0x04;
  9021  0405  0021               	movlb	1	; select bank1
  9022  0406  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  9023  0407  0086               	movwf	6
  9024  0408  3084               	movlw	132
  9025  0409  0187               	clrf	7
  9026  040A  0481               	iorwf	1,f
  9027                           
  9028                           ;usb_device.c: 3027: }
  9029  040B  0008               	return
  9030  040C                     l5907:	
  9031                           
  9032                           ;usb_device.c: 3028: else
  9033                           ;usb_device.c: 3029: {
  9034                           ;usb_device.c: 3033: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
  9035  040C  3004               	movlw	4
  9036  040D  0021               	movlb	1	; select bank1
  9037  040E  06A3               	xorwf	USBStdFeatureReqHandler@p^(0+128),f
  9038                           
  9039                           ;usb_device.c: 3035: if(p->STAT.UOWN == 1)
  9040  040F  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  9041  0410  0086               	movwf	6
  9042  0411  0187               	clrf	7
  9043                           
  9044                           ;usb_device.c: 3036: {
  9045                           ;usb_device.c: 3039: p->STAT.Val &= (~0x80);
  9046  0412  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  9047  0413  1F81               	btfss	1,7
  9048  0414  2C29               	goto	L15
  9049  0415  0086               	movwf	6
  9050  0416  1381               	bcf	1,7
  9051                           
  9052                           ;usb_device.c: 3040: p->STAT.Val |= 0x40;
  9053  0417  0086               	movwf	6
  9054  0418  3005               	movlw	5
  9055  0419  1701               	bsf	1,6
  9056                           
  9057                           ;usb_device.c: 3041: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
  9058  041A  0020               	movlb	0	; select bank0
  9059  041B  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  9060  041C  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  9061  041D  0021               	movlb	1	; select bank1
  9062  041E  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  9063  041F  0020               	movlb	0	; select bank0
  9064  0420  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  9065  0421  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  9066  0422  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  9067  0423  0AE4               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+4,f
  9068  0424  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  9069  0425  3182  2288  3183   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9070                           
  9071                           ;usb_device.c: 3042: }
  9072  0428  2C2C               	goto	l5917
  9073  0429                     L15:	
  9074                           ;usb_device.c: 3043: else
  9075                           ;usb_device.c: 3044: {
  9076                           ;usb_device.c: 3046: p->STAT.Val |= 0x40;
  9077                           
  9078  0429  0086               	movwf	6
  9079  042A  0187               	clrf	7
  9080  042B  1701               	bsf	1,6
  9081  042C                     l5917:	
  9082                           
  9083                           ;usb_device.c: 3047: }
  9084                           ;usb_device.c: 3051: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
  9085  042C  3004               	movlw	4
  9086  042D  0021               	movlb	1	; select bank1
  9087  042E  06A3               	xorwf	USBStdFeatureReqHandler@p^(0+128),f
  9088                           
  9089                           ;usb_device.c: 3057: if((current_ep_data.bits.transfer_terminated != 0) || (p->STAT.UOWN
      +                           == 1))
  9090  042F  18A2               	btfsc	USBStdFeatureReqHandler@current_ep_data^(0+128),1
  9091  0430  2C36               	goto	l366
  9092  0431  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  9093  0432  0086               	movwf	6
  9094  0433  0187               	clrf	7
  9095  0434  1F81               	btfss	1,7
  9096  0435  2C5A               	goto	l5929
  9097  0436                     l366:	
  9098                           
  9099                           ;usb_device.c: 3058: {
  9100                           ;usb_device.c: 3059: if(SetupPkt.EPDir == 0)
  9101  0436  0020               	movlb	0	; select bank0
  9102  0437  1BC4               	btfsc	68,7	;volatile
  9103  0438  2C3D               	goto	l5925
  9104                           
  9105                           ;usb_device.c: 3060: {
  9106                           ;usb_device.c: 3061: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
  9107  0439  0844               	movf	68,w	;volatile
  9108  043A  390F               	andlw	15
  9109  043B  3E28               	addlw	_ep_data_out& (0+255)
  9110  043C  2C40               	goto	L14
  9111  043D                     l5925:	
  9112                           ;usb_device.c: 3062: }
  9113                           
  9114                           
  9115                           ;usb_device.c: 3063: else
  9116                           ;usb_device.c: 3064: {
  9117                           ;usb_device.c: 3065: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
  9118  043D  0844               	movf	68,w	;volatile
  9119  043E  390F               	andlw	15
  9120  043F  3E26               	addlw	_ep_data_in& (0+255)
  9121  0440                     L14:	
  9122  0440  0086               	movwf	6
  9123  0441  3001               	movlw	1	; select bank2/3
  9124  0442  0087               	movwf	7
  9125  0443  1081               	bcf	1,1
  9126                           
  9127                           ;usb_device.c: 3066: }
  9128                           ;usb_device.c: 3068: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
  9129  0444  0021               	movlb	1	; select bank1
  9130  0445  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  9131  0446  0086               	movwf	6
  9132  0447  303B               	movlw	59
  9133  0448  0187               	clrf	7
  9134  0449  0581               	andwf	1,f
  9135                           
  9136                           ;usb_device.c: 3071: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
  9137  044A  3005               	movlw	5
  9138  044B  0020               	movlb	0	; select bank0
  9139  044C  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  9140  044D  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  9141  044E  0021               	movlb	1	; select bank1
  9142  044F  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  9143  0450  0020               	movlb	0	; select bank0
  9144  0451  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  9145  0452  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  9146  0453  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  9147  0454  0AE4               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+4,f
  9148  0455  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  9149  0456  3182  2288  3183   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9150                           
  9151                           ;usb_device.c: 3072: }
  9152  0459  2C5F               	goto	l5931
  9153  045A                     l5929:	
  9154                           
  9155                           ;usb_device.c: 3073: else
  9156                           ;usb_device.c: 3074: {
  9157                           ;usb_device.c: 3076: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
  9158  045A  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  9159  045B  0086               	movwf	6
  9160  045C  303B               	movlw	59
  9161  045D  0187               	clrf	7
  9162  045E  0581               	andwf	1,f
  9163  045F                     l5931:	
  9164                           
  9165                           ;usb_device.c: 3077: }
  9166                           ;usb_device.c: 3124: pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
  9167  045F  0020               	movlb	0	; select bank0
  9168  0460  0844               	movf	68,w	;volatile
  9169  0461  390F               	andlw	15
  9170  0462  3E98               	addlw	152
  9171  0463  00E6               	movwf	??_USBStdFeatureReqHandler
  9172  0464  300E               	movlw	14
  9173  0465  01E7               	clrf	??_USBStdFeatureReqHandler+1
  9174  0466  3DE7               	addwfc	??_USBStdFeatureReqHandler+1,f
  9175  0467  0866               	movf	??_USBStdFeatureReqHandler,w
  9176  0468  0021               	movlb	1	; select bank1
  9177  0469  00A0               	movwf	USBStdFeatureReqHandler@pUEP^(0+128)
  9178  046A  0020               	movlb	0	; select bank0
  9179  046B  0867               	movf	??_USBStdFeatureReqHandler+1,w
  9180  046C  0021               	movlb	1	; select bank1
  9181  046D  00A1               	movwf	(USBStdFeatureReqHandler@pUEP+1)^(0+128)
  9182                           
  9183                           ;usb_device.c: 3128: *pUEP &= ~0x0001;
  9184  046E  0820               	movf	USBStdFeatureReqHandler@pUEP^(0+128),w
  9185  046F  0086               	movwf	6
  9186  0470  0821               	movf	(USBStdFeatureReqHandler@pUEP+1)^(0+128),w
  9187  0471  0087               	movwf	7
  9188  0472  1001               	bcf	1,0
  9189  0473  0008               	return
  9190  0474                     __end_of_USBStdFeatureReqHandler:	
  9191  0474                     __ptext1935:	
  9192 ;; *************** function _USBStdGetStatusHandler *****************
  9193 ;; Defined at:
  9194 ;;		line 2283 in file "../USB/usb_device.c"
  9195 ;; Parameters:    Size  Location     Type
  9196 ;;		None
  9197 ;; Auto vars:     Size  Location     Type
  9198 ;;  p               1    6[BANK0 ] PTR struct __BDT
  9199 ;;		 -> NULL(0), BDT(32), 
  9200 ;; Return value:  Size  Location     Type
  9201 ;;		None               void
  9202 ;; Registers used:
  9203 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  9204 ;; Tracked objects:
  9205 ;;		On entry : 1D/0
  9206 ;;		On exit  : 1F/2
  9207 ;;		Unchanged: FFFE0/0
  9208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9212 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9213 ;;Total ram usage:        1 bytes
  9214 ;; Hardware stack levels used:    1
  9215 ;; Hardware stack levels required when called:    4
  9216 ;; This function calls:
  9217 ;;		Nothing
  9218 ;; This function is called by:
  9219 ;;		_USBCheckStdRequest
  9220 ;; This function uses a non-reentrant model
  9221 ;;
  9222                           
  9223                           
  9224                           ;psect for function _USBStdGetStatusHandler
  9225  0474                     _USBStdGetStatusHandler:	
  9226  0474                     l5719:	
  9227                           ; Regs used in _USBStdGetStatusHandler: [wreg-status,0]
  9228                           
  9229                           
  9230                           ;usb_device.c: 2284: CtrlTrfData[0] = 0;
  9231  0474  0020               	movlb	0	; select bank0
  9232  0475  01C8               	clrf	72	;volatile
  9233                           
  9234                           ;usb_device.c: 2285: CtrlTrfData[1] = 0;
  9235  0476  01C9               	clrf	73	;volatile
  9236                           
  9237                           ;usb_device.c: 2287: switch(SetupPkt.Recipient)
  9238  0477  2CA3               	goto	l5737
  9239  0478                     l271:	
  9240                           ;usb_device.c: 2288: {
  9241                           ;usb_device.c: 2289: case (0x00):
  9242                           
  9243                           
  9244                           ;usb_device.c: 2295: if(1 == 1)
  9245  0478  0022               	movlb	2	; select bank2
  9246  0479  17CC               	bsf	(_inPipes^(0+256)+2),7
  9247                           
  9248                           ;usb_device.c: 2296: {
  9249                           ;usb_device.c: 2297: CtrlTrfData[0]|=0x01;
  9250  047A  0020               	movlb	0	; select bank0
  9251  047B  1448               	bsf	72,0	;volatile
  9252                           
  9253                           ;usb_device.c: 2298: }
  9254                           ;usb_device.c: 2300: if(RemoteWakeup == TRUE)
  9255  047C  0022               	movlb	2	; select bank2
  9256  047D  0B31               	decfsz	_RemoteWakeup^(0+256),w
  9257  047E  2CAE               	goto	l274
  9258                           
  9259                           ;usb_device.c: 2301: {
  9260                           ;usb_device.c: 2302: CtrlTrfData[0]|=0x02;
  9261  047F  0020               	movlb	0	; select bank0
  9262  0480  14C8               	bsf	72,1	;volatile
  9263  0481  2CAE               	goto	l274
  9264  0482                     l275:	
  9265                           ;usb_device.c: 2305: case (0x01):
  9266                           
  9267                           
  9268                           ;usb_device.c: 2306: inPipes[0].info.bits.busy = 1;
  9269  0482  0022               	movlb	2	; select bank2
  9270  0483  17CC               	bsf	(_inPipes^(0+256)+2),7
  9271                           
  9272                           ;usb_device.c: 2307: break;
  9273  0484  2CAE               	goto	l274
  9274  0485                     l276:	
  9275                           ;usb_device.c: 2308: case (0x02):
  9276                           
  9277                           
  9278                           ;usb_device.c: 2309: inPipes[0].info.bits.busy = 1;
  9279  0485  0022               	movlb	2	; select bank2
  9280  0486  17CC               	bsf	(_inPipes^(0+256)+2),7
  9281                           
  9282                           ;usb_device.c: 2313: {
  9283                           ;usb_device.c: 2314: BDT_ENTRY *p;
  9284                           ;usb_device.c: 2316: if(SetupPkt.EPDir == 0)
  9285  0487  0020               	movlb	0	; select bank0
  9286  0488  1BC4               	btfsc	68,7	;volatile
  9287  0489  2C91               	goto	l5727
  9288                           
  9289                           ;usb_device.c: 2317: {
  9290                           ;usb_device.c: 2318: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
  9291  048A  0844               	movf	68,w	;volatile
  9292  048B  390F               	andlw	15
  9293  048C  3E2C               	addlw	_pBDTEntryOut& (0+255)
  9294  048D  0086               	movwf	6
  9295  048E  3001               	movlw	1	; select bank2/3
  9296  048F  0087               	movwf	7
  9297  0490  2C96               	goto	L10
  9298  0491                     l5727:	
  9299                           ;usb_device.c: 2319: }
  9300                           
  9301                           
  9302                           ;usb_device.c: 2320: else
  9303                           ;usb_device.c: 2321: {
  9304                           ;usb_device.c: 2322: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
  9305  0491  0844               	movf	68,w	;volatile
  9306  0492  390F               	andlw	15
  9307  0493  3E6A               	addlw	_pBDTEntryIn& (0+255)
  9308  0494  0086               	movwf	6
  9309  0495  0187               	clrf	7
  9310  0496                     L10:	
  9311  0496  0801               	movf	1,w
  9312  0497  00D6               	movwf	USBStdGetStatusHandler@p
  9313                           
  9314                           ;usb_device.c: 2323: }
  9315                           ;usb_device.c: 2325: if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1))
  9316  0498  0086               	movwf	6
  9317  0499  0187               	clrf	7
  9318  049A  1F81               	btfss	1,7
  9319  049B  2CAE               	goto	l274
  9320  049C  0856               	movf	USBStdGetStatusHandler@p,w
  9321  049D  0086               	movwf	6
  9322  049E  1D01               	btfss	1,2
  9323  049F  2CAE               	goto	l274
  9324                           
  9325                           ;usb_device.c: 2326: CtrlTrfData[0]=0x01;
  9326  04A0  3001               	movlw	1
  9327  04A1  00C8               	movwf	72	;volatile
  9328  04A2  2CAE               	goto	l274
  9329  04A3                     l5737:	
  9330  04A3  0840               	movf	64,w	;volatile
  9331  04A4  391F               	andlw	31
  9332                           
  9333                           ; Switch size 1, requested type "space"
  9334                           ; Number of cases is 3, Range of values is 0 to 2
  9335                           ; switch strategies available:
  9336                           ; Name         Instructions Cycles
  9337                           ; simple_byte           10     6 (average)
  9338                           ; direct_byte           12     6 (fixed)
  9339                           ; jumptable            260     6 (fixed)
  9340                           ; rangetable             7     4 (fixed)
  9341                           ; spacedrange           11     6 (fixed)
  9342                           ; locatedrange           3     3 (fixed)
  9343                           ;	Chosen strategy is simple_byte
  9344  04A5  1903               	skipnz
  9345  04A6  2C78               	goto	l271
  9346  04A7  3A01               	xorlw	1	; case 1
  9347  04A8  1903               	skipnz
  9348  04A9  2C82               	goto	l275
  9349  04AA  3A03               	xorlw	3	; case 2
  9350  04AB  1903               	skipnz
  9351  04AC  2C85               	goto	l276
  9352  04AD  2CAE               	goto	l274
  9353  04AE                     l274:	
  9354                           
  9355                           ;usb_device.c: 2331: if(inPipes[0].info.bits.busy == 1)
  9356  04AE  0022               	movlb	2	; select bank2
  9357  04AF  1FCC               	btfss	(_inPipes^(0+256)+2),7
  9358  04B0  0008               	return
  9359                           
  9360                           ;usb_device.c: 2332: {
  9361                           ;usb_device.c: 2333: inPipes[0].pSrc.bRam = (BYTE*)&CtrlTrfData;
  9362  04B1  3048               	movlw	72
  9363  04B2  00CA               	movwf	_inPipes^(0+256)
  9364  04B3  3002               	movlw	2
  9365  04B4  01CB               	clrf	(_inPipes+1)^(0+256)
  9366                           
  9367                           ;usb_device.c: 2334: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  9368  04B5  144C               	bsf	(_inPipes^(0+256)+2),0
  9369                           
  9370                           ;usb_device.c: 2335: inPipes[0].wCount.v[0] = 2;
  9371  04B6  00CD               	movwf	(_inPipes^(0+256)+3)
  9372  04B7  0008               	return
  9373  04B8                     __end_of_USBStdGetStatusHandler:	
  9374  04B8                     __ptext1934:	
  9375 ;; *************** function _USBStdGetDscHandler *****************
  9376 ;; Defined at:
  9377 ;;		line 2207 in file "../USB/usb_device.c"
  9378 ;; Parameters:    Size  Location     Type
  9379 ;;		None
  9380 ;; Auto vars:     Size  Location     Type
  9381 ;;		None
  9382 ;; Return value:  Size  Location     Type
  9383 ;;		None               void
  9384 ;; Registers used:
  9385 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  9386 ;; Tracked objects:
  9387 ;;		On entry : 1D/0
  9388 ;;		On exit  : 1D/0
  9389 ;;		Unchanged: FFFE0/0
  9390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;Total ram usage:        2 bytes
  9396 ;; Hardware stack levels used:    1
  9397 ;; Hardware stack levels required when called:    4
  9398 ;; This function calls:
  9399 ;;		Nothing
  9400 ;; This function is called by:
  9401 ;;		_USBCheckStdRequest
  9402 ;; This function uses a non-reentrant model
  9403 ;;
  9404                           
  9405                           
  9406                           ;psect for function _USBStdGetDscHandler
  9407  04B8                     _USBStdGetDscHandler:	
  9408  04B8                     l5693:	
  9409                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
  9410                           
  9411                           
  9412                           ;usb_device.c: 2208: if(SetupPkt.bmRequestType == 0x80)
  9413  04B8  0020               	movlb	0	; select bank0
  9414  04B9  0840               	movf	64,w	;volatile
  9415  04BA  3A80               	xorlw	128
  9416  04BB  1D03               	skipz
  9417  04BC  0008               	return
  9418                           
  9419                           ;usb_device.c: 2209: {
  9420                           ;usb_device.c: 2210: inPipes[0].info.Val = 0x00 | 0x80 | 0x40;
  9421  04BD  30C0               	movlw	192
  9422  04BE  0022               	movlb	2	; select bank2
  9423  04BF  00CC               	movwf	(_inPipes^(0+256)+2)
  9424                           
  9425                           ;usb_device.c: 2212: switch(SetupPkt.bDescriptorType)
  9426  04C0  2CEF               	goto	l5717
  9427  04C1                     l5697:	
  9428                           
  9429                           ;usb_device.c: 2218: inPipes[0].pSrc.bRom = (const BYTE*)&device_dsc;
  9430  04C1  309B               	movlw	low (_device_dsc| (0+32768))
  9431  04C2  0022               	movlb	2	; select bank2
  9432  04C3  00CA               	movwf	_inPipes^(0+256)
  9433  04C4  3090               	movlw	high (_device_dsc| (0+32768))
  9434  04C5  00CB               	movwf	(_inPipes+1)^(0+256)
  9435                           
  9436                           ;usb_device.c: 2220: inPipes[0].wCount.Val = sizeof(device_dsc);
  9437  04C6  3012               	movlw	18
  9438  04C7  00CD               	movwf	(_inPipes^(0+256)+3)
  9439  04C8  01CE               	clrf	((_inPipes+1)^(0+256)+3)
  9440                           
  9441                           ;usb_device.c: 2221: break;
  9442  04C9  0008               	return
  9443  04CA                     l5699:	
  9444                           
  9445                           ;usb_device.c: 2226: inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
  9446  04CA  3012               	movlw	low (_USB_CD_Ptr| (0+32768))
  9447  04CB  0084               	movwf	4
  9448  04CC  3090               	movlw	high (_USB_CD_Ptr| (0+32768))
  9449  04CD  269D  3183         	fcall	PL40	;call to abstracted procedure
  9450                           
  9451                           ;usb_device.c: 2232: inPipes[0].wCount.byte.LB = *(inPipes[0].pSrc.bRom+2);
  9452  04CF  26B0  3183         	fcall	PL58	;call to abstracted procedure
  9453  04D1  3E02               	addlw	2
  9454  04D2  26A8  3183         	fcall	PL50	;call to abstracted procedure
  9455  04D4  00CD               	movwf	(_inPipes^(0+256)+3)
  9456                           
  9457                           ;usb_device.c: 2233: inPipes[0].wCount.byte.HB = *(inPipes[0].pSrc.bRom+3);
  9458  04D5  084B               	movf	(_inPipes+1)^(0+256),w
  9459  04D6  26B0  3183         	fcall	PL58	;call to abstracted procedure
  9460  04D8  3E03               	addlw	3
  9461  04D9  26A8               	fcall	PL50	;call to abstracted procedure
  9462  04DA  00CE               	movwf	(_inPipes^(0+256)+4)
  9463                           
  9464                           ;usb_device.c: 2234: break;
  9465  04DB  0008               	return
  9466  04DC                     l5705:	
  9467                           
  9468                           ;usb_device.c: 2239: if(SetupPkt.bDscIndex<3)
  9469  04DC  3003               	movlw	3
  9470  04DD  0242               	subwf	66,w	;volatile
  9471  04DE  1803               	skipnc
  9472  04DF  2CEC               	goto	l5711
  9473                           
  9474                           ;usb_device.c: 2240: {
  9475                           ;usb_device.c: 2242: inPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
  9476  04E0  300F               	movlw	low (_USB_SD_Ptr| (0+32768))
  9477  04E1  0084               	movwf	4
  9478  04E2  3090               	movlw	high (_USB_SD_Ptr| (0+32768))
  9479  04E3  269D               	fcall	PL40	;call to abstracted procedure
  9480                           
  9481                           ;usb_device.c: 2244: inPipes[0].wCount.Val = *inPipes[0].pSrc.bRom;
  9482  04E4  084A               	movf	_inPipes^(0+256),w
  9483  04E5  0084               	movwf	4
  9484  04E6  084B               	movf	(_inPipes+1)^(0+256),w
  9485  04E7  0085               	movwf	5
  9486  04E8  0800               	movf	0,w	;code access
  9487  04E9  00CD               	movwf	(_inPipes^(0+256)+3)
  9488  04EA  01CE               	clrf	((_inPipes+1)^(0+256)+3)
  9489                           
  9490                           ;usb_device.c: 2245: }
  9491  04EB  0008               	return
  9492  04EC                     l5711:	
  9493                           
  9494                           ;usb_device.c: 2255: else
  9495                           ;usb_device.c: 2256: {
  9496                           ;usb_device.c: 2257: inPipes[0].info.Val = 0;
  9497  04EC  0022               	movlb	2	; select bank2
  9498  04ED  01CC               	clrf	(_inPipes^(0+256)+2)
  9499  04EE  0008               	return
  9500  04EF                     l5717:	
  9501  04EF  0020               	movlb	0	; select bank0
  9502  04F0  0843               	movf	67,w	;volatile
  9503                           
  9504                           ; Switch size 1, requested type "space"
  9505                           ; Number of cases is 3, Range of values is 1 to 3
  9506                           ; switch strategies available:
  9507                           ; Name         Instructions Cycles
  9508                           ; simple_byte           10     6 (average)
  9509                           ; direct_byte           15     9 (fixed)
  9510                           ; jumptable            263     9 (fixed)
  9511                           ;	Chosen strategy is simple_byte
  9512  04F1  3A01               	xorlw	1	; case 1
  9513  04F2  1903               	skipnz
  9514  04F3  2CC1               	goto	l5697
  9515  04F4  3A03               	xorlw	3	; case 2
  9516  04F5  1903               	skipnz
  9517  04F6  2CCA               	goto	l5699
  9518  04F7  3A01               	xorlw	1	; case 3
  9519  04F8  1903               	skipnz
  9520  04F9  2CDC               	goto	l5705
  9521  04FA  2CEC               	goto	l5711
  9522  04FB  0008               	return
  9523  04FC                     __end_of_USBStdGetDscHandler:	
  9524  04FC                     __ptext1932:	
  9525 ;; *************** function _USBStdSetCfgHandler *****************
  9526 ;; Defined at:
  9527 ;;		line 2132 in file "../USB/usb_device.c"
  9528 ;; Parameters:    Size  Location     Type
  9529 ;;		None
  9530 ;; Auto vars:     Size  Location     Type
  9531 ;;  p               2   22[BANK0 ] PTR unsigned char 
  9532 ;;		 -> UEP1(1), 
  9533 ;;  i               1   24[BANK0 ] unsigned char 
  9534 ;;  i               1   25[BANK0 ] unsigned char 
  9535 ;; Return value:  Size  Location     Type
  9536 ;;		None               void
  9537 ;; Registers used:
  9538 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9539 ;; Tracked objects:
  9540 ;;		On entry : 1D/0
  9541 ;;		On exit  : 1F/1
  9542 ;;		Unchanged: FFFE0/0
  9543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;Total ram usage:        4 bytes
  9549 ;; Hardware stack levels used:    1
  9550 ;; Hardware stack levels required when called:    8
  9551 ;; This function calls:
  9552 ;;		_memset
  9553 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9554 ;; This function is called by:
  9555 ;;		_USBCheckStdRequest
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           
  9560                           ;psect for function _USBStdSetCfgHandler
  9561  04FC                     _USBStdSetCfgHandler:	
  9562  04FC                     l5633:	
  9563                           ; Regs used in _USBStdSetCfgHandler: [wreg-status,0+pclath+cstack]
  9564                           
  9565                           
  9566                           ;usb_device.c: 2133: BYTE i;
  9567                           ;usb_device.c: 2136: inPipes[0].info.bits.busy = 1;
  9568  04FC  0022               	movlb	2	; select bank2
  9569  04FD  300E               	movlw	14
  9570  04FE  17CC               	bsf	(_inPipes^(0+256)+2),7
  9571                           
  9572                           ;usb_device.c: 2139: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<1;i++) *p++ = 0; };
  9573  04FF  0020               	movlb	0	; select bank0
  9574  0500  00E7               	movwf	USBStdSetCfgHandler@p+1
  9575  0501  3099               	movlw	153
  9576  0502  00E6               	movwf	USBStdSetCfgHandler@p
  9577  0503  01E8               	clrf	USBStdSetCfgHandler@i_1089
  9578  0504                     l5641:	
  9579  0504  0866               	movf	USBStdSetCfgHandler@p,w
  9580  0505  0086               	movwf	6
  9581  0506  0867               	movf	USBStdSetCfgHandler@p+1,w
  9582  0507  0087               	movwf	7
  9583  0508  0181               	clrf	1
  9584  0509  0AE6               	incf	USBStdSetCfgHandler@p,f
  9585  050A  1903               	skipnz
  9586  050B  0AE7               	incf	USBStdSetCfgHandler@p+1,f
  9587  050C  0AE8               	incf	USBStdSetCfgHandler@i_1089,f
  9588  050D  1903               	btfsc	3,2
  9589  050E  2D04               	goto	l5641
  9590                           
  9591                           ;usb_device.c: 2142: memset((void*)&BDT[0], 0x00, sizeof(BDT));
  9592  050F  3020               	movlw	32
  9593  0510  00D6               	movwf	?_memset
  9594  0511  01D7               	clrf	?_memset+1
  9595  0512  01D8               	clrf	?_memset+2
  9596  0513  01D9               	clrf	?_memset+3
  9597  0514  00DA               	movwf	?_memset+4
  9598  0515  01DB               	clrf	?_memset+5
  9599  0516  2559  3183         	fcall	_memset
  9600                           
  9601                           ;usb_device.c: 2145: UCONbits.PPBRST = 1;
  9602  0518  003D               	movlb	29	; select bank29
  9603  0519  170E               	bsf	14,6	;volatile
  9604                           
  9605                           ;usb_device.c: 2150: for(i = 0; i < (BYTE)(1+1u); i++)
  9606  051A  0020               	movlb	0	; select bank0
  9607  051B  01E9               	clrf	USBStdSetCfgHandler@i
  9608  051C                     l5659:	
  9609                           
  9610                           ;usb_device.c: 2151: {
  9611                           ;usb_device.c: 2152: ep_data_in[i].Val = 0u;
  9612  051C  0869               	movf	USBStdSetCfgHandler@i,w
  9613  051D  3E26               	addlw	_ep_data_in& (0+255)
  9614  051E  0086               	movwf	6
  9615  051F  3001               	movlw	1	; select bank2/3
  9616  0520  0087               	movwf	7
  9617  0521  0181               	clrf	1
  9618                           
  9619                           ;usb_device.c: 2153: ep_data_out[i].Val = 0u;
  9620  0522  0869               	movf	USBStdSetCfgHandler@i,w
  9621  0523  3E28               	addlw	_ep_data_out& (0+255)
  9622  0524  0086               	movwf	6
  9623  0525  3002               	movlw	2
  9624  0526  0181               	clrf	1
  9625  0527  0AE9               	incf	USBStdSetCfgHandler@i,f
  9626  0528  0269               	subwf	USBStdSetCfgHandler@i,w
  9627  0529  1C03               	skipc
  9628  052A  2D1C               	goto	l5659
  9629                           
  9630                           ;usb_device.c: 2154: }
  9631                           ;usb_device.c: 2157: memset((void*)&USBAlternateInterface,0x00,1);
  9632  052B  3050               	movlw	_USBAlternateInterface& (0+255)
  9633  052C  00D6               	movwf	?_memset
  9634  052D  3001               	movlw	1
  9635  052E  00D7               	movwf	?_memset+1
  9636  052F  01D8               	clrf	?_memset+2
  9637  0530  01D9               	clrf	?_memset+3
  9638  0531  01DA               	clrf	?_memset+4
  9639  0532  0ADA               	incf	?_memset+4,f
  9640  0533  01DB               	clrf	?_memset+5
  9641  0534  2559  3183         	fcall	_memset
  9642                           
  9643                           ;usb_device.c: 2160: UCONbits.PPBRST = 0;
  9644  0536  003D               	movlb	29	; select bank29
  9645  0537  130E               	bcf	14,6	;volatile
  9646                           
  9647                           ;usb_device.c: 2162: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  9648  0538  3028               	movlw	40
  9649  0539  0020               	movlb	0	; select bank0
  9650  053A  00EA               	movwf	_pBDTEntryIn
  9651                           
  9652                           ;usb_device.c: 2165: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
  9653  053B  3020               	movlw	32
  9654  053C  00EE               	movwf	_pBDTEntryEP0OutCurrent
  9655                           
  9656                           ;usb_device.c: 2166: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
  9657  053D  00EF               	movwf	_pBDTEntryEP0OutNext
  9658                           
  9659                           ;usb_device.c: 2169: USBActiveConfiguration = SetupPkt.bConfigurationValue;
  9660  053E  0842               	movf	66,w	;volatile
  9661  053F  0022               	movlb	2	; select bank2
  9662  0540  00CF               	movwf	_USBActiveConfiguration^(0+256)
  9663                           
  9664                           ;usb_device.c: 2172: if(USBActiveConfiguration == 0)
  9665  0541  08CF               	movf	_USBActiveConfiguration^(0+256),f
  9666  0542  1D03               	skipz
  9667  0543  2D48               	goto	l5681
  9668                           
  9669                           ;usb_device.c: 2173: {
  9670                           ;usb_device.c: 2175: USBDeviceState = ADDRESS_STATE;
  9671  0544  3010               	movlw	16
  9672  0545  0021               	movlb	1	; select bank1
  9673  0546  00EB               	movwf	_USBDeviceState^(0+128)
  9674                           
  9675                           ;usb_device.c: 2176: }
  9676  0547  0008               	return
  9677  0548                     l5681:	
  9678                           
  9679                           ;usb_device.c: 2177: else
  9680                           ;usb_device.c: 2178: {
  9681                           ;usb_device.c: 2180: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_CONFIGURED,(void*)&USBActiveC
      +                          onfiguration,1);
  9682  0548  0020               	movlb	0	; select bank0
  9683  0549  304F               	movlw	_USBActiveConfiguration& (0+255)
  9684  054A  01E0               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER
  9685  054B  0AE0               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER,f
  9686  054C  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  9687  054D  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  9688  054E  3001               	movlw	1
  9689  054F  00E3               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  9690  0550  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  9691  0551  0AE4               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+4,f
  9692  0552  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  9693  0553  3182  2288         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9694                           
  9695                           ;usb_device.c: 2185: USBDeviceState = CONFIGURED_STATE;
  9696  0555  3020               	movlw	32
  9697  0556  0021               	movlb	1	; select bank1
  9698  0557  00EB               	movwf	_USBDeviceState^(0+128)
  9699  0558  0008               	return
  9700  0559                     __end_of_USBStdSetCfgHandler:	
  9701  0559                     __ptext1933:	
  9702 ;; *************** function _memset *****************
  9703 ;; Defined at:
  9704 ;;		line 10 in file "../../common/memset.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;  p1              2    6[BANK0 ] PTR void 
  9707 ;;		 -> USBAlternateInterface(1), BDT(32), 
  9708 ;;  c               2    8[BANK0 ] int 
  9709 ;;  n               2   10[BANK0 ] unsigned int 
  9710 ;; Auto vars:     Size  Location     Type
  9711 ;;  p               2   13[BANK0 ] PTR unsigned char 
  9712 ;;		 -> USBAlternateInterface(1), BDT(32), 
  9713 ;; Return value:  Size  Location     Type
  9714 ;;                  2    wreg      PTR void 
  9715 ;; Registers used:
  9716 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9717 ;; Tracked objects:
  9718 ;;		On entry : 1F/0
  9719 ;;		On exit  : 1F/0
  9720 ;;		Unchanged: FFFE0/0
  9721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9722 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9723 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;Total ram usage:        9 bytes
  9727 ;; Hardware stack levels used:    1
  9728 ;; Hardware stack levels required when called:    4
  9729 ;; This function calls:
  9730 ;;		Nothing
  9731 ;; This function is called by:
  9732 ;;		_USBStdSetCfgHandler
  9733 ;; This function uses a non-reentrant model
  9734 ;;
  9735                           
  9736                           
  9737                           ;psect for function _memset
  9738  0559                     _memset:	
  9739                           
  9740                           ; Regs used in _memset: [wreg+fsr1l-status,0]
  9741  0559  0857               	movf	memset@p1+1,w
  9742  055A  00DE               	movwf	memset@p+1
  9743  055B  0856               	movf	memset@p1,w
  9744  055C  00DD               	movwf	memset@p
  9745  055D                     l5691:	
  9746  055D  3001               	movlw	1
  9747  055E  02DA               	subwf	memset@n,f
  9748  055F  3000               	movlw	0
  9749  0560  3BDB               	subwfb	memset@n+1,f
  9750  0561  0A5A               	incf	memset@n,w
  9751  0562  1903               	skipnz
  9752  0563  0A5B               	incf	memset@n+1,w
  9753  0564  1903               	btfsc	3,2
  9754  0565  0008               	return
  9755  0566  0858               	movf	memset@c,w
  9756  0567  00DC               	movwf	??_memset
  9757  0568  085D               	movf	memset@p,w
  9758  0569  0086               	movwf	6
  9759  056A  085E               	movf	memset@p+1,w
  9760  056B  0087               	movwf	7
  9761  056C  085C               	movf	??_memset,w
  9762  056D  0081               	movwf	1
  9763  056E  0ADD               	incf	memset@p,f
  9764  056F  1903               	skipnz
  9765  0570  0ADE               	incf	memset@p+1,f
  9766  0571  2D5D               	goto	l5691
  9767  0572                     __end_of_memset:	
  9768  0572                     __ptext1929:	
  9769 ;; *************** function _USBCtrlTrfInHandler *****************
  9770 ;; Defined at:
  9771 ;;		line 2748 in file "../USB/usb_device.c"
  9772 ;; Parameters:    Size  Location     Type
  9773 ;;		None
  9774 ;; Auto vars:     Size  Location     Type
  9775 ;;  lastDTS         1   11[BANK0 ] unsigned char 
  9776 ;; Return value:  Size  Location     Type
  9777 ;;		None               void
  9778 ;; Registers used:
  9779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9780 ;; Tracked objects:
  9781 ;;		On entry : 1F/1
  9782 ;;		On exit  : 1F/0
  9783 ;;		Unchanged: FFFE0/0
  9784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9786 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9787 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9789 ;;Total ram usage:        3 bytes
  9790 ;; Hardware stack levels used:    1
  9791 ;; Hardware stack levels required when called:    5
  9792 ;; This function calls:
  9793 ;;		_USBCtrlTrfTxService
  9794 ;; This function is called by:
  9795 ;;		_USBCtrlEPService
  9796 ;; This function uses a non-reentrant model
  9797 ;;
  9798                           
  9799                           
  9800                           ;psect for function _USBCtrlTrfInHandler
  9801  0572                     _USBCtrlTrfInHandler:	
  9802  0572                     l5783:	
  9803                           ; Regs used in _USBCtrlTrfInHandler: [wreg-status,0+pclath+cstack]
  9804                           
  9805                           
  9806                           ;usb_device.c: 2749: BYTE lastDTS;
  9807                           ;usb_device.c: 2751: lastDTS = pBDTEntryIn[0]->STAT.DTS;
  9808  0572  0020               	movlb	0	; select bank0
  9809  0573  086A               	movf	_pBDTEntryIn,w
  9810  0574  0086               	movwf	6
  9811  0575  3000               	movlw	0
  9812  0576  0187               	clrf	7
  9813  0577  1B01               	btfsc	1,6
  9814  0578  3001               	movlw	1
  9815  0579  00DB               	movwf	USBCtrlTrfInHandler@lastDTS
  9816                           
  9817                           ;usb_device.c: 2754: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  9818  057A  3004               	movlw	4
  9819  057B  06EA               	xorwf	_pBDTEntryIn,f
  9820                           
  9821                           ;usb_device.c: 2759: if(USBDeviceState == ADR_PENDING_STATE)
  9822  057C  0021               	movlb	1	; select bank1
  9823  057D  086B               	movf	_USBDeviceState^(0+128),w
  9824  057E  3A08               	xorlw	8
  9825  057F  1D03               	skipz
  9826  0580  2D8D               	goto	l315
  9827                           
  9828                           ;usb_device.c: 2760: {
  9829                           ;usb_device.c: 2761: UADDR = SetupPkt.bDevADR.Val;
  9830  0581  0020               	movlb	0	; select bank0
  9831  0582  0842               	movf	66,w	;volatile
  9832  0583  003D               	movlb	29	; select bank29
  9833  0584  0096               	movwf	22	;volatile
  9834                           
  9835                           ;usb_device.c: 2762: if(UADDR != 0u)
  9836  0585  0816               	movf	22,w
  9837  0586  1903               	btfsc	3,2
  9838  0587  2D8A               	goto	l5793
  9839                           
  9840                           ;usb_device.c: 2763: {
  9841                           ;usb_device.c: 2764: USBDeviceState=ADDRESS_STATE;
  9842  0588  3010               	movlw	16
  9843  0589  2D8B               	goto	L8
  9844  058A                     l5793:	
  9845                           ;usb_device.c: 2765: }
  9846                           
  9847                           
  9848                           ;usb_device.c: 2766: else
  9849                           ;usb_device.c: 2767: {
  9850                           ;usb_device.c: 2768: USBDeviceState=DEFAULT_STATE;
  9851  058A  3004               	movlw	4
  9852  058B                     L8:	
  9853  058B  0021               	movlb	1	; select bank1
  9854  058C  00EB               	movwf	_USBDeviceState^(0+128)
  9855  058D                     l315:	
  9856                           
  9857                           ;usb_device.c: 2769: }
  9858                           ;usb_device.c: 2770: }
  9859                           ;usb_device.c: 2773: if(controlTransferState == 1)
  9860  058D  0020               	movlb	0	; select bank0
  9861  058E  0B6D               	decfsz	_controlTransferState,w
  9862  058F  2DB9               	goto	l318
  9863                           
  9864                           ;usb_device.c: 2774: {
  9865                           ;usb_device.c: 2775: pBDTEntryIn[0]->ADR = (((WORD)(CtrlTrfData))& 0x7FFF);
  9866  0590  3048               	movlw	72
  9867  0591  00D9               	movwf	??_USBCtrlTrfInHandler
  9868  0592  01DA               	clrf	??_USBCtrlTrfInHandler+1
  9869  0593  086A               	movf	_pBDTEntryIn,w
  9870  0594  3E02               	addlw	2
  9871  0595  0086               	movwf	6
  9872  0596  0187               	clrf	7
  9873  0597  0859               	movf	??_USBCtrlTrfInHandler,w
  9874  0598  3FC0               	movwi [0]fsr1
  9875  0599  085A               	movf	??_USBCtrlTrfInHandler+1,w
  9876  059A  3FC1               	movwi [1]fsr1
  9877                           
  9878                           ;usb_device.c: 2776: USBCtrlTrfTxService();
  9879  059B  263D  3183         	fcall	_USBCtrlTrfTxService
  9880                           
  9881                           ;usb_device.c: 2782: if(shortPacketStatus == 2)
  9882  059D  0022               	movlb	2	; select bank2
  9883  059E  0841               	movf	_shortPacketStatus^(0+256),w
  9884  059F  3A02               	xorlw	2
  9885  05A0  1D03               	skipz
  9886  05A1  2DA9               	goto	l5803
  9887                           
  9888                           ;usb_device.c: 2783: {
  9889                           ;usb_device.c: 2786: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
  9890  05A2  0020               	movlb	0	; select bank0
  9891  05A3  086A               	movf	_pBDTEntryIn,w
  9892  05A4  0086               	movwf	6
  9893  05A5  3084               	movlw	132
  9894  05A6  0187               	clrf	7
  9895  05A7  0081               	movwf	1
  9896                           
  9897                           ;usb_device.c: 2787: }
  9898  05A8  0008               	return
  9899  05A9                     l5803:	
  9900                           
  9901                           ;usb_device.c: 2788: else
  9902                           ;usb_device.c: 2789: {
  9903                           ;usb_device.c: 2790: if(lastDTS == 0)
  9904  05A9  0020               	movlb	0	; select bank0
  9905  05AA  08DB               	movf	USBCtrlTrfInHandler@lastDTS,f
  9906  05AB  1D03               	skipz
  9907  05AC  2DB3               	goto	l5807
  9908                           
  9909                           ;usb_device.c: 2791: {
  9910                           ;usb_device.c: 2792: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  9911  05AD  086A               	movf	_pBDTEntryIn,w
  9912  05AE  0086               	movwf	6
  9913  05AF  30C8               	movlw	200
  9914  05B0  0187               	clrf	7
  9915  05B1  0081               	movwf	1
  9916                           
  9917                           ;usb_device.c: 2793: }
  9918  05B2  0008               	return
  9919  05B3                     l5807:	
  9920                           
  9921                           ;usb_device.c: 2794: else
  9922                           ;usb_device.c: 2795: {
  9923                           ;usb_device.c: 2796: pBDTEntryIn[0]->STAT.Val = 0x80|0x00|(0x08 & 0x08);
  9924  05B3  086A               	movf	_pBDTEntryIn,w
  9925  05B4  0086               	movwf	6
  9926  05B5  3088               	movlw	136
  9927  05B6  0187               	clrf	7
  9928  05B7  0081               	movwf	1
  9929  05B8  0008               	return
  9930  05B9                     l318:	
  9931                           
  9932                           ;usb_device.c: 2800: else
  9933                           ;usb_device.c: 2801: {
  9934                           ;usb_device.c: 2805: if(outPipes[0].info.bits.busy == 1)
  9935  05B9  0022               	movlb	2	; select bank2
  9936  05BA  1FA2               	btfss	(_outPipes^(0+256)+2),7
  9937  05BB  2DC3               	goto	l5815
  9938                           
  9939                           ;usb_device.c: 2806: {
  9940                           ;usb_device.c: 2807: if(outPipes[0].pFunc != (0))
  9941  05BC  0825               	movf	(_outPipes+5)^(0+256),w
  9942  05BD  1903               	btfsc	3,2
  9943  05BE  2DC2               	goto	l5813
  9944                           
  9945                           ;usb_device.c: 2808: {
  9946                           ;usb_device.c: 2809: outPipes[0].pFunc();
  9947  05BF  0825               	movf	(_outPipes+5)^(0+256),w
  9948  05C0  3183  2B16         	ljmp	$	;if you get stuck here, you called an invalid pointer
  9949  05C2                     l5813:	
  9950                           
  9951                           ;usb_device.c: 2810: }
  9952                           ;usb_device.c: 2811: outPipes[0].info.bits.busy = 0;
  9953  05C2  13A2               	bcf	(_outPipes^(0+256)+2),7
  9954  05C3                     l5815:	
  9955                           
  9956                           ;usb_device.c: 2812: }
  9957                           ;usb_device.c: 2814: controlTransferState = 0;
  9958  05C3  0020               	movlb	0	; select bank0
  9959  05C4  01ED               	clrf	_controlTransferState
  9960  05C5  0008               	return
  9961  05C6                     __end_of_USBCtrlTrfInHandler:	
  9962  05C6                     __ptext1924:	
  9963 ;; *************** function _USBCtrlEPServiceComplete *****************
  9964 ;; Defined at:
  9965 ;;		line 1786 in file "../USB/usb_device.c"
  9966 ;; Parameters:    Size  Location     Type
  9967 ;;		None
  9968 ;; Auto vars:     Size  Location     Type
  9969 ;;		None
  9970 ;; Return value:  Size  Location     Type
  9971 ;;		None               void
  9972 ;; Registers used:
  9973 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9974 ;; Tracked objects:
  9975 ;;		On entry : 1E/0
  9976 ;;		On exit  : 1D/0
  9977 ;;		Unchanged: FFFE0/0
  9978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9982 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9983 ;;Total ram usage:        2 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; Hardware stack levels required when called:    6
  9986 ;; This function calls:
  9987 ;;		_USBCtrlEPAllowDataStage
  9988 ;;		_USBCtrlEPAllowStatusStage
  9989 ;; This function is called by:
  9990 ;;		_USBCtrlTrfSetupHandler
  9991 ;; This function uses a non-reentrant model
  9992 ;;
  9993                           
  9994                           
  9995                           ;psect for function _USBCtrlEPServiceComplete
  9996  05C6                     _USBCtrlEPServiceComplete:	
  9997  05C6                     l5549:	
  9998                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-status,0+pclath+cstack]
  9999                           
 10000                           
 10001                           ;usb_device.c: 1791: UCONbits.PKTDIS = 0;
 10002  05C6  003D               	movlb	29	; select bank29
 10003  05C7  120E               	bcf	14,4	;volatile
 10004                           
 10005                           ;usb_device.c: 1797: if(inPipes[0].info.bits.busy == 0)
 10006  05C8  0022               	movlb	2	; select bank2
 10007  05C9  1BCC               	btfsc	(_inPipes^(0+256)+2),7
 10008  05CA  2DE4               	goto	l208
 10009                           
 10010                           ;usb_device.c: 1798: {
 10011                           ;usb_device.c: 1799: if(outPipes[0].info.bits.busy == 1)
 10012  05CB  1FA2               	btfss	(_outPipes^(0+256)+2),7
 10013  05CC  2DD9               	goto	l5563
 10014                           
 10015                           ;usb_device.c: 1800: {
 10016                           ;usb_device.c: 1801: controlTransferState = 2;
 10017  05CD  3002               	movlw	2
 10018  05CE  0020               	movlb	0	; select bank0
 10019  05CF  00ED               	movwf	_controlTransferState
 10020                           
 10021                           ;usb_device.c: 1812: if(USBDeferOUTDataStagePackets == FALSE)
 10022  05D0  0022               	movlb	2	; select bank2
 10023  05D1  08B6               	movf	_USBDeferOUTDataStagePackets^(0+256),f
 10024  05D2  1D03               	skipz
 10025  05D3  2DD5               	goto	l5559
 10026                           
 10027                           ;usb_device.c: 1813: {
 10028                           ;usb_device.c: 1814: USBCtrlEPAllowDataStage();
 10029  05D4  2601               	fcall	_USBCtrlEPAllowDataStage
 10030  05D5                     l5559:	
 10031                           
 10032                           ;usb_device.c: 1815: }
 10033                           ;usb_device.c: 1819: USBStatusStageEnabledFlag2 = FALSE;
 10034  05D5  0022               	movlb	2	; select bank2
 10035  05D6  01B9               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10036                           
 10037                           ;usb_device.c: 1820: USBStatusStageEnabledFlag1 = FALSE;
 10038  05D7  01B8               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10039                           
 10040                           ;usb_device.c: 1821: }
 10041  05D8  0008               	return
 10042  05D9                     l5563:	
 10043                           
 10044                           ;usb_device.c: 1822: else
 10045                           ;usb_device.c: 1823: {
 10046                           ;usb_device.c: 1828: pBDTEntryEP0OutNext->CNT = 8;
 10047  05D9  0020               	movlb	0	; select bank0
 10048  05DA  0A6F               	incf	_pBDTEntryEP0OutNext,w
 10049  05DB  0086               	movwf	6
 10050                           
 10051                           ;usb_device.c: 1829: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 10052                           
 10053                           ;usb_device.c: 1830: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
 10054  05DC  268D               	fcall	PL26	;call to abstracted procedure
 10055  05DD  308C               	movlw	140
 10056  05DE  0081               	movwf	1
 10057                           
 10058                           ;usb_device.c: 1831: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
 10059  05DF  086A               	movf	_pBDTEntryIn,w
 10060  05E0  0086               	movwf	6
 10061  05E1  3084               	movlw	132
 10062  05E2  0081               	movwf	1
 10063  05E3  0008               	return
 10064  05E4                     l208:	
 10065                           
 10066                           ;usb_device.c: 1834: else
 10067                           ;usb_device.c: 1835: {
 10068                           ;usb_device.c: 1836: if(SetupPkt.DataDir == (0x80>>7))
 10069  05E4  0020               	movlb	0	; select bank0
 10070  05E5  1FC0               	btfss	64,7	;volatile
 10071  05E6  2DF8               	goto	l5579
 10072                           
 10073                           ;usb_device.c: 1837: {
 10074                           ;usb_device.c: 1838: controlTransferState = 1;
 10075  05E7  01ED               	clrf	_controlTransferState
 10076  05E8  0AED               	incf	_controlTransferState,f
 10077                           
 10078                           ;usb_device.c: 1852: if(USBDeferINDataStagePackets == FALSE)
 10079  05E9  0022               	movlb	2	; select bank2
 10080  05EA  08B5               	movf	_USBDeferINDataStagePackets^(0+256),f
 10081  05EB  1D03               	skipz
 10082  05EC  2DEF               	goto	l5571
 10083                           
 10084                           ;usb_device.c: 1853: {
 10085                           ;usb_device.c: 1854: USBCtrlEPAllowDataStage();
 10086  05ED  2601  3183         	fcall	_USBCtrlEPAllowDataStage
 10087  05EF                     l5571:	
 10088                           
 10089                           ;usb_device.c: 1855: }
 10090                           ;usb_device.c: 1877: USBStatusStageEnabledFlag2 = FALSE;
 10091  05EF  0022               	movlb	2	; select bank2
 10092  05F0  01B9               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10093                           
 10094                           ;usb_device.c: 1878: USBStatusStageEnabledFlag1 = FALSE;
 10095  05F1  01B8               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10096                           
 10097                           ;usb_device.c: 1879: if(USBDeferStatusStagePacket == FALSE)
 10098  05F2  0020               	movlb	0	; select bank0
 10099  05F3  08EC               	movf	_USBDeferStatusStagePacket,f
 10100  05F4  1D03               	skipz
 10101  05F5  0008               	return
 10102                           
 10103                           ;usb_device.c: 1880: {
 10104                           ;usb_device.c: 1881: USBCtrlEPAllowStatusStage();
 10105  05F6  3187  2F96         	ljmp	l5357
 10106  05F8                     l5579:	
 10107                           
 10108                           ;usb_device.c: 1884: else
 10109                           ;usb_device.c: 1885: {
 10110                           ;usb_device.c: 1896: controlTransferState = 2;
 10111  05F8  3002               	movlw	2
 10112  05F9  00ED               	movwf	_controlTransferState
 10113                           
 10114                           ;usb_device.c: 1899: pBDTEntryEP0OutNext->CNT = 8;
 10115  05FA  0A6F               	incf	_pBDTEntryEP0OutNext,w
 10116  05FB  0086               	movwf	6
 10117                           
 10118                           ;usb_device.c: 1900: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 10119                           
 10120                           ;usb_device.c: 1901: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
 10121  05FC  268D  3183         	fcall	PL26	;call to abstracted procedure
 10122  05FE  3084               	movlw	132
 10123  05FF  0081               	movwf	1
 10124  0600  2DEF               	goto	l5571
 10125  0601                     __end_of_USBCtrlEPServiceComplete:	
 10126                           ;usb_device.c: 1906: if(USBDeferStatusStagePacket == FALSE)
 10127                           
 10128                           ;usb_device.c: 1905: USBStatusStageEnabledFlag1 = FALSE;
 10129                           
 10130                           ;usb_device.c: 1904: USBStatusStageEnabledFlag2 = FALSE;
 10131                           
 10132  0601                     __ptext1925:	
 10133 ;; *************** function _USBCtrlEPAllowDataStage *****************
 10134 ;; Defined at:
 10135 ;;		line 1660 in file "../USB/usb_device.c"
 10136 ;; Parameters:    Size  Location     Type
 10137 ;;		None
 10138 ;; Auto vars:     Size  Location     Type
 10139 ;;		None
 10140 ;; Return value:  Size  Location     Type
 10141 ;;		None               void
 10142 ;; Registers used:
 10143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10144 ;; Tracked objects:
 10145 ;;		On entry : 1F/2
 10146 ;;		On exit  : 1F/0
 10147 ;;		Unchanged: FFFE0/0
 10148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10151 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;Total ram usage:        2 bytes
 10154 ;; Hardware stack levels used:    1
 10155 ;; Hardware stack levels required when called:    5
 10156 ;; This function calls:
 10157 ;;		_USBCtrlTrfTxService
 10158 ;; This function is called by:
 10159 ;;		_USBCtrlEPServiceComplete
 10160 ;; This function uses a non-reentrant model
 10161 ;;
 10162                           
 10163                           
 10164                           ;psect for function _USBCtrlEPAllowDataStage
 10165  0601                     _USBCtrlEPAllowDataStage:	
 10166                           
 10167                           ;usb_device.c: 1661: USBDeferINDataStagePackets = FALSE;
 10168                           
 10169                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-status,0+pclath+cstack]
 10170  0601  01B5               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 10171                           
 10172                           ;usb_device.c: 1662: USBDeferOUTDataStagePackets = FALSE;
 10173  0602  01B6               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 10174                           
 10175                           ;usb_device.c: 1664: if(controlTransferState == 2)
 10176  0603  0020               	movlb	0	; select bank0
 10177  0604  086D               	movf	_controlTransferState,w
 10178  0605  3A02               	xorlw	2
 10179  0606  1D03               	skipz
 10180  0607  2E1A               	goto	l5497
 10181                           
 10182                           ;usb_device.c: 1665: {
 10183                           ;usb_device.c: 1667: pBDTEntryEP0OutNext->CNT = 8;
 10184  0608  0A6F               	incf	_pBDTEntryEP0OutNext,w
 10185  0609  0086               	movwf	6
 10186  060A  3008               	movlw	8
 10187  060B  0187               	clrf	7
 10188  060C  0081               	movwf	1
 10189                           
 10190                           ;usb_device.c: 1668: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 10191  060D  3048               	movlw	72
 10192  060E  00D9               	movwf	??_USBCtrlEPAllowDataStage
 10193  060F  01DA               	clrf	??_USBCtrlEPAllowDataStage+1
 10194  0610  086F               	movf	_pBDTEntryEP0OutNext,w
 10195  0611  3E02               	addlw	2
 10196  0612  0086               	movwf	6
 10197  0613  0859               	movf	??_USBCtrlEPAllowDataStage,w
 10198  0614  3FC0               	movwi [0]fsr1
 10199  0615  085A               	movf	??_USBCtrlEPAllowDataStage+1,w
 10200  0616  3FC1               	movwi [1]fsr1
 10201                           
 10202                           ;usb_device.c: 1669: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 10203  0617  086F               	movf	_pBDTEntryEP0OutNext,w
 10204                           
 10205                           ;usb_device.c: 1670: }
 10206  0618  3187  2FE8         	ljmp	PL66	;call to abstracted procedure
 10207  061A                     l5497:	
 10208                           
 10209                           ;usb_device.c: 1671: else
 10210                           ;usb_device.c: 1672: {
 10211                           ;usb_device.c: 1675: if(SetupPkt.wLength < inPipes[0].wCount.Val)
 10212  061A  0022               	movlb	2	; select bank2
 10213  061B  084E               	movf	((_inPipes+1)^(0+256)+3),w
 10214  061C  0020               	movlb	0	; select bank0
 10215  061D  0247               	subwf	71,w	;volatile
 10216  061E  1D03               	skipz
 10217  061F  2E24               	goto	u4205
 10218  0620  0022               	movlb	2	; select bank2
 10219  0621  084D               	movf	(_inPipes^(0+256)+3),w
 10220  0622  0020               	movlb	0	; select bank0
 10221  0623  0246               	subwf	70,w	;volatile
 10222  0624                     u4205:	
 10223  0624  1803               	skipnc
 10224  0625  2E2D               	goto	l5501
 10225                           
 10226                           ;usb_device.c: 1676: {
 10227                           ;usb_device.c: 1677: inPipes[0].wCount.Val = SetupPkt.wLength;
 10228  0626  0847               	movf	71,w	;volatile
 10229  0627  0022               	movlb	2	; select bank2
 10230  0628  00CE               	movwf	((_inPipes+1)^(0+256)+3)
 10231  0629  0020               	movlb	0	; select bank0
 10232  062A  0846               	movf	70,w	;volatile
 10233  062B  0022               	movlb	2	; select bank2
 10234  062C  00CD               	movwf	(_inPipes^(0+256)+3)
 10235  062D                     l5501:	
 10236                           
 10237                           ;usb_device.c: 1678: }
 10238                           ;usb_device.c: 1679: USBCtrlTrfTxService();
 10239  062D  263D  3183         	fcall	_USBCtrlTrfTxService
 10240                           
 10241                           ;usb_device.c: 1684: pBDTEntryIn[0]->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 10242  062F  3048               	movlw	72
 10243  0630  00D9               	movwf	??_USBCtrlEPAllowDataStage
 10244  0631  01DA               	clrf	??_USBCtrlEPAllowDataStage+1
 10245  0632  086A               	movf	_pBDTEntryIn,w
 10246  0633  3E02               	addlw	2
 10247  0634  0086               	movwf	6
 10248  0635  0187               	clrf	7
 10249  0636  0859               	movf	??_USBCtrlEPAllowDataStage,w
 10250  0637  3FC0               	movwi [0]fsr1
 10251  0638  085A               	movf	??_USBCtrlEPAllowDataStage+1,w
 10252  0639  3FC1               	movwi [1]fsr1
 10253                           
 10254                           ;usb_device.c: 1685: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 10255  063A  086A               	movf	_pBDTEntryIn,w
 10256  063B  3187  2FE8         	ljmp	PL66	;call to abstracted procedure
 10257  063D                     __end_of_USBCtrlEPAllowDataStage:	
 10258  063D                     __ptext1930:	
 10259 ;; *************** function _USBCtrlTrfTxService *****************
 10260 ;; Defined at:
 10261 ;;		line 1938 in file "../USB/usb_device.c"
 10262 ;; Parameters:    Size  Location     Type
 10263 ;;		None
 10264 ;; Auto vars:     Size  Location     Type
 10265 ;;  byteToSend      1    8[BANK0 ] unsigned char 
 10266 ;; Return value:  Size  Location     Type
 10267 ;;		None               void
 10268 ;; Registers used:
 10269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 10270 ;; Tracked objects:
 10271 ;;		On entry : 1D/0
 10272 ;;		On exit  : 1F/0
 10273 ;;		Unchanged: FFFE0/0
 10274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10276 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10277 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10279 ;;Total ram usage:        3 bytes
 10280 ;; Hardware stack levels used:    1
 10281 ;; Hardware stack levels required when called:    4
 10282 ;; This function calls:
 10283 ;;		Nothing
 10284 ;; This function is called by:
 10285 ;;		_USBCtrlEPAllowDataStage
 10286 ;;		_USBCtrlTrfInHandler
 10287 ;; This function uses a non-reentrant model
 10288 ;;
 10289                           
 10290                           
 10291                           ;psect for function _USBCtrlTrfTxService
 10292  063D                     _USBCtrlTrfTxService:	
 10293                           
 10294                           ;usb_device.c: 1939: BYTE byteToSend;
 10295                           ;usb_device.c: 1943: byteToSend = 8;
 10296                           
 10297                           ; Regs used in _USBCtrlTrfTxService: [wreg-status,0+pclath]
 10298  063D  3008               	movlw	8
 10299  063E  0020               	movlb	0	; select bank0
 10300  063F  00D8               	movwf	USBCtrlTrfTxService@byteToSend
 10301                           
 10302                           ;usb_device.c: 1944: if(inPipes[0].wCount.Val < (BYTE)8)
 10303  0640  3000               	movlw	0
 10304  0641  0022               	movlb	2	; select bank2
 10305  0642  024E               	subwf	((_inPipes+1)^(0+256)+3),w
 10306  0643  3008               	movlw	8
 10307  0644  1903               	skipnz
 10308  0645  024D               	subwf	(_inPipes^(0+256)+3),w
 10309  0646  1803               	skipnc
 10310  0647  2E56               	goto	l5519
 10311                           
 10312                           ;usb_device.c: 1945: {
 10313                           ;usb_device.c: 1946: byteToSend = inPipes[0].wCount.Val;
 10314  0648  084D               	movf	(_inPipes^(0+256)+3),w
 10315  0649  0020               	movlb	0	; select bank0
 10316  064A  00D8               	movwf	USBCtrlTrfTxService@byteToSend
 10317                           
 10318                           ;usb_device.c: 1953: if(shortPacketStatus == 0)
 10319  064B  0022               	movlb	2	; select bank2
 10320  064C  08C1               	movf	_shortPacketStatus^(0+256),f
 10321  064D  1D03               	skipz
 10322  064E  2E52               	goto	l5515
 10323                           
 10324                           ;usb_device.c: 1954: {
 10325                           ;usb_device.c: 1955: shortPacketStatus = 1;
 10326  064F  01C1               	clrf	_shortPacketStatus^(0+256)
 10327  0650  0AC1               	incf	_shortPacketStatus^(0+256),f
 10328                           
 10329                           ;usb_device.c: 1956: }
 10330  0651  2E56               	goto	l5519
 10331  0652                     l5515:	
 10332                           
 10333                           ;usb_device.c: 1957: else if(shortPacketStatus == 1)
 10334  0652  0B41               	decfsz	_shortPacketStatus^(0+256),w
 10335  0653  2E56               	goto	l5519
 10336                           
 10337                           ;usb_device.c: 1958: {
 10338                           ;usb_device.c: 1959: shortPacketStatus = 2;
 10339  0654  3002               	movlw	2
 10340  0655  00C1               	movwf	_shortPacketStatus^(0+256)
 10341  0656                     l5519:	
 10342                           
 10343                           ;usb_device.c: 1960: }
 10344                           ;usb_device.c: 1961: }
 10345                           ;usb_device.c: 1965: inPipes[0].wCount.Val = inPipes[0].wCount.Val - byteToSend;
 10346  0656  0020               	movlb	0	; select bank0
 10347  0657  0858               	movf	USBCtrlTrfTxService@byteToSend,w
 10348  0658  00D6               	movwf	??_USBCtrlTrfTxService
 10349  0659  01D7               	clrf	??_USBCtrlTrfTxService+1
 10350  065A  0022               	movlb	2	; select bank2
 10351  065B  024D               	subwf	(_inPipes^(0+256)+3),w
 10352  065C  00CD               	movwf	(_inPipes^(0+256)+3)
 10353  065D  0020               	movlb	0	; select bank0
 10354  065E  0857               	movf	??_USBCtrlTrfTxService+1,w
 10355  065F  0022               	movlb	2	; select bank2
 10356  0660  3B4E               	subwfb	((_inPipes+1)^(0+256)+3),w
 10357  0661  00CE               	movwf	((_inPipes+1)^(0+256)+3)
 10358                           
 10359                           ;usb_device.c: 1970: pBDTEntryIn[0]->CNT = byteToSend;
 10360  0662  0020               	movlb	0	; select bank0
 10361  0663  0A6A               	incf	_pBDTEntryIn,w
 10362  0664  0086               	movwf	6
 10363  0665  0187               	clrf	7
 10364  0666  0858               	movf	USBCtrlTrfTxService@byteToSend,w
 10365  0667  0081               	movwf	1
 10366                           
 10367                           ;usb_device.c: 1974: pDst = ( BYTE*)CtrlTrfData;
 10368  0668  3048               	movlw	72
 10369  0669  0022               	movlb	2	; select bank2
 10370  066A  00BF               	movwf	_pDst^(0+256)
 10371                           
 10372                           ;usb_device.c: 1975: if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 10373  066B  1C4C               	btfss	(_inPipes^(0+256)+2),0
 10374  066C  2E70               	goto	l5537
 10375  066D  2E77               	goto	l5547
 10376  066E                     l5529:	
 10377                           
 10378                           ;usb_device.c: 1978: {
 10379                           ;usb_device.c: 1979: *pDst++ = *inPipes[0].pSrc.bRom++;
 10380                           
 10381                           ;usb_device.c: 1980: byteToSend--;
 10382  066E  267C  3183         	fcall	PL24	;call to abstracted procedure
 10383  0670                     l5537:	
 10384  0670  0020               	movlb	0	; select bank0
 10385  0671  08D8               	movf	USBCtrlTrfTxService@byteToSend,f
 10386  0672  1903               	btfsc	3,2
 10387  0673  0008               	return
 10388  0674  2E6E               	goto	l5529
 10389  0675                     l5539:	
 10390                           
 10391                           ;usb_device.c: 1986: {
 10392                           ;usb_device.c: 1987: *pDst++ = *inPipes[0].pSrc.bRam++;
 10393                           
 10394                           ;usb_device.c: 1988: byteToSend--;
 10395  0675  267C  3183         	fcall	PL24	;call to abstracted procedure
 10396  0677                     l5547:	
 10397  0677  0020               	movlb	0	; select bank0
 10398  0678  08D8               	movf	USBCtrlTrfTxService@byteToSend,f
 10399  0679  1903               	btfsc	3,2
 10400  067A  0008               	return
 10401  067B  2E75               	goto	l5539
 10402  067C                     __end_of_USBCtrlTrfTxService:	
 10403  067C                     PL24:	
 10404  067C  0022               	movlb	2	; select bank2
 10405  067D  083F               	movf	_pDst^(0+256),w
 10406  067E  0086               	movwf	6
 10407  067F  0187               	clrf	7
 10408  0680  084A               	movf	_inPipes^(0+256),w
 10409  0681  0084               	movwf	4
 10410  0682  084B               	movf	(_inPipes+1)^(0+256),w
 10411  0683  0085               	movwf	5
 10412  0684  0800               	movf	0,w	;code access
 10413  0685  0081               	movwf	1
 10414  0686  0ACA               	incf	_inPipes^(0+256),f
 10415  0687  1903               	skipnz
 10416  0688  0ACB               	incf	(_inPipes+1)^(0+256),f
 10417  0689  0ABF               	incf	_pDst^(0+256),f
 10418  068A  0020               	movlb	0	; select bank0
 10419  068B  03D8               	decf	USBCtrlTrfTxService@byteToSend,f
 10420  068C  0008               	return
 10421  068D                     __end_ofPL24:	
 10422  068D                     PL26:	
 10423  068D  3008               	movlw	8
 10424  068E  0187               	clrf	7
 10425  068F  0081               	movwf	1
 10426  0690  3040               	movlw	64
 10427  0691  00DB               	movwf	??_USBCtrlEPServiceComplete
 10428  0692  01DC               	clrf	??_USBCtrlEPServiceComplete+1
 10429  0693  086F               	movf	_pBDTEntryEP0OutNext,w
 10430  0694  3E02               	addlw	2
 10431  0695  0086               	movwf	6
 10432  0696  085B               	movf	??_USBCtrlEPServiceComplete,w
 10433  0697  3FC0               	movwi [0]fsr1
 10434  0698  085C               	movf	??_USBCtrlEPServiceComplete+1,w
 10435  0699  3FC1               	movwi [1]fsr1
 10436  069A  086F               	movf	_pBDTEntryEP0OutNext,w
 10437  069B  0086               	movwf	6
 10438  069C  0008               	return
 10439  069D                     __end_ofPL26:	
 10440  069D                     PL40:	
 10441  069D  0085               	movwf	5
 10442  069E  0842               	movf	66,w	;volatile
 10443  069F  0784               	addwf	4,f
 10444  06A0  1803               	skipnc
 10445  06A1  0A85               	incf	5,f
 10446  06A2  3F00               	moviw [0]fsr0
 10447  06A3  0022               	movlb	2	; select bank2
 10448  06A4  00CA               	movwf	_inPipes^(0+256)
 10449  06A5  3090               	movlw	(high __stringtab)| (0+128)
 10450  06A6  00CB               	movwf	(_inPipes+1)^(0+256)
 10451  06A7  0008               	return
 10452  06A8                     __end_ofPL40:	
 10453  06A8                     PL50:	
 10454  06A8  0084               	movwf	4
 10455  06A9  0857               	movf	??_USBStdGetDscHandler+1,w
 10456  06AA  1803               	skipnc
 10457  06AB  0A57               	incf	??_USBStdGetDscHandler+1,w
 10458  06AC  0085               	movwf	5
 10459  06AD  0800               	movf	0,w	;code access
 10460  06AE  0022               	movlb	2	; select bank2
 10461  06AF  0008               	return
 10462  06B0                     __end_ofPL50:	
 10463  06B0                     PL58:	
 10464  06B0  0020               	movlb	0	; select bank0
 10465  06B1  00D7               	movwf	??_USBStdGetDscHandler+1
 10466  06B2  0022               	movlb	2	; select bank2
 10467  06B3  084A               	movf	_inPipes^(0+256),w
 10468  06B4  0020               	movlb	0	; select bank0
 10469  06B5  00D6               	movwf	??_USBStdGetDscHandler
 10470  06B6  0008               	return
 10471  06B7                     __end_ofPL58:	
 10472                           
 10473                           	psect	swtext1
 10474  10BD                     __pswtext1:	
 10475  10BD                     S6625:	
 10476  10BD  3183  2B5C         	ljmp	l5835
 10477  10BF  3183  2B5D         	ljmp	l5837
 10478  10C1  3183  2B81         	ljmp	l330
 10479  10C3  3183  2B5D         	ljmp	l5837
 10480  10C5  3183  2B81         	ljmp	l330
 10481  10C7  3183  2B4A         	ljmp	l332
 10482  10C9  3183  2B50         	ljmp	l5823
 10483  10CB  3183  2B6C         	ljmp	l5849
 10484  10CD  3183  2B52         	ljmp	l5827
 10485  10CF  3183  2B51         	ljmp	l5825
 10486  10D1  3183  2B5E         	ljmp	l5839
 10487  10D3  3183  2B61         	ljmp	l341
 10488  10D5  3183  2B81         	ljmp	l330
 10489                           
 10490                           	psect	text1944
 10491  07FE                     __ptext1944:	
 10492 ;; *************** function _USBCBSuspend *****************
 10493 ;; Defined at:
 10494 ;;		line 264 in file "main.c"
 10495 ;; Parameters:    Size  Location     Type
 10496 ;;		None
 10497 ;; Auto vars:     Size  Location     Type
 10498 ;;		None
 10499 ;; Return value:  Size  Location     Type
 10500 ;;		None               void
 10501 ;; Registers used:
 10502 ;;		None
 10503 ;; Tracked objects:
 10504 ;;		On entry : 1F/0
 10505 ;;		On exit  : 1F/0
 10506 ;;		Unchanged: FFFFFFE0/0
 10507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10512 ;;Total ram usage:        0 bytes
 10513 ;; Hardware stack levels used:    1
 10514 ;; Hardware stack levels required when called:    4
 10515 ;; This function calls:
 10516 ;;		Nothing
 10517 ;; This function is called by:
 10518 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10519 ;; This function uses a non-reentrant model
 10520 ;;
 10521                           
 10522                           
 10523                           ;psect for function _USBCBSuspend
 10524  07FE                     _USBCBSuspend:	
 10525                           
 10526                           ; Regs used in _USBCBSuspend: []
 10527  07FE  0008               	return
 10528  07FF                     __end_of_USBCBSuspend:	
 10529                           
 10530                           	psect	text1945
 10531  07FF                     __ptext1945:	
 10532 ;; *************** function _USBCBWakeFromSuspend *****************
 10533 ;; Defined at:
 10534 ;;		line 305 in file "main.c"
 10535 ;; Parameters:    Size  Location     Type
 10536 ;;		None
 10537 ;; Auto vars:     Size  Location     Type
 10538 ;;		None
 10539 ;; Return value:  Size  Location     Type
 10540 ;;		None               void
 10541 ;; Registers used:
 10542 ;;		None
 10543 ;; Tracked objects:
 10544 ;;		On entry : 1F/0
 10545 ;;		On exit  : 1F/0
 10546 ;;		Unchanged: FFFFFFE0/0
 10547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;Total ram usage:        0 bytes
 10553 ;; Hardware stack levels used:    1
 10554 ;; Hardware stack levels required when called:    4
 10555 ;; This function calls:
 10556 ;;		Nothing
 10557 ;; This function is called by:
 10558 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10559 ;; This function uses a non-reentrant model
 10560 ;;
 10561                           
 10562                           
 10563                           ;psect for function _USBCBWakeFromSuspend
 10564  07FF                     _USBCBWakeFromSuspend:	
 10565                           
 10566                           ; Regs used in _USBCBWakeFromSuspend: []
 10567  07FF  0008               	return
 10568  0800                     __end_of_USBCBWakeFromSuspend:	
 10569                           
 10570                           	psect	text1946
 10571  0003                     __ptext1946:	
 10572 ;; *************** function _USBCB_SOF_Handler *****************
 10573 ;; Defined at:
 10574 ;;		line 335 in file "main.c"
 10575 ;; Parameters:    Size  Location     Type
 10576 ;;		None
 10577 ;; Auto vars:     Size  Location     Type
 10578 ;;		None
 10579 ;; Return value:  Size  Location     Type
 10580 ;;		None               void
 10581 ;; Registers used:
 10582 ;;		None
 10583 ;; Tracked objects:
 10584 ;;		On entry : 1F/0
 10585 ;;		On exit  : 1F/0
 10586 ;;		Unchanged: FFFFFFE0/0
 10587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10592 ;;Total ram usage:        0 bytes
 10593 ;; Hardware stack levels used:    1
 10594 ;; Hardware stack levels required when called:    4
 10595 ;; This function calls:
 10596 ;;		Nothing
 10597 ;; This function is called by:
 10598 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10599 ;; This function uses a non-reentrant model
 10600 ;;
 10601                           
 10602                           
 10603                           ;psect for function _USBCB_SOF_Handler
 10604  0003                     _USBCB_SOF_Handler:	
 10605                           
 10606                           ; Regs used in _USBCB_SOF_Handler: []
 10607  0003  0008               	return
 10608  0004                     __end_of_USBCB_SOF_Handler:	
 10609                           
 10610                           	psect	text1947
 10611  0002                     __ptext1947:	
 10612 ;; *************** function _USBCBErrorHandler *****************
 10613 ;; Defined at:
 10614 ;;		line 358 in file "main.c"
 10615 ;; Parameters:    Size  Location     Type
 10616 ;;		None
 10617 ;; Auto vars:     Size  Location     Type
 10618 ;;		None
 10619 ;; Return value:  Size  Location     Type
 10620 ;;		None               void
 10621 ;; Registers used:
 10622 ;;		None
 10623 ;; Tracked objects:
 10624 ;;		On entry : 1F/0
 10625 ;;		On exit  : 1F/0
 10626 ;;		Unchanged: FFFFFFE0/0
 10627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;Total ram usage:        0 bytes
 10633 ;; Hardware stack levels used:    1
 10634 ;; Hardware stack levels required when called:    4
 10635 ;; This function calls:
 10636 ;;		Nothing
 10637 ;; This function is called by:
 10638 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           
 10643                           ;psect for function _USBCBErrorHandler
 10644  0002                     _USBCBErrorHandler:	
 10645                           
 10646                           ; Regs used in _USBCBErrorHandler: []
 10647  0002  0008               	return
 10648  0003                     __end_of_USBCBErrorHandler:	
 10649                           
 10650                           	psect	text1948
 10651  07FC                     __ptext1948:	
 10652 ;; *************** function _USBCBCheckOtherReq *****************
 10653 ;; Defined at:
 10654 ;;		line 409 in file "main.c"
 10655 ;; Parameters:    Size  Location     Type
 10656 ;;		None
 10657 ;; Auto vars:     Size  Location     Type
 10658 ;;		None
 10659 ;; Return value:  Size  Location     Type
 10660 ;;		None               void
 10661 ;; Registers used:
 10662 ;;		status,2, status,0, pclath, cstack
 10663 ;; Tracked objects:
 10664 ;;		On entry : 1F/0
 10665 ;;		On exit  : 1F/0
 10666 ;;		Unchanged: FFFFFFE0/0
 10667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10672 ;;Total ram usage:        0 bytes
 10673 ;; Hardware stack levels used:    1
 10674 ;; Hardware stack levels required when called:    5
 10675 ;; This function calls:
 10676 ;;		_USBCheckVendorRequest
 10677 ;; This function is called by:
 10678 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10679 ;; This function uses a non-reentrant model
 10680 ;;
 10681                           
 10682                           
 10683                           ;psect for function _USBCBCheckOtherReq
 10684  07FC                     _USBCBCheckOtherReq:	
 10685                           
 10686                           ;main.c: 410: USBCheckVendorRequest();
 10687                           
 10688                           ; Regs used in _USBCBCheckOtherReq: [status,2+status,0+pclath+cstack]
 10689  07FC  2FFD               	ljmp	l373
 10690  07FD                     __end_of_USBCBCheckOtherReq:	
 10691  07FD                     __ptext1949:	
 10692 ;; *************** function _USBCheckVendorRequest *****************
 10693 ;; Defined at:
 10694 ;;		line 248 in file "../USB/usb_function_generic.c"
 10695 ;; Parameters:    Size  Location     Type
 10696 ;;		None
 10697 ;; Auto vars:     Size  Location     Type
 10698 ;;		None
 10699 ;; Return value:  Size  Location     Type
 10700 ;;		None               void
 10701 ;; Registers used:
 10702 ;;		None
 10703 ;; Tracked objects:
 10704 ;;		On entry : 1F/0
 10705 ;;		On exit  : 1F/0
 10706 ;;		Unchanged: FFFFFFE0/0
 10707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;Total ram usage:        0 bytes
 10713 ;; Hardware stack levels used:    1
 10714 ;; Hardware stack levels required when called:    4
 10715 ;; This function calls:
 10716 ;;		Nothing
 10717 ;; This function is called by:
 10718 ;;		_USBCBCheckOtherReq
 10719 ;; This function uses a non-reentrant model
 10720 ;;
 10721                           
 10722                           
 10723                           ;psect for function _USBCheckVendorRequest
 10724  07FD                     _USBCheckVendorRequest:	
 10725  07FD                     l373:	
 10726                           ; Regs used in _USBCheckVendorRequest: []
 10727                           
 10728  07FD  0008               	return
 10729  07FE                     __end_of_USBCheckVendorRequest:	
 10730                           
 10731                           	psect	text1950
 10732  0802                     __ptext1950:	
 10733 ;; *************** function _USBCBStdSetDscHandler *****************
 10734 ;; Defined at:
 10735 ;;		line 434 in file "main.c"
 10736 ;; Parameters:    Size  Location     Type
 10737 ;;		None
 10738 ;; Auto vars:     Size  Location     Type
 10739 ;;		None
 10740 ;; Return value:  Size  Location     Type
 10741 ;;		None               void
 10742 ;; Registers used:
 10743 ;;		None
 10744 ;; Tracked objects:
 10745 ;;		On entry : 1F/0
 10746 ;;		On exit  : 1F/0
 10747 ;;		Unchanged: FFFFFFE0/0
 10748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;Total ram usage:        0 bytes
 10754 ;; Hardware stack levels used:    1
 10755 ;; Hardware stack levels required when called:    4
 10756 ;; This function calls:
 10757 ;;		Nothing
 10758 ;; This function is called by:
 10759 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10760 ;; This function uses a non-reentrant model
 10761 ;;
 10762                           
 10763                           
 10764                           ;psect for function _USBCBStdSetDscHandler
 10765  0802                     _USBCBStdSetDscHandler:	
 10766                           
 10767                           ; Regs used in _USBCBStdSetDscHandler: []
 10768  0802  0008               	return
 10769  0803                     __end_of_USBCBStdSetDscHandler:	
 10770                           
 10771                           	psect	text1951
 10772  1668                     __ptext1951:	
 10773 ;; *************** function _USBCBInitEP *****************
 10774 ;; Defined at:
 10775 ;;		line 460 in file "main.c"
 10776 ;; Parameters:    Size  Location     Type
 10777 ;;		None
 10778 ;; Auto vars:     Size  Location     Type
 10779 ;;		None
 10780 ;; Return value:  Size  Location     Type
 10781 ;;		None               void
 10782 ;; Registers used:
 10783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10784 ;; Tracked objects:
 10785 ;;		On entry : 1F/0
 10786 ;;		On exit  : 1F/1
 10787 ;;		Unchanged: FFFE0/0
 10788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;Total ram usage:        0 bytes
 10794 ;; Hardware stack levels used:    1
 10795 ;; Hardware stack levels required when called:    6
 10796 ;; This function calls:
 10797 ;;		_USBEnableEndpoint
 10798 ;;		_USBTransferOnePacket
 10799 ;; This function is called by:
 10800 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10801 ;; This function uses a non-reentrant model
 10802 ;;
 10803                           
 10804                           
 10805                           ;psect for function _USBCBInitEP
 10806  1668                     _USBCBInitEP:	
 10807                           
 10808                           ;main.c: 462: USBEnableEndpoint(1,0x04|0x02|0x10|0x08);
 10809                           
 10810                           ; Regs used in _USBCBInitEP: [wreg+fsr1l-status,0+pclath+cstack]
 10811  1668  301E               	movlw	30
 10812  1669  00DA               	movwf	?_USBEnableEndpoint
 10813  166A  3001               	movlw	1
 10814  166B  2677               	fcall	_USBEnableEndpoint
 10815  166C  30A0               	movlw	160
 10816                           
 10817                           ;main.c: 464: USBGenericOutHandle = USBTransferOnePacket(1,0,(BYTE*)&OUTPacket,64);
 10818  166D  01D9               	clrf	?_USBTransferOnePacket
 10819  166E  00DA               	movwf	?_USBTransferOnePacket+1
 10820  166F  3040               	movlw	64
 10821  1670  00DB               	movwf	?_USBTransferOnePacket+2
 10822  1671  3001               	movlw	1
 10823  1672  3182  22CD         	fcall	_USBTransferOnePacket
 10824  1674  0021               	movlb	1	; select bank1
 10825  1675  00EC               	movwf	_USBGenericOutHandle^(0+128)
 10826  1676  0008               	return
 10827  1677                     __end_of_USBCBInitEP:	
 10828  1677                     __ptext1952:	
 10829 ;; *************** function _USBEnableEndpoint *****************
 10830 ;; Defined at:
 10831 ;;		line 1056 in file "../USB/usb_device.c"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;  ep              1    wreg     unsigned char 
 10834 ;;  options         1   10[BANK0 ] unsigned char 
 10835 ;; Auto vars:     Size  Location     Type
 10836 ;;  ep              1   15[BANK0 ] unsigned char 
 10837 ;;  p               2   13[BANK0 ] PTR unsigned char 
 10838 ;;		 -> UEP0(1), 
 10839 ;; Return value:  Size  Location     Type
 10840 ;;		None               void
 10841 ;; Registers used:
 10842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10843 ;; Tracked objects:
 10844 ;;		On entry : 1F/0
 10845 ;;		On exit  : 1F/0
 10846 ;;		Unchanged: FFFE0/0
 10847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10848 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;Total ram usage:        6 bytes
 10853 ;; Hardware stack levels used:    1
 10854 ;; Hardware stack levels required when called:    5
 10855 ;; This function calls:
 10856 ;;		_USBConfigureEndpoint
 10857 ;; This function is called by:
 10858 ;;		_USBCBInitEP
 10859 ;; This function uses a non-reentrant model
 10860 ;;
 10861                           
 10862                           
 10863                           ;psect for function _USBEnableEndpoint
 10864  1677                     _USBEnableEndpoint:	
 10865                           
 10866                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l-status,0+pclath+cstack]
 10867                           ;USBEnableEndpoint@ep stored from wreg
 10868  1677  00DF               	movwf	USBEnableEndpoint@ep
 10869                           
 10870                           ;usb_device.c: 1057: unsigned char* p;
 10871                           ;usb_device.c: 1061: if(options & 0x04)
 10872  1678  1D5A               	btfss	USBEnableEndpoint@options,2
 10873  1679  2E7D               	goto	l5439
 10874                           
 10875                           ;usb_device.c: 1062: {
 10876                           ;usb_device.c: 1063: USBConfigureEndpoint(ep, 0);
 10877  167A  01D6               	clrf	?_USBConfigureEndpoint
 10878  167B  2696  3196         	fcall	_USBConfigureEndpoint
 10879  167D                     l5439:	
 10880                           
 10881                           ;usb_device.c: 1064: }
 10882                           ;usb_device.c: 1065: if(options & 0x02)
 10883  167D  1CDA               	btfss	USBEnableEndpoint@options,1
 10884  167E  2E83               	goto	l5443
 10885                           
 10886                           ;usb_device.c: 1066: {
 10887                           ;usb_device.c: 1067: USBConfigureEndpoint(ep, 1);
 10888  167F  01D6               	clrf	?_USBConfigureEndpoint
 10889  1680  0AD6               	incf	?_USBConfigureEndpoint,f
 10890  1681  085F               	movf	USBEnableEndpoint@ep,w
 10891  1682  2696               	fcall	_USBConfigureEndpoint
 10892  1683                     l5443:	
 10893                           
 10894                           ;usb_device.c: 1068: }
 10895                           ;usb_device.c: 1076: p = (unsigned char*)(&UEP0+ep);
 10896  1683  085F               	movf	USBEnableEndpoint@ep,w
 10897  1684  3E98               	addlw	152
 10898  1685  00DB               	movwf	??_USBEnableEndpoint
 10899  1686  300E               	movlw	14
 10900  1687  01DC               	clrf	??_USBEnableEndpoint+1
 10901  1688  3DDC               	addwfc	??_USBEnableEndpoint+1,f
 10902  1689  085B               	movf	??_USBEnableEndpoint,w
 10903  168A  00DD               	movwf	USBEnableEndpoint@p
 10904  168B  085C               	movf	??_USBEnableEndpoint+1,w
 10905  168C  00DE               	movwf	USBEnableEndpoint@p+1
 10906                           
 10907                           ;usb_device.c: 1078: *p = options;
 10908  168D  085A               	movf	USBEnableEndpoint@options,w
 10909  168E  00DB               	movwf	??_USBEnableEndpoint
 10910  168F  085D               	movf	USBEnableEndpoint@p,w
 10911  1690  0086               	movwf	6
 10912  1691  085E               	movf	USBEnableEndpoint@p+1,w
 10913  1692  0087               	movwf	7
 10914  1693  085B               	movf	??_USBEnableEndpoint,w
 10915  1694  0081               	movwf	1
 10916  1695  0008               	return
 10917  1696                     __end_of_USBEnableEndpoint:	
 10918  1696                     __ptext1953:	
 10919 ;; *************** function _USBConfigureEndpoint *****************
 10920 ;; Defined at:
 10921 ;;		line 1713 in file "../USB/usb_device.c"
 10922 ;; Parameters:    Size  Location     Type
 10923 ;;  EPNum           1    wreg     unsigned char 
 10924 ;;  direction       1    6[BANK0 ] unsigned char 
 10925 ;; Auto vars:     Size  Location     Type
 10926 ;;  EPNum           1    8[BANK0 ] unsigned char 
 10927 ;;  handle          1    9[BANK0 ] PTR volatile struct __BD
 10928 ;;		 -> BDT(32), 
 10929 ;; Return value:  Size  Location     Type
 10930 ;;		None               void
 10931 ;; Registers used:
 10932 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10933 ;; Tracked objects:
 10934 ;;		On entry : 1F/0
 10935 ;;		On exit  : 1F/0
 10936 ;;		Unchanged: FFFE0/0
 10937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10938 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10939 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10940 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10941 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10942 ;;Total ram usage:        4 bytes
 10943 ;; Hardware stack levels used:    1
 10944 ;; Hardware stack levels required when called:    4
 10945 ;; This function calls:
 10946 ;;		Nothing
 10947 ;; This function is called by:
 10948 ;;		_USBEnableEndpoint
 10949 ;; This function uses a non-reentrant model
 10950 ;;
 10951                           
 10952                           
 10953                           ;psect for function _USBConfigureEndpoint
 10954  1696                     _USBConfigureEndpoint:	
 10955                           
 10956                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l-status,0]
 10957                           ;USBConfigureEndpoint@EPNum stored from wreg
 10958  1696  00D8               	movwf	USBConfigureEndpoint@EPNum
 10959                           
 10960                           ;usb_device.c: 1714: volatile BDT_ENTRY* handle;
 10961                           ;usb_device.c: 1718: handle = (volatile BDT_ENTRY*)&BDT[0];
 10962  1697  3020               	movlw	32
 10963  1698  00D9               	movwf	USBConfigureEndpoint@handle
 10964                           
 10965                           ;usb_device.c: 1719: handle += (4*EPNum+2*direction+0u);
 10966  1699  0856               	movf	USBConfigureEndpoint@direction,w
 10967  169A  00D7               	movwf	??_USBConfigureEndpoint
 10968  169B  35D7               	lslf	??_USBConfigureEndpoint,f
 10969  169C  0858               	movf	USBConfigureEndpoint@EPNum,w
 10970  169D  0709               	addwf	9,w
 10971  169E  0709               	addwf	9,w
 10972  169F  0757               	addwf	??_USBConfigureEndpoint,w
 10973  16A0  0709               	addwf	9,w
 10974  16A1  0709               	addwf	9,w
 10975  16A2  07D9               	addwf	USBConfigureEndpoint@handle,f
 10976                           
 10977                           ;usb_device.c: 1721: handle->STAT.UOWN = 0;
 10978  16A3  0859               	movf	USBConfigureEndpoint@handle,w
 10979  16A4  0086               	movwf	6
 10980  16A5  0187               	clrf	7
 10981  16A6  1381               	bcf	1,7
 10982                           
 10983                           ;usb_device.c: 1726: if(direction == 0)
 10984  16A7  08D6               	movf	USBConfigureEndpoint@direction,f
 10985  16A8  1D03               	skipz
 10986  16A9  2EB0               	goto	l5457
 10987                           
 10988                           ;usb_device.c: 1727: {
 10989                           ;usb_device.c: 1728: pBDTEntryOut[EPNum] = handle;
 10990  16AA  0858               	movf	USBConfigureEndpoint@EPNum,w
 10991  16AB  3E2C               	addlw	_pBDTEntryOut& (0+255)
 10992  16AC  0086               	movwf	6
 10993  16AD  3001               	movlw	1	; select bank2/3
 10994  16AE  0087               	movwf	7
 10995  16AF  2EB4               	goto	L16
 10996  16B0                     l5457:	
 10997                           ;usb_device.c: 1729: }
 10998                           
 10999                           
 11000                           ;usb_device.c: 1730: else
 11001                           ;usb_device.c: 1731: {
 11002                           ;usb_device.c: 1732: pBDTEntryIn[EPNum] = handle;
 11003  16B0  0858               	movf	USBConfigureEndpoint@EPNum,w
 11004  16B1  3E6A               	addlw	_pBDTEntryIn& (0+255)
 11005  16B2  0086               	movwf	6
 11006  16B3  0187               	clrf	7
 11007  16B4                     L16:	
 11008  16B4  0859               	movf	USBConfigureEndpoint@handle,w
 11009  16B5  0081               	movwf	1
 11010                           
 11011                           ;usb_device.c: 1733: }
 11012                           ;usb_device.c: 1736: handle->STAT.DTS = 0;
 11013  16B6  0859               	movf	USBConfigureEndpoint@handle,w
 11014  16B7  0086               	movwf	6
 11015  16B8  0187               	clrf	7
 11016  16B9  1301               	bcf	1,6
 11017                           
 11018                           ;usb_device.c: 1737: (handle+1)->STAT.DTS = 1;
 11019  16BA  0859               	movf	USBConfigureEndpoint@handle,w
 11020  16BB  3E04               	addlw	4
 11021  16BC  0086               	movwf	6
 11022  16BD  1701               	bsf	1,6
 11023  16BE  0008               	return
 11024  16BF                     __end_of_USBConfigureEndpoint:	
 11025                           
 11026                           	psect	intentry
 11027  0004                     __pintentry:	
 11028 ;; *************** function _ISRCode *****************
 11029 ;; Defined at:
 11030 ;;		line 70 in file "main.c"
 11031 ;; Parameters:    Size  Location     Type
 11032 ;;		None
 11033 ;; Auto vars:     Size  Location     Type
 11034 ;;		None
 11035 ;; Return value:  Size  Location     Type
 11036 ;;		None               void
 11037 ;; Registers used:
 11038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 11039 ;; Tracked objects:
 11040 ;;		On entry : 0/0
 11041 ;;		On exit  : 1F/0
 11042 ;;		Unchanged: FFE00/0
 11043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11046 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;Total ram usage:        1 bytes
 11049 ;; Hardware stack levels used:    1
 11050 ;; Hardware stack levels required when called:    3
 11051 ;; This function calls:
 11052 ;;		_ResultRx
 11053 ;; This function is called by:
 11054 ;;		Interrupt level 1
 11055 ;; This function uses a non-reentrant model
 11056 ;;
 11057                           
 11058  0004                     _ISRCode:	
 11059                           
 11060                           ; Regs used in _ISRCode: [allreg]
 11061  0004  3180               	pagesel	$
 11062  0005  0020               	movlb	0	; select bank0
 11063  0006  087F               	movf	127,w
 11064  0007  00FD               	movwf	??_ISRCode
 11065                           
 11066                           ;main.c: 72: if(IOCBF)
 11067  0008  0027               	movlb	7	; select bank7
 11068  0009  0816               	movf	22,w	;volatile
 11069  000A  1903               	btfsc	3,2
 11070  000B  280E               	goto	i1l835
 11071                           
 11072                           ;main.c: 73: ResultRx();
 11073  000C  3197  2733         	fcall	_ResultRx
 11074  000E                     i1l835:	
 11075  000E  087D               	movf	??_ISRCode,w
 11076  000F  0020               	movlb	0	; select bank0
 11077  0010  00FF               	movwf	127
 11078  0011  0009               	retfie
 11079  0012                     __end_of_ISRCode:	
 11080                           
 11081                           	psect	text1963
 11082  1733                     __ptext1963:	
 11083 ;; *************** function _ResultRx *****************
 11084 ;; Defined at:
 11085 ;;		line 202 in file "klondike.c"
 11086 ;; Parameters:    Size  Location     Type
 11087 ;;		None
 11088 ;; Auto vars:     Size  Location     Type
 11089 ;;  TimeOut         1   12[COMMON] unsigned char 
 11090 ;; Return value:  Size  Location     Type
 11091 ;;		None               void
 11092 ;; Registers used:
 11093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 11094 ;; Tracked objects:
 11095 ;;		On entry : 1F/7
 11096 ;;		On exit  : 1F/7
 11097 ;;		Unchanged: FFE00/0
 11098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11100 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11102 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11103 ;;Total ram usage:        1 bytes
 11104 ;; Hardware stack levels used:    1
 11105 ;; Hardware stack levels required when called:    2
 11106 ;; This function calls:
 11107 ;;		i1_SendCmdReply
 11108 ;; This function is called by:
 11109 ;;		_ISRCode
 11110 ;; This function uses a non-reentrant model
 11111 ;;
 11112                           
 11113                           
 11114                           ;psect for function _ResultRx
 11115  1733                     _ResultRx:	
 11116                           
 11117                           ;klondike.c: 203: BYTE TimeOut = 0;
 11118                           
 11119                           ; Regs used in _ResultRx: [allreg]
 11120  1733  01FC               	clrf	ResultRx@TimeOut
 11121                           
 11122                           ;klondike.c: 204: ResultQC = 0;
 11123  1734  0022               	movlb	2	; select bank2
 11124  1735  01B2               	clrf	_ResultQC^(0+256)
 11125  1736                     i1l6537:	
 11126                           ;klondike.c: 205: while(ResultQC < 4) {
 11127                           
 11128  1736  3004               	movlw	4
 11129  1737  0022               	movlb	2	; select bank2
 11130  1738  0232               	subwf	_ResultQC^(0+256),w
 11131  1739  1803               	btfsc	3,0
 11132  173A  2F5D               	goto	i1l6539
 11133                           
 11134                           ;klondike.c: 207: if(RCIF) {
 11135  173B  0020               	movlb	0	; select bank0
 11136  173C  1E91               	btfss	17,5	;volatile
 11137  173D  2F4A               	goto	i1l6527
 11138                           
 11139                           ;klondike.c: 208: ResultQue[2+ResultQC++] = RCREG;
 11140  173E  0022               	movlb	2	; select bank2
 11141  173F  0832               	movf	_ResultQC^(0+256),w
 11142  1740  3E44               	addlw	(_ResultQue+2)& (0+255)
 11143  1741  0086               	movwf	6
 11144  1742  3001               	movlw	1	; select bank2/3
 11145  1743  0087               	movwf	7
 11146  1744  0023               	movlb	3	; select bank3
 11147  1745  0819               	movf	25,w	;volatile
 11148  1746  0081               	movwf	1
 11149  1747  0022               	movlb	2	; select bank2
 11150  1748  0AB2               	incf	_ResultQC^(0+256),f
 11151                           
 11152                           ;klondike.c: 209: TimeOut = 0;
 11153  1749  01FC               	clrf	ResultRx@TimeOut
 11154  174A                     i1l6527:	
 11155                           
 11156                           ;klondike.c: 210: }
 11157                           ;klondike.c: 211: if(TimeOut++ > 32 ) {
 11158  174A  3022               	movlw	34
 11159  174B  0AFC               	incf	ResultRx@TimeOut,f
 11160  174C  027C               	subwf	ResultRx@TimeOut,w
 11161  174D  1C03               	skipc
 11162  174E  2F52               	goto	i1l732
 11163                           
 11164                           ;klondike.c: 212: Status.Noise++;
 11165  174F  0022               	movlb	2	; select bank2
 11166  1750  0ADE               	incf	(_Status^(0+256)+12),f	;volatile
 11167                           
 11168                           ;klondike.c: 213: goto outrx;
 11169  1751  2F70               	goto	i1l6545
 11170  1752                     i1l732:	
 11171                           
 11172                           ;klondike.c: 214: }
 11173                           ;klondike.c: 216: if(RCSTAbits.OERR) {
 11174  1752  0023               	movlb	3	; select bank3
 11175  1753  1C9D               	btfss	29,1	;volatile
 11176  1754  2F36               	goto	i1l6537
 11177                           
 11178                           ;klondike.c: 217: if(Status.State == 'W')
 11179  1755  0022               	movlb	2	; select bank2
 11180  1756  0852               	movf	_Status^(0+256),w	;volatile
 11181  1757  3A57               	xorlw	87
 11182  1758  1903               	btfsc	3,2
 11183                           
 11184                           ;klondike.c: 218: Status.ErrorCount++;
 11185  1759  0AD9               	incf	(_Status^(0+256)+7),f	;volatile
 11186                           
 11187                           ;klondike.c: 219: RCSTAbits.SPEN = 0;
 11188  175A  0023               	movlb	3	; select bank3
 11189  175B  139D               	bcf	29,7	;volatile
 11190                           
 11191                           ;klondike.c: 220: goto outrx;
 11192  175C  2F70               	goto	i1l6545
 11193  175D                     i1l6539:	
 11194                           
 11195                           ;klondike.c: 221: }
 11196                           ;klondike.c: 222: }
 11197                           ;klondike.c: 224: if(Status.State == 'W') {
 11198  175D  0852               	movf	_Status^(0+256),w	;volatile
 11199  175E  3A57               	xorlw	87
 11200  175F  1D03               	skipz
 11201  1760  2F70               	goto	i1l6545
 11202                           
 11203                           ;klondike.c: 225: ResultQue[0] = '=';
 11204  1761  303D               	movlw	61
 11205  1762  00C2               	movwf	_ResultQue^(0+256)	;volatile
 11206                           
 11207                           ;klondike.c: 226: ResultQue[1] = Status.WorkID;
 11208  1763  0856               	movf	(_Status^(0+256)+4),w	;volatile
 11209  1764  00C3               	movwf	(_ResultQue^(0+256)+1)	;volatile
 11210                           
 11211                           ;klondike.c: 227: SendCmdReply(&ResultQue, &ResultQue+1, sizeof(ResultQue)-1);
 11212  1765  3042               	movlw	_ResultQue& (0+255)
 11213  1766  00F6               	movwf	?i1_SendCmdReply
 11214  1767  3001               	movlw	1
 11215  1768  00F7               	movwf	?i1_SendCmdReply+1
 11216  1769  3043               	movlw	(_ResultQue+1)& (0+255)
 11217  176A  00F8               	movwf	?i1_SendCmdReply+2
 11218  176B  3001               	movlw	1
 11219  176C  00F9               	movwf	?i1_SendCmdReply+3
 11220  176D  3007               	movlw	7
 11221  176E  00FA               	movwf	?i1_SendCmdReply+4
 11222  176F  2776               	fcall	i1_SendCmdReply
 11223  1770                     i1l6545:	
 11224                           
 11225                           ;klondike.c: 230: RCSTAbits.SPEN = 0; RCSTAbits.SPEN = 1;
 11226  1770  0023               	movlb	3	; select bank3
 11227  1771  139D               	bcf	29,7	;volatile
 11228  1772  179D               	bsf	29,7	;volatile
 11229                           
 11230                           ;klondike.c: 231: IOCBF = 0;
 11231  1773  0027               	movlb	7	; select bank7
 11232  1774  0196               	clrf	22	;volatile
 11233  1775  0008               	return
 11234  1776                     __end_of_ResultRx:	
 11235  1776                     __ptext1964:	
 11236 ;; *************** function i1_SendCmdReply *****************
 11237 ;; Defined at:
 11238 ;;		line 208 in file "main.c"
 11239 ;; Parameters:    Size  Location     Type
 11240 ;;  SendCmdReply    2    6[COMMON] PTR unsigned char 
 11241 ;;		 -> ResultQue(8), OUTPacket(64), 
 11242 ;;  SendCmdReply    2    8[COMMON] PTR unsigned char 
 11243 ;;		 -> ResultQue(8), Cfg(6), ID(12), Status(13), 
 11244 ;;  SendCmdReply    1   10[COMMON] unsigned char 
 11245 ;; Auto vars:     Size  Location     Type
 11246 ;;  SendCmdReply    1   11[COMMON] unsigned char 
 11247 ;; Return value:  Size  Location     Type
 11248 ;;		None               void
 11249 ;; Registers used:
 11250 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 11251 ;; Tracked objects:
 11252 ;;		On entry : 1F/2
 11253 ;;		On exit  : 0/0
 11254 ;;		Unchanged: FFE00/0
 11255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11256 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11257 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11258 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;      Totals:         6       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11260 ;;Total ram usage:       12 bytes
 11261 ;; Hardware stack levels used:    1
 11262 ;; Hardware stack levels required when called:    1
 11263 ;; This function calls:
 11264 ;;		i1___wmul
 11265 ;;		i1___bmul
 11266 ;; This function is called by:
 11267 ;;		_ResultRx
 11268 ;; This function uses a non-reentrant model
 11269 ;;
 11270                           
 11271                           
 11272                           ;psect for function i1_SendCmdReply
 11273  1776                     i1_SendCmdReply:	
 11274                           
 11275                           ;main.c: 209: if(WQI*15 + count + 2 < 64) {
 11276                           
 11277                           ; Regs used in i1_SendCmdReply: [allreg]
 11278  1776  087A               	movf	i1SendCmdReply@count,w
 11279  1777  0020               	movlb	0	; select bank0
 11280  1778  00D0               	movwf	??i1_SendCmdReply
 11281  1779  01D1               	clrf	??i1_SendCmdReply+1
 11282  177A  0021               	movlb	1	; select bank1
 11283  177B  086D               	movf	_WQI^(0+128),w
 11284  177C  00F0               	movwf	?i1___wmul
 11285  177D  300F               	movlw	15
 11286  177E  01F1               	clrf	?i1___wmul+1
 11287  177F  00F2               	movwf	?i1___wmul+2
 11288  1780  01F3               	clrf	?i1___wmul+3
 11289  1781  27EB  3197         	fcall	i1___wmul
 11290  1783  0020               	movlb	0	; select bank0
 11291  1784  0850               	movf	??i1_SendCmdReply,w
 11292  1785  0770               	addwf	?i1___wmul,w
 11293  1786  00D2               	movwf	??i1_SendCmdReply+2
 11294  1787  0851               	movf	??i1_SendCmdReply+1,w
 11295  1788  3D71               	addwfc	?i1___wmul+1,w
 11296  1789  00D3               	movwf	??i1_SendCmdReply+3
 11297  178A  0852               	movf	??i1_SendCmdReply+2,w
 11298  178B  3E02               	addlw	2
 11299  178C  00D4               	movwf	??i1_SendCmdReply+4
 11300  178D  3000               	movlw	0
 11301  178E  3D53               	addwfc	??i1_SendCmdReply+3,w
 11302  178F  00D5               	movwf	??i1_SendCmdReply+5
 11303  1790  3A80               	xorlw	128
 11304  1791  00FF               	movwf	127
 11305  1792  3080               	movlw	128
 11306  1793  027F               	subwf	127,w
 11307  1794  1D03               	skipz
 11308  1795  2F98               	goto	u538_25
 11309  1796  3040               	movlw	64
 11310  1797  0254               	subwf	??i1_SendCmdReply+4,w
 11311  1798                     u538_25:	
 11312  1798  1803               	skipnc
 11313  1799  0008               	return
 11314                           
 11315                           ;main.c: 210: INPacket[WQI*15] = cmd[0];
 11316  179A  300F               	movlw	15
 11317  179B  00F0               	movwf	?i1___bmul
 11318  179C  0021               	movlb	1	; select bank1
 11319  179D  086D               	movf	_WQI^(0+128),w
 11320  179E  27DF  3197         	fcall	i1___bmul
 11321  17A0  3E20               	addlw	32
 11322  17A1  0086               	movwf	6
 11323  17A2  3002               	movlw	2	; select bank4/5
 11324  17A3  0087               	movwf	7
 11325  17A4  0876               	movf	i1SendCmdReply@cmd,w
 11326  17A5  0084               	movwf	4
 11327  17A6  0877               	movf	i1SendCmdReply@cmd+1,w
 11328  17A7  0085               	movwf	5
 11329  17A8  0800               	movf	0,w
 11330  17A9  0081               	movwf	1
 11331                           
 11332                           ;main.c: 211: INPacket[WQI*15 + 1] = SlaveAddress;
 11333  17AA  300F               	movlw	15
 11334  17AB  00F0               	movwf	?i1___bmul
 11335  17AC  086D               	movf	_WQI^(0+128),w
 11336  17AD  27DF  3197         	fcall	i1___bmul
 11337  17AF  3E21               	addlw	33
 11338  17B0  0086               	movwf	6
 11339  17B1  3002               	movlw	2	; select bank4/5
 11340  17B2  0087               	movwf	7
 11341  17B3  0022               	movlb	2	; select bank2
 11342  17B4  0833               	movf	_SlaveAddress^(0+256),w
 11343  17B5  0081               	movwf	1
 11344                           
 11345                           ;main.c: 212: for(BYTE n=0; n < count; n++)
 11346  17B6  01FB               	clrf	i1SendCmdReply@n
 11347  17B7                     i1l6513:	
 11348  17B7  087A               	movf	i1SendCmdReply@count,w
 11349  17B8  027B               	subwf	i1SendCmdReply@n,w
 11350  17B9  1803               	btfsc	3,0
 11351  17BA  2FDA               	goto	i1l6515
 11352                           
 11353                           ;main.c: 213: INPacket[WQI*15 + n + 2] = data[n];
 11354  17BB  300F               	movlw	15
 11355  17BC  00F0               	movwf	?i1___bmul
 11356  17BD  0021               	movlb	1	; select bank1
 11357  17BE  086D               	movf	_WQI^(0+128),w
 11358  17BF  27DF  3197         	fcall	i1___bmul
 11359  17C1  0020               	movlb	0	; select bank0
 11360  17C2  00D0               	movwf	??i1_SendCmdReply
 11361  17C3  3E22               	addlw	34
 11362  17C4  00D1               	movwf	??i1_SendCmdReply+1
 11363  17C5  087B               	movf	i1SendCmdReply@n,w
 11364  17C6  0751               	addwf	??i1_SendCmdReply+1,w
 11365  17C7  00D2               	movwf	??i1_SendCmdReply+2
 11366  17C8  0086               	movwf	6
 11367  17C9  3002               	movlw	2	; select bank4/5
 11368  17CA  0087               	movwf	7
 11369  17CB  0879               	movf	i1SendCmdReply@data+1,w
 11370  17CC  00D4               	movwf	??i1_SendCmdReply+4
 11371  17CD  0878               	movf	i1SendCmdReply@data,w
 11372  17CE  00D3               	movwf	??i1_SendCmdReply+3
 11373  17CF  087B               	movf	i1SendCmdReply@n,w
 11374  17D0  0753               	addwf	??i1_SendCmdReply+3,w
 11375  17D1  0084               	movwf	4
 11376  17D2  0854               	movf	??i1_SendCmdReply+4,w
 11377  17D3  1803               	skipnc
 11378  17D4  0A54               	incf	??i1_SendCmdReply+4,w
 11379  17D5  0085               	movwf	5
 11380  17D6  0800               	movf	0,w	;code access
 11381  17D7  0081               	movwf	1
 11382  17D8  0AFB               	incf	i1SendCmdReply@n,f
 11383  17D9  2FB7               	goto	i1l6513
 11384  17DA                     i1l6515:	
 11385                           
 11386                           ;main.c: 214: WQI = (WQI+1) & 3;
 11387  17DA  0021               	movlb	1	; select bank1
 11388  17DB  3003               	movlw	3
 11389  17DC  0AED               	incf	_WQI^(0+128),f
 11390  17DD  05ED               	andwf	_WQI^(0+128),f
 11391  17DE  0008               	return
 11392  17DF                     __end_ofi1_SendCmdReply:	
 11393  17DF                     __ptext1966:	
 11394 ;; *************** function i1___bmul *****************
 11395 ;; Defined at:
 11396 ;;		line 3 in file "/opt/microchip/xc8/v1.12/sources/bmul.c"
 11397 ;; Parameters:    Size  Location     Type
 11398 ;;  __bmul          1    wreg     unsigned char 
 11399 ;;  __bmul          1    0[COMMON] unsigned char 
 11400 ;; Auto vars:     Size  Location     Type
 11401 ;;  __bmul          1    1[COMMON] unsigned char 
 11402 ;;  __bmul          1    2[COMMON] unsigned char 
 11403 ;; Return value:  Size  Location     Type
 11404 ;;                  1    wreg      unsigned char 
 11405 ;; Registers used:
 11406 ;;		wreg, status,2, status,0
 11407 ;; Tracked objects:
 11408 ;;		On entry : 1F/1
 11409 ;;		On exit  : 1F/1
 11410 ;;		Unchanged: FFFE0/0
 11411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11412 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11413 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;Total ram usage:        3 bytes
 11417 ;; Hardware stack levels used:    1
 11418 ;; This function calls:
 11419 ;;		Nothing
 11420 ;; This function is called by:
 11421 ;;		i1_SendCmdReply
 11422 ;; This function uses a non-reentrant model
 11423 ;;
 11424                           
 11425                           
 11426                           ;psect for function i1___bmul
 11427  17DF                     i1___bmul:	
 11428                           
 11429                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 11430                           ;i1___bmul@multiplier stored from wreg
 11431  17DF  00F1               	movwf	i1___bmul@multiplier
 11432  17E0  01F2               	clrf	i1___bmul@product
 11433  17E1                     i1l4951:	
 11434  17E1  0870               	movf	i1___bmul@multiplicand,w
 11435  17E2  1871               	btfsc	i1___bmul@multiplier,0
 11436  17E3  07F2               	addwf	i1___bmul@product,f
 11437  17E4  35F0               	lslf	i1___bmul@multiplicand,f
 11438  17E5  36F1               	lsrf	i1___bmul@multiplier,f
 11439  17E6  08F1               	movf	i1___bmul@multiplier,f
 11440  17E7  1D03               	skipz
 11441  17E8  2FE1               	goto	i1l4951
 11442  17E9  0872               	movf	i1___bmul@product,w
 11443  17EA  0008               	return
 11444  17EB                     __end_ofi1___bmul:	
 11445  17EB                     __ptext1965:	
 11446 ;; *************** function i1___wmul *****************
 11447 ;; Defined at:
 11448 ;;		line 3 in file "/opt/microchip/xc8/v1.12/sources/wmul.c"
 11449 ;; Parameters:    Size  Location     Type
 11450 ;;  __wmul          2    0[COMMON] unsigned int 
 11451 ;;  __wmul          2    2[COMMON] unsigned int 
 11452 ;; Auto vars:     Size  Location     Type
 11453 ;;  __wmul          2    4[COMMON] unsigned int 
 11454 ;; Return value:  Size  Location     Type
 11455 ;;                  2    0[COMMON] unsigned int 
 11456 ;; Registers used:
 11457 ;;		wreg, status,2, status,0
 11458 ;; Tracked objects:
 11459 ;;		On entry : 1F/1
 11460 ;;		On exit  : 1F/1
 11461 ;;		Unchanged: FFFE0/0
 11462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11463 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11464 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11466 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11467 ;;Total ram usage:        6 bytes
 11468 ;; Hardware stack levels used:    1
 11469 ;; This function calls:
 11470 ;;		Nothing
 11471 ;; This function is called by:
 11472 ;;		i1_SendCmdReply
 11473 ;; This function uses a non-reentrant model
 11474 ;;
 11475                           
 11476                           
 11477                           ;psect for function i1___wmul
 11478  17EB                     i1___wmul:	
 11479                           
 11480                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 11481  17EB  01F4               	clrf	i1___wmul@product
 11482  17EC  01F5               	clrf	i1___wmul@product+1
 11483  17ED                     i1l4935:	
 11484  17ED  1C70               	btfss	i1___wmul@multiplier,0
 11485  17EE  2FF3               	goto	i1l4939
 11486  17EF  0872               	movf	i1___wmul@multiplicand,w
 11487  17F0  07F4               	addwf	i1___wmul@product,f
 11488  17F1  0873               	movf	i1___wmul@multiplicand+1,w
 11489  17F2  3DF5               	addwfc	i1___wmul@product+1,f
 11490  17F3                     i1l4939:	
 11491  17F3  35F2               	lslf	i1___wmul@multiplicand,f
 11492  17F4  0DF3               	rlf	i1___wmul@multiplicand+1,f
 11493  17F5  36F1               	lsrf	i1___wmul@multiplier+1,f
 11494  17F6  0CF0               	rrf	i1___wmul@multiplier,f
 11495  17F7  0871               	movf	i1___wmul@multiplier+1,w
 11496  17F8  0470               	iorwf	i1___wmul@multiplier,w
 11497  17F9  1D03               	skipz
 11498  17FA  2FED               	goto	i1l4935
 11499  17FB  0875               	movf	i1___wmul@product+1,w
 11500  17FC  00F1               	movwf	?i1___wmul+1
 11501  17FD  0874               	movf	i1___wmul@product,w
 11502  17FE  00F0               	movwf	?i1___wmul
 11503  17FF  0008               	return
 11504  1800                     __end_ofi1___wmul:	
 11505                           
 11506                           	psect	text1967
 11507  0000                     __ptext1967:	
 11508                           
 11509                           ;psect for function i1___bmul
 11510  007E                     btemp	set	126	;btemp
 11511  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    188
    Data        72
    BSS         116
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     26      32
    BANK1            80     75      80
    BANK2            80      0      78
    BANK3            80      0      68
    BANK4            16      0       0
    BANK5            16      0       0
    BANK6            80      0      32
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           28      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    ?___awdiv	int  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?_rotate	unsigned long  size(1) Largest target is 0

    ?_memset	PTR void  size(2) Largest target is 32
		 -> USBAlternateInterface(BANK2[1]), BDT(BANK0[32]), 

    ?_USBTransferOnePacket	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 32
		 -> USTATcopy(BANK1[1]), USBActiveConfiguration(BANK2[1]), NULL(NULL[0]), BDT(BANK0[32]), 

    memset@p1	PTR void  size(2) Largest target is 32
		 -> USBAlternateInterface(BANK2[1]), BDT(BANK0[32]), 

    memset@p	PTR unsigned char  size(2) Largest target is 32
		 -> USBAlternateInterface(BANK2[1]), BDT(BANK0[32]), 

    fwbuf	PTR unsigned char  size(2) Largest target is 4096
		 -> WorkQue(BIGRAM[180]), RAM(DATA[4096]), NULL(NULL[0]), 

    SendCmdReply@data	PTR unsigned char  size(2) Largest target is 13
		 -> ResultQue(BANK2[8]), Cfg(BANK2[6]), ID(CODE[12]), Status(BANK2[13]), 

    SendCmdReply@cmd	PTR unsigned char  size(2) Largest target is 64
		 -> ResultQue(BANK2[8]), OUTPacket(BANK5[64]), 

    USBGenericInHandle	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBGenericOutHandle	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    ProcessCmd@cmd	PTR unsigned char  size(1) Largest target is 64
		 -> OUTPacket(BANK5[64]), 

    I2CInBuf	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    AsicPreCalc@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    SendAsicData@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(1) Largest target is 52
		 -> sd002(CODE[52]), sd001(CODE[52]), sd000(CODE[4]), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(1) Largest target is 32
		 -> configDescriptor1(CODE[32]), 

    sp__memset	PTR void  size(2) Largest target is 32
		 -> USBAlternateInterface(BANK2[1]), BDT(BANK0[32]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 

    pDst	PTR unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBTransferOnePacket@data	PTR unsigned char  size(1) Largest target is 64
		 -> INPacket(BANK4[64]), OUTPacket(BANK5[64]), 

    sp__USBTransferOnePacket	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    S118$pFunc	PTR FTN()void  size(1) Largest target is 0

    outPipes.pFunc	PTR FTN()void  size(1) Largest target is 0

    S108$wRam	PTR unsigned short  size(1) Largest target is 0

    outPipes.pDst.wRam	PTR unsigned short  size(1) Largest target is 0

    S108$bRam	PTR unsigned char  size(1) Largest target is 0

    outPipes.pDst.bRam	PTR unsigned char  size(1) Largest target is 0

    S66$wRom	PTR const unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRom	PTR const unsigned short  size(1) Largest target is 0

    S66$wRam	PTR unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRam	PTR unsigned short  size(1) Largest target is 0

    S66$bRom	PTR const unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRom	PTR const unsigned char  size(1) Largest target is 0

    S66$bRam	PTR unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRam	PTR unsigned char  size(1) Largest target is 0

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISRCode in COMMON

    _ISRCode->_ResultRx
    _ResultRx->i1_SendCmdReply
    i1_SendCmdReply->i1___wmul

Critical Paths under _main in BANK0

    _main->_AsicPushWork
    _ProcessCmd->_AsicPushWork
    _AsicPushWork->_AsicPreCalc
    _SendAsicData->___wmul
    _AsicPreCalc->_rotate
    _rotate->___bmul
    _SendCmdReply->___wmul
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USBStdSetCfgHandler
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _UserInit->_DetectAsics
    _DetectAsics->___awdiv
    _USBCBInitEP->_USBEnableEndpoint
    _USBCBInitEP->_USBTransferOnePacket
    _USBEnableEndpoint->_USBConfigureEndpoint
    _USBTransferOnePacket->___bmul

Critical Paths under _ISRCode in BANK0

    _ResultRx->i1_SendCmdReply

Critical Paths under _main in BANK1

    _main->_ProcessIO
    _ProcessIO->_ProcessCmd
    _ProcessCmd->_AsicPreCalc
    _AsicPushWork->_AsicPreCalc
    _UpdateFirmware->_USBDeviceTasks
    _USBDeviceTasks->_USBCtrlEPService
    _USBCheckStdRequest->_USBStdFeatureReqHandler

Critical Paths under _ISRCode in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISRCode in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISRCode in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISRCode in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISRCode in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISRCode in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISRCode in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISRCode in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISRCode in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISRCode in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISRCode in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISRCode in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   30244
                   _InitializeSystem
                     _USBDeviceTasks
                           _WorkTick
                       _AsicPushWork
                          _ProcessIO
 ---------------------------------------------------------------------------------
 (1) _WorkTick                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitializeSystem                                     0     0      0     940
                           _UserInit
                      _USBDeviceInit
 ---------------------------------------------------------------------------------
 (1) _ProcessIO                                            4     4      0   17466
                                             71 BANK1      4     4      0
                         _ProcessCmd
               _USBTransferOnePacket
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _ProcessCmd                                           6     6      0   16816
                                             65 BANK1      6     6      0
                             ___wmul
                        _AsicPreCalc
                       _AsicPushWork
                       _SendCmdReply
                            ___lwdiv
                     _UpdateFirmware
 ---------------------------------------------------------------------------------
 (3) _AsicPushWork                                         2     2      0    2790
                                             24 BANK0      2     2      0
                             ___wmul
                       _SendAsicData
                        _AsicPreCalc
 ---------------------------------------------------------------------------------
 (4) _SendAsicData                                         3     0      3      93
                                             12 BANK0      3     0      3
                             _Send32
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Send32                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _AsicPreCalc                                         67    65      2    2561
                                             22 BANK0      2     0      2
                                              0 BANK1     65    65      0
                             ___bmul
                             _rotate
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _rotate                                              13     8      5     124
                                              9 BANK0     13     8      5
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _SendCmdReply                                        12     7      5     495
                                             12 BANK0     12     7      5
                             ___wmul
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _UpdateFirmware                                       8     8      0   10023
                                              9 BANK1      8     8      0
                     _USBDeviceTasks
                           _EraseRow
                           _WriteRow
                          _VerifyRow
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (4) _USBDeviceTasks                                       2     2      0    9048
                                              7 BANK1      2     2      0
                 _USBWakeFromSuspend
                      _USBDeviceInit
                         _USBSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
          _USBCtrlEPAllowStatusStage
                    _USBStallHandler
                   _USBCtrlEPService
 ---------------------------------------------------------------------------------
 (5) _USBDeviceInit                                        6     6      0     396
                                              6 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (5) _USBWakeFromSuspend                                   0     0      0    1007
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (5) _USBSuspend                                           0     0      0    1007
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (5) _USBStallHandler                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _USBCtrlEPService                                     3     3      0    5563
                                              4 BANK1      3     3      0
             _USBCtrlTrfSetupHandler
               _USBCtrlTrfOutHandler
                _USBCtrlTrfInHandler
 ---------------------------------------------------------------------------------
 (6) _USBCtrlTrfSetupHandler                               0     0      0    5127
                 _USBCheckStdRequest
    _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCtrlEPServiceComplete
 ---------------------------------------------------------------------------------
 (7) _USBCtrlEPServiceComplete                             2     2      0     136
                                             11 BANK0      2     2      0
            _USBCtrlEPAllowDataStage
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (8) _USBCtrlEPAllowDataStage                              2     2      0     136
                                              9 BANK0      2     2      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (6) _USBCtrlTrfOutHandler                                 2     2      0     167
                                             12 BANK0      2     2      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (7) _USBCtrlTrfRxService                                  4     4      0     167
                                              8 BANK0      4     4      0
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (8) _USBCtrlEPAllowStatusStage                            2     2      0       0
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _USBCtrlTrfInHandler                                  3     3      0     170
                                              9 BANK0      3     3      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (7) _USBCtrlTrfTxService                                  3     3      0     136
                                              6 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (7) _USBCheckStdRequest                                   0     0      0    3984
                _USBStdGetDscHandler
                _USBStdSetCfgHandler
             _USBStdGetStatusHandler
            _USBStdFeatureReqHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (8) _USBStdSetCfgHandler                                  4     4      0    1379
                                             22 BANK0      4     4      0
                             _memset
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (9) _memset                                               9     3      6     137
                                              6 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (8) _USBStdGetDscHandler                                  2     2      0       0
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (8) _USBStdGetStatusHandler                               1     1      0      68
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _USBStdFeatureReqHandler                              6     6      0    1530
                                             22 BANK0      2     2      0
                                              0 BANK1      4     4      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USER_USB_CALLBACK_EVENT_HANDLER                      6     0      6    1007
                                             16 BANK0      6     0      6
                  _USBCB_SOF_Handler
                       _USBCBSuspend
               _USBCBWakeFromSuspend
                        _USBCBInitEP
              _USBCBStdSetDscHandler
                 _USBCBCheckOtherReq
                  _USBCBErrorHandler
 ---------------------------------------------------------------------------------
 (2) _UserInit                                             0     0      0     544
                     _InitTempSensor
                            _InitFAN
                       _InitWorkTick
                       _InitResultRx
                        _DetectAsics
 ---------------------------------------------------------------------------------
 (3) _DetectAsics                                          9     9      0     544
                                             14 BANK0      9     9      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) _InitFAN                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitTempSensor                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitWorkTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitResultRx                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _USBCBSuspend                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _USBCBWakeFromSuspend                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _USBCB_SOF_Handler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _USBCBErrorHandler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _USBCBCheckOtherReq                                   0     0      0       0
              _USBCheckVendorRequest
 ---------------------------------------------------------------------------------
 (9) _USBCheckVendorRequest                                0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _USBCBStdSetDscHandler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _USBCBInitEP                                          0     0      0     976
                  _USBEnableEndpoint
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (9) _USBEnableEndpoint                                    6     5      1     536
                                             10 BANK0      6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (10) _USBConfigureEndpoint                                4     3      1     316
                                              6 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                 7     4      3     440
                                              9 BANK0      7     4      3
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _EraseRow                                             2     0      2       0
                                              6 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _WriteRow                                             5     2      3      96
                                              6 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (4) _VerifyRow                                            5     2      3      96
                                              6 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     241
                                              6 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     445
                                              6 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     136
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     136
                                              6 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _ISRCode                                             1     1      0    1175
                                             13 COMMON     1     1      0
                           _ResultRx
 ---------------------------------------------------------------------------------
 (14) _ResultRx                                            1     1      0    1175
                                             12 COMMON     1     1      0
                     i1_SendCmdReply
 ---------------------------------------------------------------------------------
 (15) i1_SendCmdReply                                     12     7      5    1138
                                              6 COMMON     6     1      5
                                              0 BANK0      6     6      0
                           i1___wmul
                           i1___bmul
 ---------------------------------------------------------------------------------
 (16) i1___wmul                                            6     2      4     300
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (16) i1___bmul                                            3     2      1     212
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitializeSystem
     _UserInit
       _InitTempSensor
       _InitFAN
       _InitWorkTick
       _InitResultRx
       _DetectAsics
         ___awdiv
     _USBDeviceInit
   _USBDeviceTasks
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCB_SOF_Handler
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
             ___bmul (ARG)
         _USBCBStdSetDscHandler
         _USBCBCheckOtherReq
           _USBCheckVendorRequest
         _USBCBErrorHandler
     _USBDeviceInit
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCB_SOF_Handler
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
             ___bmul (ARG)
         _USBCBStdSetDscHandler
         _USBCBCheckOtherReq
           _USBCheckVendorRequest
         _USBCBErrorHandler
     _USER_USB_CALLBACK_EVENT_HANDLER
       _USBCB_SOF_Handler
       _USBCBSuspend
       _USBCBWakeFromSuspend
       _USBCBInitEP
         _USBEnableEndpoint
           _USBConfigureEndpoint
         _USBTransferOnePacket
           ___bmul (ARG)
       _USBCBStdSetDscHandler
       _USBCBCheckOtherReq
         _USBCheckVendorRequest
       _USBCBErrorHandler
     _USBCtrlEPAllowStatusStage
     _USBStallHandler
     _USBCtrlEPService
       _USBCtrlTrfSetupHandler
         _USBCheckStdRequest
           _USBStdGetDscHandler
           _USBStdSetCfgHandler
             _memset
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCB_SOF_Handler
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
               _USBCBStdSetDscHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBErrorHandler
           _USBStdGetStatusHandler
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCB_SOF_Handler
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
               _USBCBStdSetDscHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBErrorHandler
           _USER_USB_CALLBACK_EVENT_HANDLER
             _USBCB_SOF_Handler
             _USBCBSuspend
             _USBCBWakeFromSuspend
             _USBCBInitEP
               _USBEnableEndpoint
                 _USBConfigureEndpoint
               _USBTransferOnePacket
                 ___bmul (ARG)
             _USBCBStdSetDscHandler
             _USBCBCheckOtherReq
               _USBCheckVendorRequest
             _USBCBErrorHandler
         _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCB_SOF_Handler
           _USBCBSuspend
           _USBCBWakeFromSuspend
           _USBCBInitEP
             _USBEnableEndpoint
               _USBConfigureEndpoint
             _USBTransferOnePacket
               ___bmul (ARG)
           _USBCBStdSetDscHandler
           _USBCBCheckOtherReq
             _USBCheckVendorRequest
           _USBCBErrorHandler
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
           _USBCtrlEPAllowStatusStage
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
   _WorkTick
   _AsicPushWork
     ___wmul
     _SendAsicData
       _Send32
       ___wmul (ARG)
     _AsicPreCalc
       ___bmul
       _rotate
         ___bmul (ARG)
       ___wmul (ARG)
   _ProcessIO
     _ProcessCmd
       ___wmul
       _AsicPreCalc
         ___bmul
         _rotate
           ___bmul (ARG)
         ___wmul (ARG)
       _AsicPushWork
         ___wmul
         _SendAsicData
           _Send32
           ___wmul (ARG)
         _AsicPreCalc
           ___bmul
           _rotate
             ___bmul (ARG)
           ___wmul (ARG)
       _SendCmdReply
         ___wmul
         ___bmul
       ___lwdiv
       _UpdateFirmware
         _USBDeviceTasks
           _USBWakeFromSuspend
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCB_SOF_Handler
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
               _USBCBStdSetDscHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBErrorHandler
           _USBDeviceInit
           _USBSuspend
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCB_SOF_Handler
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
               _USBCBStdSetDscHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBErrorHandler
           _USER_USB_CALLBACK_EVENT_HANDLER
             _USBCB_SOF_Handler
             _USBCBSuspend
             _USBCBWakeFromSuspend
             _USBCBInitEP
               _USBEnableEndpoint
                 _USBConfigureEndpoint
               _USBTransferOnePacket
                 ___bmul (ARG)
             _USBCBStdSetDscHandler
             _USBCBCheckOtherReq
               _USBCheckVendorRequest
             _USBCBErrorHandler
           _USBCtrlEPAllowStatusStage
           _USBStallHandler
           _USBCtrlEPService
             _USBCtrlTrfSetupHandler
               _USBCheckStdRequest
                 _USBStdGetDscHandler
                 _USBStdSetCfgHandler
                   _memset
                   _USER_USB_CALLBACK_EVENT_HANDLER
                     _USBCB_SOF_Handler
                     _USBCBSuspend
                     _USBCBWakeFromSuspend
                     _USBCBInitEP
                       _USBEnableEndpoint
                         _USBConfigureEndpoint
                       _USBTransferOnePacket
                         ___bmul (ARG)
                     _USBCBStdSetDscHandler
                     _USBCBCheckOtherReq
                       _USBCheckVendorRequest
                     _USBCBErrorHandler
                 _USBStdGetStatusHandler
                 _USBStdFeatureReqHandler
                   _USER_USB_CALLBACK_EVENT_HANDLER
                     _USBCB_SOF_Handler
                     _USBCBSuspend
                     _USBCBWakeFromSuspend
                     _USBCBInitEP
                       _USBEnableEndpoint
                         _USBConfigureEndpoint
                       _USBTransferOnePacket
                         ___bmul (ARG)
                     _USBCBStdSetDscHandler
                     _USBCBCheckOtherReq
                       _USBCheckVendorRequest
                     _USBCBErrorHandler
                 _USER_USB_CALLBACK_EVENT_HANDLER
                   _USBCB_SOF_Handler
                   _USBCBSuspend
                   _USBCBWakeFromSuspend
                   _USBCBInitEP
                     _USBEnableEndpoint
                       _USBConfigureEndpoint
                     _USBTransferOnePacket
                       ___bmul (ARG)
                   _USBCBStdSetDscHandler
                   _USBCBCheckOtherReq
                     _USBCheckVendorRequest
                   _USBCBErrorHandler
               _USER_USB_CALLBACK_EVENT_HANDLER
                 _USBCB_SOF_Handler
                 _USBCBSuspend
                 _USBCBWakeFromSuspend
                 _USBCBInitEP
                   _USBEnableEndpoint
                     _USBConfigureEndpoint
                   _USBTransferOnePacket
                     ___bmul (ARG)
                 _USBCBStdSetDscHandler
                 _USBCBCheckOtherReq
                   _USBCheckVendorRequest
                 _USBCBErrorHandler
               _USBCtrlEPServiceComplete
                 _USBCtrlEPAllowDataStage
                   _USBCtrlTrfTxService
                 _USBCtrlEPAllowStatusStage
             _USBCtrlTrfOutHandler
               _USBCtrlTrfRxService
                 _USBCtrlEPAllowStatusStage
             _USBCtrlTrfInHandler
               _USBCtrlTrfTxService
         _EraseRow
         _WriteRow
         _VerifyRow
         _USBTransferOnePacket
           ___bmul (ARG)
     _USBTransferOnePacket
       ___bmul (ARG)
     ___bmul

 _ISRCode (ROOT)
   _ResultRx
     i1_SendCmdReply
       i1___wmul
       i1___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0      14       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     1A      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4B      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      44      11       85.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            10      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               10      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            10      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               10      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      20      17       40.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     130      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              1C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     144      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.12 build 49521 
Symbol Table                                                                                   Sun Aug 25 00:05:39 2013

                              _USB_SD_Ptr 100F                                         pc 0002  
                          ___bmul@product 0057                                        PL2 0E2B  
                                      PL4 0E3D                                        PL6 0E4A  
                                      PL8 0E52                                        _ID 10AD  
                  ?_USBCheckVendorRequest 0070                              ___awdiv@sign 005B  
                           _USBDeviceInit 16BF                       ___wmul@multiplicand 0058  
                        i1___wmul@product 0074                          ??_UpdateFirmware 006A  
                                     PL10 0E58                                       PL20 0E93  
                                     PL12 0E68                                       PL30 0EB4  
                                     PL22 0E9B                                       PL14 0E70  
                                     PL40 069D                                       PL32 0EBA  
                                     PL24 067C                                       PL16 0E76  
                                     PL50 06A8                                       PL42 07D7  
                                     PL34 0EC3                                       PL26 068D  
                                     PL18 0E80                       __end_of_AsicPreCalc 0D2E  
                                     PL60 07E1                                       PL52 0EE9  
                                     PL44 0ED0                                       PL36 07D1  
                                     PL28 0EA4                                       PL62 0EFD  
                                     PL54 0EF1                                       PL46 0ED8  
                                     PL38 0EC8                                       LATC 010E  
                                     PL64 0F02                                       PL56 0EF7  
                                     PL48 0EE1                                       PL66 07E8  
                                     PL58 06B0                                       PL68 0F08  
                              _BankRanges 0320      USER_USB_CALLBACK_EVENT_HANDLER@event 0060  
    USER_USB_CALLBACK_EVENT_HANDLER@pdata 0062                       __end_of_DetectAsics 0FC0  
                                     l140 01A2                                       l141 01A1  
                                     l142 01A6                                       l151 0207  
                                     l208 05E4                                       l330 0381  
                                     l138 0287                                       l146 01CE  
                                     l315 058D                                       l155 023B  
                                     l332 034A                                       l341 0361  
                                     l157 0242               __end_of_USBStdGetDscHandler 04FC  
                                     l318 05B9                                       l175 0315  
                                     l271 0478                                       l353 03D9  
                                     l354 03DA                                       l274 04AE  
                                     l275 0482                                       l276 0485  
                                     l373 07FD                                       l366 0436  
                                     l358 0405                                       l840 086B  
                                     l681 09AE                                       _BDT 0020  
                                     l941 0148                                       l838 085D  
                                     l919 02CC                                       l687 08FA  
                                     l679 08BE                                       l944 0190  
                                     l688 090B                                       l689 0916  
                                     l938 00FA                                       l970 00E7  
                                     l968 00C9                                       _GIE 005F  
                                     _PR2 001B                                       _UIE 0E92  
                                     _UIR 0E90                                       _Cfg 0167  
                                     _WQI 00ED                                       _WQX 013B  
                              _USBSuspend 1605                      USBStdSetCfgHandler@i 0069  
                    USBStdSetCfgHandler@p 0066                                       wreg 0009  
                          _USBDeviceTasks 0191                            _USBDeviceState 00EB  
                  ??_USBCBWakeFromSuspend 0056                                      S6625 10BD  
                   ??_USBCtrlTrfRxService 0058                  USBEnableEndpoint@options 005A  
                                    INDF1 0001                              __CFG_LVP$OFF 0000  
                                    FSR0H 0005                                      FSR1H 0007  
                                    FSR0L 0004                                      FSR1L 0006  
              USBConfigureEndpoint@handle 0059                                      l5211 0191  
                                    l5203 0191                                      l5301 024A  
                                    l5213 0197                                      l5221 01A9  
                                    l6101 094D                                      l5311 0269  
                                    l5303 0251                                      l5231 01B7  
                                    l5223 01AE                                      l5215 019A  
                                    l6007 0BB7                                      l6103 0959  
                                    l5137 16BF                                      l5313 026E  
                                    l5305 0253                                      l5241 01C7  
                                    l5225 01B3                                      l5233 01BA  
                                    l5217 019C                                      l6201 005A  
                                    l6113 097A                                      l5163 16DF  
                                    l5147 16CB                                      l5315 0272  
                                    l5307 0258                                      l5251 01DB  
                                    l5243 01CB                                      l5235 01BF  
                                    l5227 01B5                                      l5219 019E  
                                    l6211 0090                                      l6203 0072  
                                    l6131 0993                                      l5341 0295  
                                    l5333 0288                                      l5501 062D  
                                    l5317 027E                                      l5309 0261  
                                    l5261 01EA                                      l5245 01D2  
                                    l5253 01DD                                      l5237 01C3  
                                    l5229 01B6                                      l6221 00B3  
                                    l6213 0095                                      l6205 0082  
                                    l6109 0974                                      l5343 0299  
                                    l5335 0289                                      l5351 02A5  
                                    l5431 0706                                      l5191 1706  
                                    l5319 0280                                      l5271 0206  
                                    l5263 01EE                                      l5255 01E1  
                                    l5247 01D6                                      l5239 01C4  
                                    l6223 00C0                                      l6215 009F  
                                    l6207 0086                                      l6231 00DA  
                                    l6119 097B                                      l6401 0D31  
                                    l6233 0F4C                                      l5345 029D  
                                    l5337 028D                                      l5601 0740  
                                    l5417 06D3                                      l5177 16F4  
                                    l5281 021B                                      l5273 020C  
                                    l5265 01F2                                      l5257 01E5  
                                    l5249 01D9                                      l6225 00C5  
                                    l6217 00A2                                      l6209 0088  
                                    l6065 08CF                                      l6049 0870  
                                    l5443 1683                                      l5347 02A1  
                                    l5339 0291                                      l5515 0652  
                                    l5611 074E                                      l5179 16FE  
                                    l5283 021F                                      l5267 01FF  
                                    l5275 020F                                      l5259 01E8  
                                    l6219 00A8                                      l6171 0016  
                                    l6163 09F4                                      l6059 08CA  
                                    l6331 0864                                      l6421 0A23  
                                    l6245 0F77                                      l5357 0796  
                                    l5621 0781                                      l5613 0762  
                                    l5429 0705                                      l5293 0240  
                                    l5285 0223                                      l5277 0214  
                                    l5269 0201                                      l6229 00CB  
                                    l6181 002E                                      l6173 001B  
                                    l6165 0A16                                      l6069 08DA  
                                    l5471 02E5                                      l5463 02CE  
                                    l5439 167D                                      l5711 04EC  
                                    l5519 0656                                      l5287 0231  
                                    l5279 0218                                      l6191 0049  
                                    l6175 001E                                      l4663 0DE6  
                                    l6417 0A1D                                      l6441 0A3D  
                                    l5481 0302                                      l5465 02D2  
                                    l5457 16B0                                      l6249 0FBA  
                                    l5705 04DC                                      l5641 0504  
                                    l5633 04FC                                      l5529 066E  
                                    l5537 0670                                      l5369 07AB  
                                    l5289 0233                                      l6193 004C  
                                    l6185 0035                                      l6177 0023  
                                    l6169 0014                                      l5483 0306  
                                    l5475 02E7                                      l5467 02D9  
                                    l5539 0675                                      l5547 0677  
                                    l5803 05A9                                      l5627 0790  
                                    l5571 05EF                                      l5563 05D9  
                                    l5395 1628                                      l5299 0247  
                                    l6195 004D                                      l6179 002C  
                                    l4675 0E02                                      l6453 0A50  
                                    l5485 030D                                      l5477 02F8  
                                    l5469 02E0                                      l5717 04EF  
                                    l5813 05C2                                      l5549 05C6  
                                    l5397 162A                                      l6197 0054  
                                    l6189 0038                                      l6373 0DA9  
                                    l4677 0E04                                      l6471 0FD3  
                                    l5487 0314                                      l5479 02FD  
                                    l5727 0491                                      l5719 0474  
                                    l5823 0350                                      l5815 05C3  
                                    l5807 05B3                                      l5559 05D5  
                                    l6199 0057                                      l6367 0D98  
                                    l6359 0D84                                      l6481 0FE0  
                                    l6465 0FCA                                      l6449 0A4C  
                                    l6393 00E8                                      l5905 03FE  
                                    l5737 04A3                                      l5681 0548  
                                    l5825 0351                                      l5497 061A  
                                    l5745 0316                                      l6395 00FB  
                                    l6627 02AD                                      l5931 045F  
                                    l5907 040C                                      l5691 055D  
                                    l5659 051C                                      l5835 035C  
                                    l5827 0352                                      l5595 072B  
                                    l5771 070E                                      l5579 05F8  
                                    l6493 0FF3                                      l6397 0149  
                                    l6629 02C7                                      l5925 043D  
                                    l5917 042C                                      l5861 0382  
                                    l5693 04B8                                      l5837 035D  
                                    l5853 0377                                      l5781 0729  
                                    l5871 0394                                      l5839 035E  
                                    l5783 0572                                      l5775 0713  
                                    l6497 0FFB                                      l6489 0FEF  
                                    l5929 045A                                      l5873 0396  
                                    l5697 04C1                                      l5849 036C  
                                    l5793 058A                                      VLOOP 0178  
                                    l5699 04CA                                      l5895 03E4  
                                    l5887 03C3                                      l5995 0B9B  
                                    l5987 0B8B                                      WLOOP 012C  
                                    _LATC 010E                                      u4000 026E  
                                    u4001 026D                                      u4010 0286  
                                    u4011 0285                                      u5020 0023  
                                    u4205 0624                                      u5005 09D2  
                                    u5030 0034                                      u5031 0033  
                                    u4160 02D2                                      u5040 0053  
                                    u5041 0052                                      u4170 02E5  
                                    u5050 0082                                      u4171 02E4  
                                    u5051 0081                                      u4180 0306  
                                    u5060 0090                                      u5205 011B  
                                    u5061 008F                                      u5070 0095  
                                    u5215 0151                                      u3295 0DFA  
                                    u3800 01B3                                      u5080 00A8  
                                    u5225 0169                                      u4345 073B  
                                    u3801 01B2                                      u5081 00A7  
                                    u3810 01BF                                      u3811 01BE  
                                    u3900 0206                                      u3820 01C3  
                                    u3821 01C2                                      u3910 020C  
                                    u3830 01CB                                      u3911 020B  
                                    u3831 01CA                                      u3920 0214  
                                    u3840 01D2                                      u4800 0D5D  
                                    u3921 0213                                      u3841 01D1  
                                    u3930 0218                                      u3850 01D6  
                                    u3770 0197                                      u4810 0B95  
                                    u5355 0FE8                                      u5195 0103  
                                    u3931 0217                                      u3851 01D5  
                                    u3771 0196                                      u3940 021F  
                                    u3860 01E1                                      u3780 01A6  
                                    _RCIF 008D                                      u3941 021E  
                                    u3861 01E0                                      u3781 01A5  
                                    u4805 0D59                                      u3950 0223  
                                    u3870 01E5                                      u3790 01AE  
                                    u5295 0A45                                      u3951 0222  
                                    u3871 01E4                                      u3791 01AD  
                                    u3960 023A                                      u3880 01EE  
                                    u3961 0239                                      u3881 01ED  
                                    u3970 0240                                      u3890 01F2  
                                    u4850 089B                                      u3971 023F  
                                    u3891 01F1                                      u3980 0247  
                                    u3981 0246                                      u3990 0258  
                                    u4790 0D4C                                      u3991 0257  
                   ??_USBCtrlTrfTxService 0056                                      u4880 08EB  
                                    u4945 0924                                      u4795 0D47  
                                    u4955 092B                                      _UCFG 0E91  
                                    _UEP0 0E98                                      _UEP1 0E99  
                                    _UEIE 0E97                                      _UEIR 0E93  
                                    _UCON 0E8E                                      _TMR0 0015  
                         __end_of_ISRCode 0012    USBStdFeatureReqHandler@current_ep_data 00A2  
                                    _pDst 013F                                      _main 085C  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                      __end_of_AsicPushWork 0A95  
                                    start 0012                             __CFG_IESO$OFF 0000  
                      _USBCBCheckOtherReq 07FC                __end_of_USBCheckStdRequest 0382  
                  ??_USBCtrlTrfOutHandler 005C                         ___bmul@multiplier 0058  
               ??_USBStdFeatureReqHandler 0066                           __end_of_InitFAN 0F3B  
                ??_USBStdGetStatusHandler 0056                            ?_USBDeviceInit 0070  
                           ?_InitResultRx 0070                       ?_USBCBCheckOtherReq 0070  
                                   INTCON 000B                           i1SendCmdReply@n 007B  
                                   PMADRH 0192                                     PMADRL 0191  
                                   PMDATH 0194                                     PMDATL 0193  
                                   PMCON1 0195                                     PMCON2 0196  
                                   STATUS 0003                                     ?_main 0070  
                         __end_of___awdiv 1000                             __CFG_WDTE$OFF 0000  
       __size_of_USBCtrlEPServiceComplete 003B                           ___awdiv@divisor 0056  
                  __end_of_USBDeviceTasks 0288                 ?_USBCtrlEPServiceComplete 0070  
                                   _IOCBF 0396                           __end_of___lwdiv 0A55  
                                   i1l732 1752                                     i1l835 000E  
                                   _UADDR 0E96                           ___awdiv@counter 005A  
                                   _RCREG 0199                             ?_InitWorkTick 0070  
                                   _USTAT 0E8F        __size_of_USBCtrlEPAllowStatusStage 003B  
                                   _FwPwd 1001                             __CFG_PWRTE$ON 0000  
                          __CFG_FCMEN$OFF 0000           __end_of_USBCtrlEPAllowDataStage 063D  
                                   _sd000 10B9                                     _sd001 1013  
                                   _sd002 1047                                     __pusb 0191  
                                   _fwbuf 012A                      ??_USBCBCheckOtherReq 0056  
                        __end_ofi1___bmul 17EB                          __end_ofi1___wmul 1800  
                        ??i1_SendCmdReply 0050                                     status 0003  
                     i1___wmul@multiplier 0070                                     wtemp0 007E  
            __size_of_USBStdSetCfgHandler 005D                            __CFG_MCLRE$OFF 0000  
                         __initialization 0803                       UpdateFirmware@count 00AD  
                        __end_of_EraseRow 00FB                               _AsicPreCalc 0B8B  
                            __end_of_main 086E                               _DetectAsics 0F4C  
                          ??_InitResultRx 0056                 __size_of_USBCtrlEPService 0057  
                                  ??_main 006A                            ??_InitWorkTick 0056  
               __size_of_InitializeSystem 0016                           ?_USBDeviceTasks 0070  
                             ?_USBSuspend 0070                          __end_of_ResultRx 1776  
                               ??_ISRCode 007D                            _InitTempSensor 0E1A  
                        __end_of_UserInit 0E1A                                    _ACTCON 039B  
                                  _ADRESH 009C                         SendAsicData@split 005E  
                        ___awdiv@dividend 0058                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of_WorkTick 0E0E                          __end_of_WriteRow 0149  
                                  i1l6513 17B7                                    i1l6515 17DA  
                                  i1l4951 17E1                                    i1l4935 17ED  
                                  i1l6527 174A                                    i1l6545 1770  
                                  i1l6537 1736                                    i1l4939 17F3  
                                  i1l6539 175D                                    _OSCCON 0099  
                                  u538_25 1798                                    _TMR0IF 005A  
                                  _TMR0CS 04AD                                    _PWM1OE 309E  
                                  _TMR2IF 0089                                    _TMR2ON 00E2  
                               ??_InitFAN 0056                                    _Send32 0ADF  
                       _shortPacketStatus 0141                             ?_SendCmdReply 005C  
                         USBDeviceTasks@i 00A8                             ?_SendAsicData 005C  
             USBStdFeatureReqHandler@pUEP 00A0                  USBTransferOnePacket@data 005A  
              USBCtrlTrfInHandler@lastDTS 005B                                    _Status 0152  
                         ??_USBDeviceInit 0056                                    ___bmul 0D2E  
                                  ___wmul 0A1B                                 ??___awdiv 005A  
                            ?_USBCBInitEP 0070                                 ??___lwdiv 005A  
                       _USBEnableEndpoint 1677           __size_of_USBStdGetStatusHandler 0044  
                                  _memset 0559                          ___awdiv@quotient 005C  
                              _ProcessCmd 086E                        ?_USBEnableEndpoint 005A  
                                  _rotate 0D3B                     _USBCBStdSetDscHandler 0802  
                                  clrloop 15EE             __size_of_USBTransferOnePacket 0049  
                      __size_of_ProcessIO 0055                    __end_of_InitTempSensor 0E2B  
                      __size_of_VerifyRow 0048                       ??_USBEnableEndpoint 005B  
                             _CtrlTrfData 0048                     __size_of_AsicPushWork 0040  
                    _controlTransferState 006D                   __end_of__initialization 085A  
                __size_of_USBStallHandler 0018                            ??_SendCmdReply 0061  
                     ___bmul@multiplicand 0056                            ??_SendAsicData 005F  
                     __size_of_USBSuspend 000F                             __end_of_FwPwd 100F  
                 ??_USBCheckVendorRequest 0056                            __pcstackCOMMON 0070  
               __end_of_USBEnableEndpoint 1696                             __end_of_sd000 10BD  
                           __end_of_sd001 1047                             __end_of_sd002 107B  
                            __pidataBANK2 162C                              __pidataBANK3 15F9  
                            __pidataBANK6 1648                         _USBCB_SOF_Handler 0003  
        __size_of_USBCtrlEPAllowDataStage 003C             __size_of_USBConfigureEndpoint 0029  
             __end_of_USBCtrlTrfInHandler 05C6                                __end_ofPL2 0E3D  
                      ?_USBCB_SOF_Handler 0070                                __end_ofPL4 0E4A  
                              __end_ofPL6 0E52                                __end_ofPL8 0E58  
                              __end_of_ID 10B9                                 ?i1___bmul 0070  
                               ?i1___wmul 0070                            _OPTION_REGbits 0095  
                            _AsicPushWork 0A55                           ?_InitTempSensor 0070  
                     i1SendCmdReply@count 007A                       ??_USBCB_SOF_Handler 0056  
                ??_USBCtrlTrfSetupHandler 006A                          i1___bmul@product 0072  
                  _USBStdGetStatusHandler 0474                                 ?_EraseRow 0056  
                    __end_of_InitResultRx 0F4C                                __pbssBANK0 006A  
                              __pbssBANK1 00EB                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                         i1SendCmdReply@cmd 0076  
                    __end_of_InitWorkTick 0F23               __size_of_USBWakeFromSuspend 0010  
                             _pBDTEntryIn 006A                         __end_of_ProcessIO 0DC5  
        __end_of_USBCtrlEPServiceComplete 0601                                   ?_Send32 0070  
               __end_of_USBCB_SOF_Handler 0004                                __pmaintext 085C  
                       __end_of_VerifyRow 0191                              WriteRow@dest 0056  
                    USBCtrlTrfRxService@i 005A                                 ?_ResultRx 0070  
                                 ?___bmul 0056                                   ?___wmul 0056  
                              __pintentry 0004                                 ?_UserInit 0070  
                              __ptext1910 0A55                                __ptext1911 0A95  
                              __ptext1920 1605                                __ptext1912 0ADF  
                              __ptext1921 1614                                __ptext1913 0B8B  
                              __ptext1930 063D                                __ptext1922 06B7  
                              __ptext1914 0D3B                                __ptext1906 0DDB  
                              __ptext1931 0343                                __ptext1923 0316  
                              __ptext1915 09B1                                __ptext1907 0DC5  
                              __ptext1940 0F23                                __ptext1932 04FC  
                              __ptext1924 05C6                                __ptext1908 0D70  
                              __ptext1941 0E1A                                __ptext1933 0559  
                              __ptext1925 0601                                __ptext1909 086E  
                              __ptext1950 0802                                __ptext1942 0F0D  
                              __ptext1934 04B8                                __ptext1926 070E  
                              __ptext1918 16BF                                __ptext1951 1668  
                              __ptext1943 0F3B                                __ptext1935 0474  
                              __ptext1927 072B                                __ptext1919 07EC  
                              __ptext1960 0D2E                                __ptext1952 1677  
                              __ptext1944 07FE                                __ptext1936 0382  
                              __ptext1928 0796                                __ptext1961 0A1B  
                              __ptext1953 1696                                __ptext1945 07FF  
                              __ptext1929 0572                                   ?_memset 0056  
                              __ptext1946 0003                                __ptext1938 0E0E  
                              __ptext1963 1733                                __ptext1947 0002  
                              __ptext1939 0F4C                                __ptext1964 1776  
                              __ptext1948 07FC                                __ptext1965 17EB  
                              __ptext1949 07FD                                __ptext1966 17DF  
                              __ptext1958 0A30                                __ptext1967 0000  
                              __ptext1959 0FC0                    ?_USBCBStdSetDscHandler 0070  
                              _device_dsc 109B                          _USBCtrlEPService 06B7  
                               ?_WorkTick 0070                               ?_ProcessCmd 0070  
                              ??i1___bmul 0071                                _ep_data_in 0126  
                               ?_WriteRow 0056                                   ?_rotate 0059  
                              ??i1___wmul 0074                          _InitializeSystem 0DC5  
                             _NonceRanges 01A0               __end_of_USBCtrlTrfRxService 0796  
                      _USBCheckStdRequest 0343                         _configDescriptor1 107B  
             __end_of_USBCtrlTrfTxService 067C                       _USBStdSetCfgHandler 04FC  
                                 _ISRCode 0004                                   _PWM1DCH 0612  
                                 _PWM1DCL 0611                                   _OSCTUNE 0098  
                                 _PWM1CON 0613                       ?_USBCheckStdRequest 0070  
            __size_of_USBStdGetDscHandler 0044                                   _UIEbits 0E92  
           __size_of_USBCBWakeFromSuspend 0001                                ??_EraseRow 0058  
                              __stringtab 1000                                   _UIRbits 0E90  
                                 _InitFAN 0F23                                FAIL_VERIFY 018E  
                    ?_USBStdSetCfgHandler 0070                           __size_of_Send32 00AC  
                              ??_ResultRx 007C                __size_of_USBEnableEndpoint 001F  
                            ?_AsicPreCalc 0066                       _UpdateFirmware$2490 00A9  
                     _UpdateFirmware$2491 00AB                              ?_DetectAsics 0070  
                    ??_USBCheckStdRequest 006A                           __size_of___bmul 000D  
           __size_of_USBCtrlTrfOutHandler 001D                                   ___awdiv 0FC0  
                        ??_USBDeviceTasks 00A7                           __size_of___wmul 0015  
                                 _WorkNow 00EE                                   _WorkQue 233C  
                                 ___lwdiv 0A30                         ??_USBStallHandler 0056  
                              ??_UserInit 0067                           __size_of_memset 0019  
                              ??_WorkTick 0056                 __end_of_configDescriptor1 109B  
                    __size_of_USBCBInitEP 000F                                ??_WriteRow 0059  
                                 _inPipes 014A               _USBDeferOUTDataStagePackets 0136  
                         __size_of_rotate 0035                           ResultRx@TimeOut 007C  
                            ??_USBSuspend 0066                                 _T2CONbits 001C  
                       _USBCBErrorHandler 0002                      __end_of_SendCmdReply 0A1B  
                     i1___bmul@multiplier 0071                                 _IOCBPbits 0394  
                    __end_of_SendAsicData 0ADF                        ?_USBCBErrorHandler 0070  
                           ?_USBCBSuspend 0070                               ProcessCmd@n 00E5  
                      __end_of_USB_CD_Ptr 1013           __size_of_USBCtrlTrfSetupHandler 002D  
                 __size_of_UpdateFirmware 00D4                      end_of_initialization 085A  
                          _ProcessIO$2405 00E9                            _ProcessIO$2371 00E7  
             __size_of_USBCBCheckOtherReq 0001                        __end_of_USB_SD_Ptr 1012  
                     _pBDTEntryEP0OutNext 006F                                   init_ram 15E1  
                     ??_USBCBErrorHandler 0056                                   memset@c 0058  
                                 memset@n 005A                                   memset@p 005D  
                                 initloop 15E2                       __size_of_ProcessCmd 0143  
                ?_USBStdFeatureReqHandler 0070                     ??_USBStdSetCfgHandler 0066  
                        SendCmdReply@data 005E                __size_of_USBCB_SOF_Handler 0001  
                      __end_of_USBSuspend 1614                   _USBCtrlEPAllowDataStage 0601  
                               _RCSTAbits 019D                                   rotate@x 0059  
                                 rotate@y 005D                           AsicPreCalc@work 0066  
                _USBCtrlEPServiceComplete 05C6                     i1___wmul@multiplicand 0072  
              _USBStatusStageEnabledFlag1 0138                _USBStatusStageEnabledFlag2 0139  
                      USBEnableEndpoint@p 005D                 __end_of_USBCBErrorHandler 0003  
                        __CFG_FOSC$INTOSC 0000                     __size_of_InitResultRx 0011  
                               _TRISAbits 008C                                 _TRISCbits 008E  
                          ??_USBCBSuspend 0056                        _BothEP0OutUOWNsSet 0130  
               USBStdSetCfgHandler@i_1089 0068                                 _OUTPacket 02A0  
               USBConfigureEndpoint@EPNum 0058                ?_USBCtrlEPAllowStatusStage 0070  
                   __size_of_InitWorkTick 0016       USER_USB_CALLBACK_EVENT_HANDLER@size 0064  
                               _USTATcopy 00EF              __end_of_USBTransferOnePacket 0316  
                               _TXSTAbits 019E                             _PrecalcHashes 01C0  
                       UpdateFirmware@row 00B0                        USBDeviceInit@i_718 005A  
                          __end_of_Send32 0B8B                    _USBCtrlTrfSetupHandler 0316  
          __size_of_USBCheckVendorRequest 0001             __end_of_USBCheckVendorRequest 07FE  
                 __size_ofi1_SendCmdReply 0069                            __end_of___bmul 0D3B  
                   __end_of_USBDeviceInit 1733                              _InitResultRx 0F3B  
                          __end_of___wmul 0A30                          ??_InitTempSensor 0056  
                             _BAUDCONbits 019F                            __end_of_memset 0572  
                          __end_of_rotate 0D70                              _InitWorkTick 0F0D  
                       __size_ofi1___bmul 000C                               __end_ofPL10 0E68  
                             __end_ofPL20 0E9B                               __end_ofPL12 0E70  
                             __end_ofPL30 0EBA                               __end_ofPL22 0EA4  
                             __end_ofPL14 0E76                               __end_ofPL40 06A8  
                             __end_ofPL32 0EC3                               __end_ofPL24 068D  
                             __end_ofPL16 0E80                               __end_ofPL50 06B0  
                             __end_ofPL42 07E1                               __end_ofPL34 0EC8  
                             __end_ofPL26 069D                               __end_ofPL18 0E93  
                             __end_ofPL60 07E8                               __end_ofPL52 0EF1  
                             __end_ofPL44 0ED8                               __end_ofPL36 07D7  
                             __end_ofPL28 0EB4                               __end_ofPL62 0F02  
                             __end_ofPL54 0EF7                               __end_ofPL46 0EE1  
                             __end_ofPL38 0ED0                               __end_ofPL64 0F08  
                             __end_ofPL56 0EFD                               __end_ofPL48 0EE9  
                             __end_ofPL66 07EC                               __end_ofPL58 06B7  
                             __end_ofPL68 0F0D                       start_initialization 0803  
                       __size_ofi1___wmul 0015                   ?_USBStdGetStatusHandler 0070  
           USBCtrlTrfRxService@byteToRead 005B              __end_of_USBConfigureEndpoint 16BF  
         __end_of_USBStdFeatureReqHandler 0474         __end_of_USBCtrlEPAllowStatusStage 07D1  
                __end_of_USBCtrlEPService 070E                         __size_of_EraseRow 0013  
                        SendAsicData@work 005C                  __end_of_InitializeSystem 0DDB  
               ??_USBCtrlEPAllowDataStage 0059                            USBDeviceInit@i 005B  
                                ??_Send32 0056                            USBDeviceInit@p 0058  
                  _pBDTEntryEP0OutCurrent 006E                   USBTransferOnePacket@dir 0059  
                 USBTransferOnePacket@len 005B                   ??_USBCBStdSetDscHandler 0056  
                                ??___bmul 0057                                 _ResultQue 0142  
                                ??___wmul 005A                       _USBStdGetDscHandler 04B8  
                               _ProcessIO 0D70                               __pdataBANK2 0151  
                             __pdataBANK3 01D8                               __pdataBANK6 0320  
                       __size_of_ResultRx 0043                      __size_of_AsicPreCalc 01A3  
                               _VerifyRow 0149                                  ??_memset 005C  
                    __size_of_DetectAsics 0074                              ??_ProcessCmd 00E1  
                   __size_of_SendCmdReply 006A                                  ??_rotate 005E  
              __size_of_USBCBErrorHandler 0001                     __size_of_SendAsicData 004A  
                       __size_of_UserInit 000C                    _USBActiveConfiguration 014F  
          __end_of_USBStdGetStatusHandler 04B8                               __pbssBIGRAM 233C  
                       __size_of_WorkTick 0033                         __size_of_WriteRow 004E  
                           __pcstackBANK0 0050                             __pcstackBANK1 00A0  
            __size_of_USBCtrlTrfInHandler 0054                                  ?_ISRCode 0070  
                         UpdateFirmware@n 00AF                            _UpdateFirmware 0014  
                    ?_USBStdGetDscHandler 0070                        i1SendCmdReply@data 0078  
              __end_of_USBWakeFromSuspend 07FC                           _USBStallHandler 1614  
                            _pBDTEntryOut 012C                                  ?_InitFAN 0070  
                            _send32_count 0140                                 __pnvBANK2 016D  
                      __end_of_ProcessCmd 09B1                          ___lwdiv@dividend 0058  
                            _SendCmdReply 09B1                               WriteRow@off 0058  
                            _SendAsicData 0A95                      __end_of_USBCBSuspend 07FF  
            __end_of_USBCBWakeFromSuspend 0800                                  ?___awdiv 0056  
                               __plowcode 0014                                ?_ProcessIO 0070  
                                ?___lwdiv 0056                                ?_VerifyRow 0056  
                            AsicPreCalc@K 00A8                              AsicPreCalc@m 00B8  
                            AsicPreCalc@n 00E0                              AsicPreCalc@x 00DC  
                            AsicPreCalc@y 00D8                              AsicPreCalc@z 00B4  
                               __pstrings 1000                                 __pswtext1 10BD  
                    _USBTransferOnePacket 02CD                              DetectAsics@x 0066  
                  __end_of_UpdateFirmware 00E8                                 _last_bit0 013D  
                               _last_bit1 013E              __end_of_USBCtrlTrfOutHandler 072B  
                   ??_USBStdGetDscHandler 0056                               _ep_data_out 0128  
                        ___lwdiv@quotient 005B                                VERIFY_DONE 0190  
            __size_of_USBCtrlTrfRxService 006B             USBConfigureEndpoint@direction 0056  
            __size_of_USBCtrlTrfTxService 003F                            ___wmul@product 005A  
                                _LATAbits 010C                ??_USBCtrlEPServiceComplete 005B  
                                _PIE2bits 0092                     i1___bmul@multiplicand 0070  
                         SendCmdReply@cmd 005C                                  _PIR2bits 0012  
                                _INPacket 0220                 USBCtrlEPService@setup_cnt 00A6  
                                _UEP0bits 0E98                _USBDeferINDataStagePackets 0135  
                          i1_SendCmdReply 1776                             ??_USBCBInitEP 0060  
             __size_of_USBCheckStdRequest 003F                                  _UCONbits 0E8E  
                    _USBConfigureEndpoint 1696                                START_WRITE 013E  
                           ProcessCmd@cmd 00E6          __size_of_USBStdFeatureReqHandler 00F2  
                                i1___bmul 17DF                                _ADCON0bits 009D  
                              _ADCON1bits 009E                                _ADCON2bits 009F  
                       ___wmul@multiplier 0056                     ?_USBTransferOnePacket 0059  
                                i1___wmul 17EB                                  _BankSize 016D  
                            _RemoteWakeup 0131                           ?_UpdateFirmware 0070  
                                _ClockCfg 015F                __end_of_USBCBCheckOtherReq 07FD  
                                _HashTime 0151                   __end_of_USBStallHandler 162C  
                        __size_of_ISRCode 000E                                  _EraseRow 00E8  
             ??_USBCtrlEPAllowStatusStage 0056               __end_of_USBStdSetCfgHandler 0559  
                            _SlaveAddress 0133                        __end_of_device_dsc 10AD  
                 ?_USBCtrlTrfSetupHandler 0070                          __size_of_InitFAN 0018  
                 USBStdGetStatusHandler@p 0056                    __end_ofi1_SendCmdReply 17DF  
                  USBTransferOnePacket@ep 005E                                  _ResultQC 0132  
                                _ResultRx 1733                                  _SetupPkt 0040  
                                _SlowTick 0134                               ??_ProcessIO 006A  
                   ?_USBConfigureEndpoint 0056                                  _UserInit 0E0E  
                        __size_of___awdiv 0040                               ??_VerifyRow 0059  
                        __size_of___lwdiv 0025                                  _WorkTick 0DDB  
                      __end_of__stringtab 1001                                  _WriteRow 00FB  
                              _ANSELBbits 018D                       __end_of_USBCBInitEP 1677  
                           ?_AsicPushWork 0070                               _send32_data 012E  
                 __size_of_USBDeviceTasks 00F7                           ___lwdiv@divisor 0056  
                         ___lwdiv@counter 005A                      _USBCBWakeFromSuspend 07FF  
          __end_of_USBCtrlTrfSetupHandler 0343                             __size_of_main 0012  
                       ?_USBCtrlEPService 0070                     __size_of_USBCBSuspend 0001  
                       ?_InitializeSystem 0070                        ??_USBCtrlEPService 00A4  
                                clear_ram 15ED                       _USBGenericOutHandle 00EC  
                     _USBCtrlTrfInHandler 0572                           ?i1_SendCmdReply 0076  
                      ??_InitializeSystem 0067                                  _outPipes 0120  
                    _USBCtrlTrfOutHandler 070E                 _USBCtrlEPAllowStatusStage 0796  
          __size_of_USBCBStdSetDscHandler 0001             __end_of_USBCBStdSetDscHandler 0803  
                  ??_USBTransferOnePacket 005C                     _USBCheckVendorRequest 07FD  
                          ??_AsicPushWork 0068                 _USBDeferStatusStagePacket 006C  
                              _INTCONbits 000B                             VerifyRow@dest 0056  
                      _USBGenericInHandle 0137                      ?_USBCtrlTrfInHandler 0070  
           USBCtrlTrfTxService@byteToSend 0058                                  memset@p1 0056  
                            _USBCBSuspend 07FE                          ?_USBStallHandler 0070  
                USBStdFeatureReqHandler@p 00A3                     ?_USBCBWakeFromSuspend 0070  
                                intlevel1 0000                    __size_of_USBDeviceInit 0074  
 __end_of_USER_USB_CALLBACK_EVENT_HANDLER 02CD  __size_of_USER_USB_CALLBACK_EVENT_HANDLER 0045  
       ??_USER_USB_CALLBACK_EVENT_HANDLER 0066          ?_USER_USB_CALLBACK_EVENT_HANDLER 0060  
         _USER_USB_CALLBACK_EVENT_HANDLER 0288                          AsicPreCalc@F3349 01D8  
                                next_word 0AE4                         SendCmdReply@count 0060  
                           SendCmdReply@n 0067                             ??_AsicPreCalc 00A0  
                         _ProcessCmd$2052 00E3                             ??_DetectAsics 005E  
                  ??_USBConfigureEndpoint 0057                     ?_USBCtrlTrfOutHandler 0070  
                    __CFG_CPUDIV$NOCLKDIV 0000                       _USBCtrlTrfRxService 072B  
                             _USBCBInitEP 1668                        _USBWakeFromSuspend 07EC  
                 _USBStdFeatureReqHandler 0382                              VerifyRow@off 0058  
                     _USBCtrlTrfTxService 063D                       ?_USBWakeFromSuspend 0070  
                   ??_USBCtrlTrfInHandler 0059                     _USBAlternateInterface 0150  
                     USBEnableEndpoint@ep 005F                           _endpoint_number 013C  
                            EraseRow@addr 0056                   __size_of_InitTempSensor 0011  
                    ?_USBCtrlTrfRxService 0070                  ?_USBCtrlEPAllowDataStage 0070  
                    ?_USBCtrlTrfTxService 0070              _USBStatusStageTimeoutCounter 013A  
                    ??_USBWakeFromSuspend 0066                USBTransferOnePacket@handle 005F  
                              _USB_CD_Ptr 1012  
